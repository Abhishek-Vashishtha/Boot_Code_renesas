///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V4.20.1.2260 for RL78               20/Dec/2020  22:38:20
// Copyright 2011-2019 IAR Systems AB.
// Network license: 192.10.10.205 (STD)
//
//    Core               =  s3
//    Calling convention =  v2
//    Code model         =  Near
//    Data model         =  Near
//                       =   
//    Source file        =
//        D:\Dheeraj\New folder\0. GDEV72 -
//        BootCode\source_code\source_files\cosem.c
//    Command line       =
//        -f C:\Users\laptop\AppData\Local\Temp\EW3CD8.tmp ("D:\Dheeraj\New
//        folder\0. GDEV72 - BootCode\source_code\source_files\cosem.c" --core
//        s3 --code_model near --calling_convention v2 --near_const_location
//        ram -o "D:\Dheeraj\New folder\0. GDEV72 - BootCode\Debug\Obj"
//        --dlib_config "C:\Program Files\IAR Systems\Embedded Workbench
//        8.4\rl78\LIB\DLib_Config_Normal.h" --double=32 -e -On --no_cse
//        --no_unroll --no_inline --no_code_motion --no_tbaa --no_cross_call
//        --no_scheduling --no_clustering --debug -lA "D:\Dheeraj\New folder\0.
//        GDEV72 - BootCode\Debug\List" -I "D:\Dheeraj\New folder\0. GDEV72 -
//        BootCode\source_code\driver_files\" -I "D:\Dheeraj\New folder\0.
//        GDEV72 - BootCode\source_code\library_files\" -I "D:\Dheeraj\New
//        folder\0. GDEV72 - BootCode\source_code\misc_files\" -I
//        "D:\Dheeraj\New folder\0. GDEV72 -
//        BootCode\source_code\source_files\" --data_model near)
//    Locale             =  C
//    List file          =
//        D:\Dheeraj\New folder\0. GDEV72 - BootCode\Debug\List\cosem.s
//
///////////////////////////////////////////////////////////////////////////////

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__calling_convention", "v2"
        RTMODEL "__code_model", "near"
        RTMODEL "__core", "s3"
        RTMODEL "__data_model", "near"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__dlib_version", "6"
        RTMODEL "__double_size", "32"
        RTMODEL "__far_rt_calls", "false"
        RTMODEL "__rt_version", "2"

        #define SHT_PROGBITS 0x1
        #define SHT_IAR_NOINIT 0xabdc5467
        #define SHF_WRITE 0x1

        EXTERN _info
        EXTERN _char_array
        EXTERN _opr_data
        EXTERN _decimal
        EXTERN _DISPLAY_NAVIGATION_TYPE
        EXTERN _buffer_first_not_fill_f
        EXTERN _sel_access_flag
        EXTERN _midnight_roll_f
        EXTERN _Now
        EXTERN _from_val
        EXTERN _to_val
        EXTERN _access_selector
        EXTERN _midnight_par_cnt
        EXTERN _dls_count_dlms
        EXTERN _no_bytes
        EXTERN _sel_obj
        EXTERN _block_size
        EXTERN _multi_filling_f
        EXTERN _no_obj
        EXTERN _to_cntr
        EXTERN _OffTime
        EXTERN _max_day_counter
        EXTERN _from_cntr
        EXTERN _lsro_flag
        EXTERN _mdi_sel_ls
        EXTERN _block_no
        EXTERN _TempTime
        EXTERN _tariff_no
        EXTERN _bill_count
        EXTERN _md_reset_count
        EXTERN _to_ptr
        EXTERN _from_ptr
        EXTERN _element_filled
        EXTERN _last_block
        EXTERN _info2
        EXTERN _asserr_flag
        EXTERN _conf_ser_flag
        EXTERN _conf_serror_flag
        EXTERN _conf_err_flag
        EXTERN _conf_type_flag
        EXTERN _decerr_flag
        EXTERN _nrm_flag
        EXTERN _seg_flag
        EXTERN _infose_flag
        EXTERN _infore_flag
        EXTERN _cosem_flag
        EXTERN _seg_flagsd
        EXTERN _asso0_flag
        EXTERN _asso1_flag
        EXTERN _asso2_flag
        EXTERN _asso3_flag
        EXTERN _aut_pswd
        EXTERN _aut_pswd_default
        EXTERN _aut_pswd1
        EXTERN _aut_pswd1_default
        EXTERN _multi_resp
        EXTERN _dlms_firm_ver
        EXTERN _utility_id
        EXTERN _firm_rev
        EXTERN _cal_done_f
        EXTERN _attribute_id
        EXTERN _COMPART_VOLTAGE_SIZE
        EXTERN _COMPART_VOLTAGE_ENTRIES
        EXTERN _COMPART_CURRENT_SIZE
        EXTERN _COMPART_CURRENT_ENTRIES
        EXTERN _COMPART_TRANSACTION_SIZE
        EXTERN _COMPART_TRANSACTION_ENTRIES
        EXTERN _COMPART_OTHERS_SIZE
        EXTERN _COMPART_OTHERS_ENTRIES
        EXTERN _ass_ser
        EXTERN _client_add
        EXTERN _four_pass_f
        EXTERN _aut_pswd2
        EXTERN _invo_prio
        EXTERN _obis_code
        EXTERN _sel_obj_tamper
        EXTERN _mdi_sel_new
        EXTERN _md_type
        EXTERN _mdi_sel
        EXTERN _mdi_sel_ls_new
        EXTERN _ls_fg_f
        EXTERN _flag_rtc_change
        EXTERN _ls_rtc_fill
        EXTERN _ls_rev_fill
        EXTERN _lsip_period
        EXTERN _flag_rtc1
        EXTERN _read_rtc_cnt
        EXTERN _recv_buffer
        EXTERN _no_midnight_f
        EXTERN _bill_hr
        EXTERN _bill_min
        EXTERN _bill_date
        EXTERN _temp_bill_date
        EXTERN _class_id
        EXTERN _temp_us8
        EXTERN _MemoryStatus1
        EXTERN _MemoryStatus2
        EXTERN _serial_no
        EXTERN _meter_type
        EXTERN _flag_system1
        EXTERN _top_cover_restore_command
        EXTERN _md_reset_ip_flag
        EXTERN _mdreset_type
        EXTERN _e2416_q2_byte
        EXTERN _flag1
        EXTERN _out
        EXTERN _auth_fill
        EXTERN _conf_blk
        EXTERN _METERING_MODE
        EXTERN _quadrant
        EXTERN _tpr
        EXTERN _selective_values_byte
        EXTERN _compart1
        EXTERN _trn_buf
        EXTERN _req_cnt
        EXTERN _energy_rollover_count
        EXTERN _flag_metro3
        EXTERN _last_bill_tpr_read
        EXTERN _bill_pom
        EXTERN _bill_tpr_cnt
        EXTERN _midnight_fill_rtc_f
        EXTERN _flag_battery
        EXTERN _flag_tamper2
        EXTERN _flag_eeprom_error
        EXTERN ?I_SSWITCH_L10
        EXTERN ?I_VSWITCH_L10
        EXTERN ?L_MUL_FAST_L03
        EXTERN ?L_VSWITCH_L10
        EXTERN ?MEMCPY_NEAR
        EXTERN ?MEMCPY_SMALL_NEAR
        EXTERN ?MOVE_LONG_L06
        EXTERN ?SI_CMP_L02
        EXTERN ?SI_DIV_L02
        EXTERN ?SI_MOD_L02
        EXTERN ?UC_DIV_L01
        EXTERN ?UC_MOD_L01
        EXTERN _COMPART_CURRENT_END_ADD
        EXTERN _COMPART_CURRENT_START_ADD
        EXTERN _COMPART_OTHERS_END_ADD
        EXTERN _COMPART_OTHERS_START_ADD
        EXTERN _COMPART_TRANSACTION_END_ADD
        EXTERN _COMPART_TRANSACTION_START_ADD
        EXTERN _COMPART_VOLTAGE_END_ADD
        EXTERN _COMPART_VOLTAGE_START_ADD
        EXTERN _CTR
        EXTERN _Cipher
        EXTERN _Eprom_WriteWM
        EXTERN _FSL_key
        EXTERN _GetNextDate
        EXTERN _KeyExpansion
        EXTERN _PTR
        EXTERN _R_WDT_Restart
        EXTERN _Self_Programming_main
        EXTERN _UintLoadSurptr
        EXTERN _UintLoadSurptr1
        EXTERN __Add64
        EXTERN __CmpGeu64
        EXTERN __CmpNe64
        EXTERN __Divu64
        EXTERN __L2LLU
        EXTERN __LLU2L
        EXTERN __Mul64
        EXTERN _aut_pswd1_1
        EXTERN _aut_pswd1_2
        EXTERN _bat_mode_secs
        EXTERN _bcd_to_decimal
        EXTERN _bill_apparent_energy
        EXTERN _bill_energy_export
        EXTERN _bill_energy_import
        EXTERN _bill_pf
        EXTERN _bill_reactive_energy_lag
        EXTERN _bill_reactive_energy_lead
        EXTERN _buffer_scaler_filler
        EXTERN _byte_cont
        EXTERN _calibration_reset
        EXTERN _capture_objects_filler
        EXTERN _char_array_into_time4
        EXTERN _char_array_into_time5
        EXTERN _char_array_into_time5_sec
        EXTERN _char_array_to_int
        EXTERN _char_array_to_long3
        EXTERN _char_array_to_long4
        EXTERN _cli_id
        EXTERN _compartment3
        EXTERN _cum_max_demand_kva
        EXTERN _cum_max_demand_kw
        EXTERN _curr
        EXTERN _current_bill_pf
        EXTERN _d_array
        EXTERN _day_counter
        EXTERN _decimal_to_bcd
        EXTERN _demand
        EXTERN _dlms_address
        EXTERN _e2416_byte
        EXTERN _energy
        EXTERN _energy_clear
        EXTERN _eprom_diagnostic
        EXTERN _eprom_read
        EXTERN _eprom_write
        EXTERN _error_cnt_eep
        EXTERN _error_cnt_eep0
        EXTERN _error_cnt_eep1
        EXTERN _error_cnt_eep2
        EXTERN _fill_A0
        EXTERN _fill_oprzero
        EXTERN _findDeviceAddress
        EXTERN _flag_eep1
        EXTERN _flag_rtc2
        EXTERN _frame_type
        EXTERN _freq
        EXTERN _from_days
        EXTERN _global_i
        EXTERN _info_send
        EXTERN _info_sended
        EXTERN _info_total
        EXTERN _int_into_char_array
        EXTERN _is_valid_date
        EXTERN _isdowvalid
        EXTERN _k
        EXTERN _lcd_back_to_mode0_time
        EXTERN _lcd_ram_init
        EXTERN _lcd_write_msg
        EXTERN _load_ls_cnt
        EXTERN _load_survey_cnt
        EXTERN _load_survey_fill_last_energy
        EXTERN _load_survey_next_interval_timestamp
        EXTERN _load_survey_reset_avg_acc
        EXTERN _long_int
        EXTERN _long_into_char_array4
        EXTERN _ls_miss_fill
        EXTERN _max_info_rec
        EXTERN _max_info_tra
        EXTERN _max_load_survey_cnt
        EXTERN _max_win_rec
        EXTERN _max_win_tra
        EXTERN _md_variable_update
        EXTERN _mem_log1
        EXTERN _memory_log_reset
        EXTERN _memory_log_reset_non_roll
        EXTERN _metrology_save_energy
        EXTERN _mri_bill_flag
        EXTERN _obis_short
        EXTERN _obis_short_cal
        EXTERN _p_fbit
        EXTERN _pf
        EXTERN _phy_id
        EXTERN _power
        EXTERN _power_off_min
        EXTERN _power_on_min
        EXTERN _reset_load_survey
        EXTERN _reset_md
        EXTERN _reset_md_fg
        EXTERN _rrr_c
        EXTERN _rrr_c1
        EXTERN _rrr_s
        EXTERN _rtc_get
        EXTERN _rtc_init_with_system_time
        EXTERN _save_bat_mode_time
        EXTERN _save_bill_data
        EXTERN _save_pom
        EXTERN _save_pwr_dwn_time
        EXTERN _sel_datediff
        EXTERN _send_data_to_uart
        EXTERN _send_type_multi
        EXTERN _seq_no_ls
        EXTERN _seq_no_transaction
        EXTERN _sleep_saving_early_detection
        EXTERN _sss_c
        EXTERN _sss_c1
        EXTERN _sss_s
        EXTERN _strncmp
        EXTERN _tamper_data
        EXTERN _temp_s16
        EXTERN _temp_s32
        EXTERN _temp_us16
        EXTERN _temp_us32
        EXTERN _time_into_char_array6_sec
        EXTERN _to_days
        EXTERN _top_cover_restore
        EXTERN _trn_cnt
        EXTERN _update_k
        EXTERN _vol

        PUBLIC _A
        PUBLIC _AARE_PASS
        PUBLIC _AARQ
        PUBLIC _B
        PUBLIC _BILLTPR_CNT
        PUBLIC _Battery_suspended_feature
        PUBLIC _Battery_time_configured
        PUBLIC _Blank_display_required
        PUBLIC _Blank_display_time
        PUBLIC _COMP1_TPR_EVENT
        PUBLIC _COMP2_TPR_EVENT
        PUBLIC _COMP3_TPR_EVENT
        PUBLIC _CUM_MAX_DEMAND
        PUBLIC _Cur_decimal
        PUBLIC _DEFRAUD_REQ
        PUBLIC _D_KVARH_REQ
        PUBLIC _Demand_decimal
        PUBLIC _Display_type_select
        PUBLIC _Energy_Decimal_differ_in_modes
        PUBLIC _Energy_decimal_auto
        PUBLIC _Energy_decimal_push
        PUBLIC _FUENERGY_REQ
        PUBLIC _Freq_decimal
        PUBLIC _GEL
        PUBLIC _GIL
        PUBLIC _GOE
        PUBLIC _HREnergy_decimal
        PUBLIC _KVAH_SNAP
        PUBLIC _Last_Bill_Zone_Kvah
        PUBLIC _Last_Bill_Zone_Kwh
        PUBLIC _MAX_BILL
        PUBLIC _MDRESET_TYPE_CONFIG
        PUBLIC _Manufacturer
        PUBLIC _No_of_battery_operation_before_suspension
        PUBLIC _OBJ_LIST
        PUBLIC _PF_decimal
        PUBLIC _PHASE_MISS_METERING_ENABLE
        PUBLIC _Parameter_Lock_Time
        PUBLIC _Power_decimal
        PUBLIC _Push_to_auto_time
        PUBLIC _SHIFT_DIGIT
        PUBLIC _Sel_DailyLoadsurvey_buffer
        PUBLIC _Sel_Loadsurvey_buffer
        PUBLIC _Start_Info
        PUBLIC _Start_Info2
        PUBLIC _Start_Info_CONT
        PUBLIC _Start_Info_CONT1
        PUBLIC _TC_open_display_lock
        PUBLIC _TC_status_display_type
        PUBLIC _TOD_energy_config
        PUBLIC _TOP_RESTORE_REQ
        PUBLIC _Tarrif_script
        PUBLIC _Two_wire_metering_enable
        PUBLIC _Uart_BillFill
        PUBLIC _Vol_decimal
        PUBLIC _Week_Name
        PUBLIC __A_P7
        PUBLIC __Constant_0_0
        PUBLIC __Constant_3e8_0
        PUBLIC _access_rights
        PUBLIC _active_calendar
        PUBLIC _active_f
        PUBLIC _app_con
        PUBLIC _array
        PUBLIC _asso_status
        PUBLIC _auth_name
        PUBLIC _bcd_to_hex
        PUBLIC _bill_buffer
        PUBLIC _bill_profile_parameter_cap_obj
        PUBLIC _bill_profile_parameter_scaler_buffer
        PUBLIC _bill_profile_parameter_scaler_cap_obj
        PUBLIC _bit_string
        PUBLIC _blockload_survey_parameter_scaler_buffer
        PUBLIC _blockload_survey_parameter_scaler_cap_obj
        PUBLIC _buffer_instantaneous_parameter
        PUBLIC _calculate_zone_pf
        PUBLIC _calendar_change_f
        PUBLIC _check_active_calendar
        PUBLIC _check_zone_flag
        PUBLIC _class_sel
        PUBLIC _conf_err
        PUBLIC _conf_ser
        PUBLIC _correct_DE_entry_f
        PUBLIC _count_no
        PUBLIC _current_bill_fill
        PUBLIC _current_event_capture_obj
        PUBLIC _current_rating
        PUBLIC _daily_enr_fill
        PUBLIC _dailyload_profile_parameter_cap_obj
        PUBLIC _dailyload_profile_parameter_scaler_buffer
        PUBLIC _dailyload_profile_parameter_scaler_cap_obj
        PUBLIC _data_dec
        PUBLIC _data_dump_dlms
        PUBLIC _date_time
        PUBLIC _day_profile
        PUBLIC _debug_event_capture_obj
        PUBLIC _deter_season
        PUBLIC _deter_week
        PUBLIC _deter_zone
        PUBLIC _dlms_reset_data
        PUBLIC _eeblk
        PUBLIC _eepg
        PUBLIC _enum_d
        PUBLIC _enum_d2
        PUBLIC _event_log_profile_scaler_buffer
        PUBLIC _event_log_profile_scaler_cap_obj
        PUBLIC _fill_0b
        PUBLIC _fill_0d
        PUBLIC _fill_disp
        PUBLIC _fill_ff
        PUBLIC _fill_firmware_version
        PUBLIC _fill_manufacturer_name
        PUBLIC _fill_meter_category
        PUBLIC _fill_pcb_firm_ver_calib_status
        PUBLIC _fill_rtc_calib
        PUBLIC _fill_utility_id
        PUBLIC _fill_yr_of_manufacture
        PUBLIC _genus_sea
        PUBLIC _genus_week
        PUBLIC _hex_to_bcd
        PUBLIC _hex_to_bin
        PUBLIC _info_l
        PUBLIC _info_l5
        PUBLIC _info_l6
        PUBLIC _initialize_dlms_data
        PUBLIC _inst_data_fill
        PUBLIC _instantaneous_parameter_cap_obj
        PUBLIC _instantaneous_parameter_scaler_buffer
        PUBLIC _instantaneous_parameter_scaler_cap_obj
        PUBLIC _integer8
        PUBLIC _isdatevalid
        PUBLIC _last_zkvah1
        PUBLIC _last_zkvah2
        PUBLIC _last_zkvarh1
        PUBLIC _last_zkvarh2
        PUBLIC _last_zkvarh3
        PUBLIC _last_zkvarh4
        PUBLIC _last_zkwh1
        PUBLIC _last_zkwh2
        PUBLIC _lcd_scroll_time
        PUBLIC _load_date
        PUBLIC _load_survey_fill
        PUBLIC _load_survey_parameter_cap_obj
        PUBLIC _load_time
        PUBLIC _load_tod_data
        PUBLIC _log_name2
        PUBLIC _log_name23
        PUBLIC _logical_device_name
        PUBLIC _long_unsign
        PUBLIC _ls_conf_obj
        PUBLIC _ls_count_dlms
        PUBLIC _ls_count_local
        PUBLIC _ls_max_obj
        PUBLIC _max_tariff_no
        PUBLIC _md_reset_disable
        PUBLIC _name_plate_buffer
        PUBLIC _name_plate_profile_capture_obj
        PUBLIC _neutral_metering_enable_f
        PUBLIC _no_of_tod
        PUBLIC _no_of_tod_in_season
        PUBLIC _non_rollover_event_capture_obj
        PUBLIC _obis_fill
        PUBLIC _obiscode
        PUBLIC _object_list
        PUBLIC _octet_s
        PUBLIC _other_event_capture_obj
        PUBLIC _power_event_capture_obj
        PUBLIC _profile_sel
        PUBLIC _read_config_parameters
        PUBLIC _read_last_bill_zone_energy
        PUBLIC _sap_assg_list
        PUBLIC _save_tod_data
        PUBLIC _save_tod_flag
        PUBLIC _sca_unit
        PUBLIC _send_data
        PUBLIC _signed_integer
        PUBLIC _slot_no
        PUBLIC _sort_object
        PUBLIC _sort_object1
        PUBLIC _sr_no_ascii
        PUBLIC _structure
        PUBLIC _sub_element_filled
        PUBLIC _t_zkvah1
        PUBLIC _t_zkvah2
        PUBLIC _t_zkwh1
        PUBLIC _t_zkwh2
        PUBLIC _t_zone_update
        PUBLIC _tamper_compart
        PUBLIC _tariff_index
        PUBLIC _tou_a8pssv_tariff
        PUBLIC _tou_a8pssv_zone_time
        PUBLIC _tou_a8traiff
        PUBLIC _tou_a8zone_time
        PUBLIC _tou_pssv_store
        PUBLIC _tou_u8pssv_buffer_traced
        PUBLIC _tou_u8pssv_day
        PUBLIC _tou_u8pssv_dayid
        PUBLIC _tou_u8pssv_no_days
        PUBLIC _tou_u8pssv_no_zone
        PUBLIC _tou_u8pssv_ptr
        PUBLIC _tou_u8pssv_up_zone
        PUBLIC _tpr_fill
        PUBLIC _transaction_event_capture_obj
        PUBLIC _unsigned8
        PUBLIC _vBlock_transfer_list
        PUBLIC _val_1byt
        PUBLIC _val_2byt
        PUBLIC _val_2byt2
        PUBLIC _val_4byt
        PUBLIC _val_4byt2
        PUBLIC _val_signed_4byt
        PUBLIC _val_signed_4byt2
        PUBLIC _voltage_event_capture_obj
        PUBLIC _write_tod_data
        PUBLIC _xdlms_type
        PUBLIC _zone_change_f
        PUBLIC _zone_default
        PUBLIC _zone_energy_update
        PUBLIC _zone_index
        PUBLIC _zone_pf
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP NEARDATA
          CFI Resource A:8, X:8, B:8, C:8, D:8, E:8, H:8, L:8, CS_REG:4, ES_REG:4
          CFI VirtualResource ?RET:20
          CFI Resource MACRH:16, MACRL:16, W0:8, W1:8, W2:8, W3:8, W4:8, W5:8
          CFI Resource W6:8, W7:8, W8:8, W9:8, W10:8, W11:8, W12:8, W13:8, W14:8
          CFI Resource W15:8, W16:8, W17:8, W18:8, W19:8, W20:8, W21:8, W22:8
          CFI Resource W23:8, W24:8, W25:8, W26:8, W27:8, W28:8, W29:8, W30:8
          CFI Resource W31:8, W32:8, W33:8, W34:8, W35:8, W36:8, W37:8, W38:8
          CFI Resource W39:8, W40:8, W41:8, W42:8, W43:8, W44:8, W45:8, W46:8
          CFI Resource W47:8, W48:8, W49:8, W50:8, W51:8, W52:8, W53:8, W54:8
          CFI Resource W55:8, W56:8, W57:8, W58:8, W59:8, W60:8, W61:8, W62:8
          CFI Resource W63:8, W64:8, W65:8, W66:8, W67:8, W68:8, W69:8, W70:8
          CFI Resource W71:8, W72:8, W73:8, W74:8, W75:8, W76:8, W77:8, W78:8
          CFI Resource W79:8, W80:8, W81:8, W82:8, W83:8, W84:8, W85:8, W86:8
          CFI Resource W87:8, W88:8, W89:8, W90:8, W91:8, W92:8, W93:8, W94:8
          CFI Resource W95:8, W96:8, W97:8, W98:8, W99:8, W100:8, W101:8, W102:8
          CFI Resource W103:8, W104:8, W105:8, W106:8, W107:8, W108:8, W109:8
          CFI Resource W110:8, W111:8, W112:8, W113:8, W114:8, W115:8, W116:8
          CFI Resource W117:8, W118:8, W119:8, W120:8, W121:8, W122:8, W123:8
          CFI Resource W124:8, W125:8, W126:8, W127:8, SP:16, ?SPH:4
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?RET CODE
          CFI CFA SP+4
          CFI A Undefined
          CFI X Undefined
          CFI B SameValue
          CFI C SameValue
          CFI D SameValue
          CFI E SameValue
          CFI H Undefined
          CFI L Undefined
          CFI CS_REG Undefined
          CFI ES_REG Undefined
          CFI ?RET Frame(CFA, -4)
          CFI MACRH Undefined
          CFI MACRL Undefined
          CFI W0 SameValue
          CFI W1 SameValue
          CFI W2 SameValue
          CFI W3 SameValue
          CFI W4 SameValue
          CFI W5 SameValue
          CFI W6 SameValue
          CFI W7 SameValue
          CFI W8 SameValue
          CFI W9 SameValue
          CFI W10 SameValue
          CFI W11 SameValue
          CFI W12 SameValue
          CFI W13 SameValue
          CFI W14 SameValue
          CFI W15 SameValue
          CFI W16 SameValue
          CFI W17 SameValue
          CFI W18 SameValue
          CFI W19 SameValue
          CFI W20 SameValue
          CFI W21 SameValue
          CFI W22 SameValue
          CFI W23 SameValue
          CFI W24 SameValue
          CFI W25 SameValue
          CFI W26 SameValue
          CFI W27 SameValue
          CFI W28 SameValue
          CFI W29 SameValue
          CFI W30 SameValue
          CFI W31 SameValue
          CFI W32 SameValue
          CFI W33 SameValue
          CFI W34 SameValue
          CFI W35 SameValue
          CFI W36 SameValue
          CFI W37 SameValue
          CFI W38 SameValue
          CFI W39 SameValue
          CFI W40 SameValue
          CFI W41 SameValue
          CFI W42 SameValue
          CFI W43 SameValue
          CFI W44 SameValue
          CFI W45 SameValue
          CFI W46 SameValue
          CFI W47 SameValue
          CFI W48 SameValue
          CFI W49 SameValue
          CFI W50 SameValue
          CFI W51 SameValue
          CFI W52 SameValue
          CFI W53 SameValue
          CFI W54 SameValue
          CFI W55 SameValue
          CFI W56 SameValue
          CFI W57 SameValue
          CFI W58 SameValue
          CFI W59 SameValue
          CFI W60 SameValue
          CFI W61 SameValue
          CFI W62 SameValue
          CFI W63 SameValue
          CFI W64 SameValue
          CFI W65 SameValue
          CFI W66 SameValue
          CFI W67 SameValue
          CFI W68 SameValue
          CFI W69 SameValue
          CFI W70 SameValue
          CFI W71 SameValue
          CFI W72 SameValue
          CFI W73 SameValue
          CFI W74 SameValue
          CFI W75 SameValue
          CFI W76 SameValue
          CFI W77 SameValue
          CFI W78 SameValue
          CFI W79 SameValue
          CFI W80 SameValue
          CFI W81 SameValue
          CFI W82 SameValue
          CFI W83 SameValue
          CFI W84 SameValue
          CFI W85 SameValue
          CFI W86 SameValue
          CFI W87 SameValue
          CFI W88 SameValue
          CFI W89 SameValue
          CFI W90 SameValue
          CFI W91 SameValue
          CFI W92 SameValue
          CFI W93 SameValue
          CFI W94 SameValue
          CFI W95 SameValue
          CFI W96 SameValue
          CFI W97 SameValue
          CFI W98 SameValue
          CFI W99 SameValue
          CFI W100 SameValue
          CFI W101 SameValue
          CFI W102 SameValue
          CFI W103 SameValue
          CFI W104 SameValue
          CFI W105 SameValue
          CFI W106 SameValue
          CFI W107 SameValue
          CFI W108 SameValue
          CFI W109 SameValue
          CFI W110 SameValue
          CFI W111 SameValue
          CFI W112 SameValue
          CFI W113 SameValue
          CFI W114 SameValue
          CFI W115 SameValue
          CFI W116 SameValue
          CFI W117 SameValue
          CFI W118 SameValue
          CFI W119 SameValue
          CFI W120 SameValue
          CFI W121 SameValue
          CFI W122 SameValue
          CFI W123 SameValue
          CFI W124 SameValue
          CFI W125 SameValue
          CFI W126 SameValue
          CFI W127 SameValue
          CFI ?SPH Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?RET CODE
          CFI CFA SP+4
          CFI A Undefined
          CFI X Undefined
          CFI B Undefined
          CFI C Undefined
          CFI D Undefined
          CFI E Undefined
          CFI H Undefined
          CFI L Undefined
          CFI CS_REG Undefined
          CFI ES_REG Undefined
          CFI ?RET Frame(CFA, -4)
          CFI MACRH Undefined
          CFI MACRL Undefined
          CFI W0 SameValue
          CFI W1 SameValue
          CFI W2 SameValue
          CFI W3 SameValue
          CFI W4 SameValue
          CFI W5 SameValue
          CFI W6 SameValue
          CFI W7 SameValue
          CFI W8 SameValue
          CFI W9 SameValue
          CFI W10 SameValue
          CFI W11 SameValue
          CFI W12 SameValue
          CFI W13 SameValue
          CFI W14 SameValue
          CFI W15 SameValue
          CFI W16 SameValue
          CFI W17 SameValue
          CFI W18 SameValue
          CFI W19 SameValue
          CFI W20 SameValue
          CFI W21 SameValue
          CFI W22 SameValue
          CFI W23 SameValue
          CFI W24 SameValue
          CFI W25 SameValue
          CFI W26 SameValue
          CFI W27 SameValue
          CFI W28 SameValue
          CFI W29 SameValue
          CFI W30 SameValue
          CFI W31 SameValue
          CFI W32 SameValue
          CFI W33 SameValue
          CFI W34 SameValue
          CFI W35 SameValue
          CFI W36 SameValue
          CFI W37 SameValue
          CFI W38 SameValue
          CFI W39 SameValue
          CFI W40 SameValue
          CFI W41 SameValue
          CFI W42 SameValue
          CFI W43 SameValue
          CFI W44 SameValue
          CFI W45 SameValue
          CFI W46 SameValue
          CFI W47 SameValue
          CFI W48 SameValue
          CFI W49 SameValue
          CFI W50 SameValue
          CFI W51 SameValue
          CFI W52 SameValue
          CFI W53 SameValue
          CFI W54 SameValue
          CFI W55 SameValue
          CFI W56 SameValue
          CFI W57 SameValue
          CFI W58 SameValue
          CFI W59 SameValue
          CFI W60 SameValue
          CFI W61 SameValue
          CFI W62 SameValue
          CFI W63 SameValue
          CFI W64 SameValue
          CFI W65 SameValue
          CFI W66 SameValue
          CFI W67 SameValue
          CFI W68 SameValue
          CFI W69 SameValue
          CFI W70 SameValue
          CFI W71 SameValue
          CFI W72 SameValue
          CFI W73 SameValue
          CFI W74 SameValue
          CFI W75 SameValue
          CFI W76 SameValue
          CFI W77 SameValue
          CFI W78 SameValue
          CFI W79 SameValue
          CFI W80 SameValue
          CFI W81 SameValue
          CFI W82 SameValue
          CFI W83 SameValue
          CFI W84 SameValue
          CFI W85 SameValue
          CFI W86 SameValue
          CFI W87 SameValue
          CFI W88 SameValue
          CFI W89 SameValue
          CFI W90 SameValue
          CFI W91 SameValue
          CFI W92 SameValue
          CFI W93 SameValue
          CFI W94 SameValue
          CFI W95 SameValue
          CFI W96 SameValue
          CFI W97 SameValue
          CFI W98 SameValue
          CFI W99 SameValue
          CFI W100 SameValue
          CFI W101 SameValue
          CFI W102 SameValue
          CFI W103 SameValue
          CFI W104 SameValue
          CFI W105 SameValue
          CFI W106 SameValue
          CFI W107 SameValue
          CFI W108 SameValue
          CFI W109 SameValue
          CFI W110 SameValue
          CFI W111 SameValue
          CFI W112 SameValue
          CFI W113 SameValue
          CFI W114 SameValue
          CFI W115 SameValue
          CFI W116 SameValue
          CFI W117 SameValue
          CFI W118 SameValue
          CFI W119 SameValue
          CFI W120 SameValue
          CFI W121 SameValue
          CFI W122 SameValue
          CFI W123 SameValue
          CFI W124 SameValue
          CFI W125 SameValue
          CFI W126 SameValue
          CFI W127 SameValue
          CFI ?SPH Undefined
          CFI EndCommon cfiCommon1
        
        
          CFI Common cfiCommon2 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?RET CODE
          CFI CFA SP+4
          CFI A Undefined
          CFI X Undefined
          CFI B Undefined
          CFI C Undefined
          CFI D SameValue
          CFI E SameValue
          CFI H Undefined
          CFI L Undefined
          CFI CS_REG Undefined
          CFI ES_REG Undefined
          CFI ?RET Frame(CFA, -4)
          CFI MACRH Undefined
          CFI MACRL Undefined
          CFI W0 SameValue
          CFI W1 SameValue
          CFI W2 SameValue
          CFI W3 SameValue
          CFI W4 SameValue
          CFI W5 SameValue
          CFI W6 SameValue
          CFI W7 SameValue
          CFI W8 SameValue
          CFI W9 SameValue
          CFI W10 SameValue
          CFI W11 SameValue
          CFI W12 SameValue
          CFI W13 SameValue
          CFI W14 SameValue
          CFI W15 SameValue
          CFI W16 SameValue
          CFI W17 SameValue
          CFI W18 SameValue
          CFI W19 SameValue
          CFI W20 SameValue
          CFI W21 SameValue
          CFI W22 SameValue
          CFI W23 SameValue
          CFI W24 SameValue
          CFI W25 SameValue
          CFI W26 SameValue
          CFI W27 SameValue
          CFI W28 SameValue
          CFI W29 SameValue
          CFI W30 SameValue
          CFI W31 SameValue
          CFI W32 SameValue
          CFI W33 SameValue
          CFI W34 SameValue
          CFI W35 SameValue
          CFI W36 SameValue
          CFI W37 SameValue
          CFI W38 SameValue
          CFI W39 SameValue
          CFI W40 SameValue
          CFI W41 SameValue
          CFI W42 SameValue
          CFI W43 SameValue
          CFI W44 SameValue
          CFI W45 SameValue
          CFI W46 SameValue
          CFI W47 SameValue
          CFI W48 SameValue
          CFI W49 SameValue
          CFI W50 SameValue
          CFI W51 SameValue
          CFI W52 SameValue
          CFI W53 SameValue
          CFI W54 SameValue
          CFI W55 SameValue
          CFI W56 SameValue
          CFI W57 SameValue
          CFI W58 SameValue
          CFI W59 SameValue
          CFI W60 SameValue
          CFI W61 SameValue
          CFI W62 SameValue
          CFI W63 SameValue
          CFI W64 SameValue
          CFI W65 SameValue
          CFI W66 SameValue
          CFI W67 SameValue
          CFI W68 SameValue
          CFI W69 SameValue
          CFI W70 SameValue
          CFI W71 SameValue
          CFI W72 SameValue
          CFI W73 SameValue
          CFI W74 SameValue
          CFI W75 SameValue
          CFI W76 SameValue
          CFI W77 SameValue
          CFI W78 SameValue
          CFI W79 SameValue
          CFI W80 SameValue
          CFI W81 SameValue
          CFI W82 SameValue
          CFI W83 SameValue
          CFI W84 SameValue
          CFI W85 SameValue
          CFI W86 SameValue
          CFI W87 SameValue
          CFI W88 SameValue
          CFI W89 SameValue
          CFI W90 SameValue
          CFI W91 SameValue
          CFI W92 SameValue
          CFI W93 SameValue
          CFI W94 SameValue
          CFI W95 SameValue
          CFI W96 SameValue
          CFI W97 SameValue
          CFI W98 SameValue
          CFI W99 SameValue
          CFI W100 SameValue
          CFI W101 SameValue
          CFI W102 SameValue
          CFI W103 SameValue
          CFI W104 SameValue
          CFI W105 SameValue
          CFI W106 SameValue
          CFI W107 SameValue
          CFI W108 SameValue
          CFI W109 SameValue
          CFI W110 SameValue
          CFI W111 SameValue
          CFI W112 SameValue
          CFI W113 SameValue
          CFI W114 SameValue
          CFI W115 SameValue
          CFI W116 SameValue
          CFI W117 SameValue
          CFI W118 SameValue
          CFI W119 SameValue
          CFI W120 SameValue
          CFI W121 SameValue
          CFI W122 SameValue
          CFI W123 SameValue
          CFI W124 SameValue
          CFI W125 SameValue
          CFI W126 SameValue
          CFI W127 SameValue
          CFI ?SPH Undefined
          CFI EndCommon cfiCommon2
        
// D:\Dheeraj\New folder\0. GDEV72 - BootCode\source_code\source_files\cosem.c
//    1 /***********************************************************************************************************************
//    2 * File Name       : cosem.h
//    3 * Current Version : rev_01  
//    4 * Tool-Chain      : IAR Systems RL78
//    5 * Description     : this file has the routines to implement COSEM layer of DLMS
//    6 * Creation Date   : 06-06-2020
//    7 * Company         : Genus Power Infrastructures Limited, Jaipur
//    8 * Author          : dheeraj.singhal
//    9 * Version History : rev_01 :
//   10 ***********************************************************************************************************************/
//   11 /************************************ Includes **************************************/
//   12 #include "cosem.h"

        ASEGN `.sbss.noinit`:DATA:NOROOT,0fff07H
        SECTION_TYPE SHT_IAR_NOINIT, SHF_WRITE
        SECTION_GROUP __A_P7
// __no_init union <unnamed>#10 volatile __saddr _A_P7
__A_P7:
        DS 1
//   13 
//   14 /************************************ Variables *****************************************/

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   15 uint8_t tou_u8pssv_dayid;
_tou_u8pssv_dayid:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   16 uint8_t tou_u8pssv_no_zone;
_tou_u8pssv_no_zone:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   17 uint8_t tou_u8pssv_no_days;
_tou_u8pssv_no_days:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   18 uint8_t tou_u8pssv_buffer_traced;
_tou_u8pssv_buffer_traced:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   19 uint8_t tou_u8pssv_ptr;
_tou_u8pssv_ptr:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   20 uint8_t tou_u8pssv_day;
_tou_u8pssv_day:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   21 uint8_t tou_u8pssv_up_zone;
_tou_u8pssv_up_zone:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
//   22 uint8_t tou_a8pssv_zone_time[16];
_tou_a8pssv_zone_time:
        DS 16

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
//   23 uint8_t tou_a8pssv_tariff[8];
_tou_a8pssv_tariff:
        DS 8

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
//   24 uint8_t tou_a8zone_time[16];
_tou_a8zone_time:
        DS 16

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
//   25 uint8_t tou_a8traiff[9];
_tou_a8traiff:
        DS 10

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   26 uint8_t active_f;
_active_f:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
//   27 uint8_t Week_Name[8];
_Week_Name:
        DS 8

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   28 uint8_t no_of_tod_in_season,slot_no;
_no_of_tod_in_season:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
_slot_no:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   29 us8 active_calendar,calendar_change_f,zone_change_f,check_zone_flag;
_active_calendar:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
_calendar_change_f:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
_zone_change_f:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
_check_zone_flag:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   30 uint8_t no_of_tod,zone_index,save_tod_flag,max_tariff_no,tariff_index,eeblk,eepg;
_no_of_tod:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
_zone_index:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
_save_tod_flag:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
_max_tariff_no:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
_tariff_index:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
_eeblk:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
_eepg:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
//   31 uint32_t last_zkwh1,last_zkwh2;
_last_zkwh1:
        DS 4

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
_last_zkwh2:
        DS 4

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
//   32 uint32_t last_zkvarh1,last_zkvarh2,last_zkvarh3,last_zkvarh4;
_last_zkvarh1:
        DS 4

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
_last_zkvarh2:
        DS 4

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
_last_zkvarh3:
        DS 4

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
_last_zkvarh4:
        DS 4

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
//   33 uint32_t last_zkvah1,last_zkvah2;
_last_zkvah1:
        DS 4

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
_last_zkvah2:
        DS 4

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
//   34 uint32_t  t_zkwh1[8],t_zkwh2[8],t_zkvah1[8],t_zkvah2[8];
_t_zkwh1:
        DS 32

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
_t_zkwh2:
        DS 32

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
_t_zkvah1:
        DS 32

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
_t_zkvah2:
        DS 32

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   35 uint8_t sub_element_filled;
_sub_element_filled:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
//   36 uint16_t ls_count_local,ls_count_dlms;
_ls_count_local:
        DS 2

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
_ls_count_dlms:
        DS 2

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   37 uint8_t ls_max_obj;
_ls_max_obj:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
//   38 uint8_t ls_conf_obj[15];
_ls_conf_obj:
        DS 16

        SECTION `.data`:DATA:REORDER:NOROOT(1)
?_0:
        DATA16
        DW 490, 408, 235

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//   39 uint8_t count_no[16]= {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
_count_no:
        DATA8
        DB 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
//   40 uint16_t Push_to_auto_time;
_Push_to_auto_time:
        DS 2

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
//   41 uint16_t Parameter_Lock_Time;
_Parameter_Lock_Time:
        DS 2

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   42 uint8_t Battery_suspended_feature;
_Battery_suspended_feature:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   43 uint8_t No_of_battery_operation_before_suspension;
_No_of_battery_operation_before_suspension:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   44 uint8_t Battery_time_configured;
_Battery_time_configured:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   45 uint8_t Vol_decimal;
_Vol_decimal:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   46 uint8_t Cur_decimal;
_Cur_decimal:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   47 uint8_t Power_decimal;
_Power_decimal:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   48 uint8_t PF_decimal;
_PF_decimal:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   49 uint8_t Freq_decimal;
_Freq_decimal:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   50 uint8_t Demand_decimal;
_Demand_decimal:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   51 uint8_t HREnergy_decimal;
_HREnergy_decimal:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   52 uint8_t Energy_decimal_auto;
_Energy_decimal_auto:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   53 uint8_t Energy_decimal_push;
_Energy_decimal_push:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   54 uint8_t TC_open_display_lock;
_TC_open_display_lock:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   55 uint8_t TC_status_display_type;
_TC_status_display_type:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   56 uint8_t MAX_BILL;
_MAX_BILL:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   57 uint8_t COMP1_TPR_EVENT;
_COMP1_TPR_EVENT:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   58 uint8_t COMP2_TPR_EVENT;
_COMP2_TPR_EVENT:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   59 uint8_t COMP3_TPR_EVENT;
_COMP3_TPR_EVENT:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   60 uint8_t Blank_display_required;
_Blank_display_required:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
//   61 uint16_t Blank_display_time;
_Blank_display_time:
        DS 2

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   62 uint8_t TOD_energy_config;
_TOD_energy_config:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   63 uint8_t Energy_Decimal_differ_in_modes;
_Energy_Decimal_differ_in_modes:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   64 uint8_t Manufacturer, Display_type_select;
_Manufacturer:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
_Display_type_select:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   65 uint8_t md_reset_disable,lcd_scroll_time;
_md_reset_disable:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
_lcd_scroll_time:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   66 uint8_t KVAH_SNAP, FUENERGY_REQ, BILLTPR_CNT, MDRESET_TYPE_CONFIG, D_KVARH_REQ, DEFRAUD_REQ, SHIFT_DIGIT;
_KVAH_SNAP:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
_FUENERGY_REQ:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
_BILLTPR_CNT:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
_MDRESET_TYPE_CONFIG:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
_D_KVARH_REQ:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
_DEFRAUD_REQ:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
_SHIFT_DIGIT:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   67 uint8_t TOP_RESTORE_REQ, CUM_MAX_DEMAND,neutral_metering_enable_f,PHASE_MISS_METERING_ENABLE,Two_wire_metering_enable;
_TOP_RESTORE_REQ:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
_CUM_MAX_DEMAND:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
_neutral_metering_enable_f:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
_PHASE_MISS_METERING_ENABLE:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
_Two_wire_metering_enable:
        DS 1

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
//   68 uint32_t Last_Bill_Zone_Kwh,Last_Bill_Zone_Kvah;
_Last_Bill_Zone_Kwh:
        DS 4

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
_Last_Bill_Zone_Kvah:
        DS 4

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
//   69 uint16_t zone_pf;
_zone_pf:
        DS 2

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   70 uint8_t correct_DE_entry_f;
_correct_DE_entry_f:
        DS 1
//   71 /************************************ Functions *****************************************/
//   72 void info_l();
//   73 void info_l6();
//   74 void info_l5();
//   75 void fill_0b();
//   76 void fill_0d();
//   77 void array(us8 len, us8 flag);
//   78 void structure(us8 len);
//   79 void octet_s(us8 len, us8 flag);
//   80 void obiscode(us8 a, us8 b, us8 c, us8 d, us8 e, us8 f);
//   81 void long_unsign(void);
//   82 void val_4byt(us8 a, us8 b, us8 c, us8 d);
//   83 void val_4byt2(us8 a, us8 b, us8 c, us8 d);
//   84 void val_signed_4byt(us8 a,us8 b,us8 c,us8 d);
//   85 void val_signed_4byt2(us8 a,us8 b,us8 c,us8 d);
//   86 void unsigned8(us8 value);
//   87 void val_1byt(us8 value, us8 flag);
//   88 void val_2byt(us8 a, us8 b);
//   89 void val_2byt2(us8 a, us8 b);
//   90 void bit_string(us8 len, us8 flag);
//   91 void enum_d(us8 len);
//   92 void enum_d2(us8 len);
//   93 void signed_integer(uint16_t su16_int);
//   94 void integer8(s8 value);
//   95 void sca_unit(s8 a, us8 b, us8 add_zero);
//   96 void sort_object();
//   97 void sort_object1();
//   98 void genus_week(void);
//   99 void conf_ser(unsigned char len);
//  100 void conf_err(unsigned char len);
//  101 void genus_sea(void);
//  102 void load_date(us8 dd, us8 mm, us8 yy, us8 dofw);
//  103 void load_time(us8 hh, us8 min, us8 sec);
//  104 void date_time(us8 dd, us8 mm, us8 yy, us8 hh, us8 min, us8 sec, us8 flg);
//  105 void log_name2(us8 a, us8 b, us8 c, us8 d, us8 e);
//  106 void log_name23(us8 temp);
//  107 void initialize_dlms_data(void);
//  108 void Start_Info();
//  109 void Start_Info2(void);
//  110 void current_rating(void);
//  111 void name_plate_buffer(void);
//  112 void fill_rtc_calib(void);
//  113 void logical_device_name(uint8_t decision_f);
//  114 void fill_manufacturer_name(void);
//  115 void fill_utility_id(void);
//  116 void fill_meter_category(void);
//  117 void fill_pcb_firm_ver_calib_status(void);
//  118 void fill_yr_of_manufacture(void);
//  119 void sr_no_ascii(void);
//  120 void send_data(uint8_t u8temp);
//  121 void Tarrif_script(void);
//  122 void buffer_instantaneous_parameter(void);
//  123 void md_date_fill(uint16_t address);
//  124 void fill_firmware_version(void);
//  125 void class_sel(uint16_t ic, unsigned char ver, unsigned char obis_a, unsigned char obis_b, unsigned char obis_c, unsigned char obis_d, unsigned char obis_e, unsigned char obis_f);
//  126 void access_rights(uint16_t cnt_att, unsigned char att1, unsigned char att2, unsigned char att3, unsigned char att4, unsigned char att5, unsigned char att6, unsigned char att7, unsigned char att8, unsigned char att9, unsigned char att10, unsigned char att11, unsigned char sec_ass, unsigned char method, unsigned char m1, unsigned char m2, unsigned char m3, unsigned char m4);
//  127 us8 data_dec();
//  128 void vBlock_transfer_list(void);
//  129 void object_list(void);
//  130 void asso_status(void);
//  131 void auth_name(void);
//  132 void xdlms_type(void);
//  133 void app_con(void);
//  134 void sap_assg_list();
//  135 void profile_sel(uint16_t ic, unsigned char att, unsigned char obis_a, unsigned char obis_b, unsigned char obis_c, unsigned char obis_d, unsigned char obis_e, unsigned char obis_f);
//  136 void inst_data_fill(void);
//  137 void tamper_compart(uint8_t event, uint16_t init_add, uint16_t max_add, uint8_t jump_add, uint8_t roll_f);
//  138 void tpr_fill(uint16_t comptt_address);
//  139 void data_dump_dlms(us8 eep_no, us8 eep_block, us8 no_of_block);
//  140 void dlms_reset_data();
//  141 us16 isdatevalid(us16 , us16 , us16);
//  142 unsigned char bcd_to_hex(unsigned char );
//  143 unsigned char hex_to_bcd(unsigned char );
//  144 uint8_t tou_pssv_store(void);
//  145 void write_tod_data(uint8_t);
//  146 void fill_ff(unsigned char);
//  147 void check_active_calendar(void);
//  148 void deter_season(void);
//  149 void deter_week(void);
//  150 void deter_zone(void);
//  151 void zone_default(void);
//  152 void t_zone_update(void);
//  153 uint32_t zone_energy_update(uint32_t, uint32_t ,uint64_t);
//  154 void save_tod_data(void);
//  155 void load_tod_data(void);
//  156 void day_profile(uint8_t);
//  157 void bill_buffer(void);
//  158 void current_bill_fill(uint32_t bill_loop);
//  159 void Uart_BillFill(unsigned char bill_cnt, uint32_t bill_loop);
//  160 void Sel_DailyLoadsurvey_buffer(void);
//  161 void daily_enr_fill(uint16_t comptt_address);
//  162 void Sel_Loadsurvey_buffer(void);
//  163 void load_survey_fill(void);
//  164 void fill_disp(uint16_t addrr, uint8_t num, uint8_t auto_push);
//  165 unsigned char hex_to_bin(unsigned char hex_val);
//  166 void read_config_parameters(void);
//  167 void calculate_zone_pf(void);
//  168 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  169 unsigned char GOE[]= {31, 'G', 'E', 'N', 'U', 'S', ' ', 'P', 'O', 'W', 'E', 'R', ' ', 'I', 'N', 'F', 'R', 'A', 'S', 'T', 'R', 'U', 'C', 'T', 'U', 'R', 'E', 'S', ' ', 'L', 'T', 'D'};
_GOE:
        DATA8
        DB 31, 71, 69, 78, 85, 83, 32, 80, 79, 87, 69, 82, 32, 73, 78, 70, 82
        DB 65, 83, 84, 82, 85, 67, 84, 85, 82, 69, 83, 32, 76, 84, 68

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  170 unsigned char GIL[]= {20, 'G', 'E', 'N', 'U', 'S', ' ', 'I', 'N', 'N', 'O', 'V', 'A', 'T', 'I', 'O', 'N', ' ', 'L', 'T', 'D'};
_GIL:
        DATA8
        DB 20, 71, 69, 78, 85, 83, 32, 73, 78, 78, 79, 86, 65, 84, 73, 79, 78
        DB 32, 76, 84, 68, 0

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  171 unsigned char GEL[]= {21, 'G', 'E', 'N', 'U', 'S', ' ', 'E', 'L', 'E', 'C', 'T', 'R', 'O', 'T', 'E', 'C', 'H', ' ', 'L', 'T', 'D'};
_GEL:
        DATA8
        DB 21, 71, 69, 78, 85, 83, 32, 69, 76, 69, 67, 84, 82, 79, 84, 69, 67
        DB 72, 32, 76, 84, 68
//  172 /******************************* Const Variables *****************************************/

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  173 const us8 Start_Info_CONT[]= 
_Start_Info_CONT:
        DATA8
        DB 230, 231, 0, 196, 1, 129, 0, 1
//  174 {
//  175   0xE6, /* 0 */
//  176   0xE7, /* 1 */
//  177   0x00, /* 2 */
//  178   0xC4, /* GET.RESP */
//  179   0x01, /* normal */
//  180   0x81, /* INVOKE_ID,PRIORITY */
//  181   0x00, /* data_result */
//  182   0x01, /* array */
//  183 };
//  184 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  185 const us8 Start_Info_CONT1[]= 
_Start_Info_CONT1:
        DATA8
        DB 230, 231, 0, 196, 2, 129, 0, 0, 0, 0, 0, 0, 130, 0
//  186 {
//  187   0xE6, /* 0 */
//  188   0xE7, /* 1 */
//  189   0x00, /* 2 */
//  190   0xC4, /* GET.RESP */
//  191   0x02, /* get response with datablock */
//  192   0x81, /* invoke-id priority */
//  193   0x00, /* if not the last block */
//  194   0x00, /* data block no. */
//  195   0x00, /* data block no. */
//  196   0x00, /* data block no. */
//  197   0x00, /* data block no. */
//  198   0x00, /* raw data */
//  199   0x82  /* length Consider next 2 byte */
//  200     /* Data Block length 1 */
//  201 };
//  202 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  203 const us8 AARQ[]= 
_AARQ:
        DATA8
        DB 25, 97, 0, 161, 9, 6, 7, 96, 133, 116, 5, 8, 1, 1, 162, 3, 2, 1, 0
        DB 163, 5, 0, 3, 2, 1, 0
//  204 {
//  205   25,
//  206   0x61,
//  207   0x00,
//  208   /* application_context_name */
//  209   0xA1,
//  210   0x09,
//  211   0x06,
//  212   0x07,
//  213   0x60,
//  214   0x85, /* country */
//  215   0x74, /* country name */
//  216   0x05, /* Organisation */
//  217   0x08, /* DLMS_UA */
//  218   0x01, /* app_context */
//  219   0x01, /* LN reference */
//  220   /* application_context_name */
//  221   
//  222   /* result */
//  223   0xA2, /* tag of result component */
//  224   0x03, /* length of taged component */
//  225   0x02, /* choice for result */
//  226   0x01, /* length of result* / */
//  227   0x00, /* result */
//  228   
//  229   /* result_source_diagnostic */
//  230   0xA3, /* tag for result diagnostic */
//  231   0x05, /* length of taged component */
//  232   0x00, /* tag for acse_service_user/provider(0xA1/0xA2) */
//  233   0x03, /* length */
//  234   0x02, /* choice of result_source_diagnostic */
//  235   0x01, /* length of value* / */
//  236   0x00, /* value of diagnosis */
//  237   /* result_source_diagnostic */
//  238 };
//  239 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  240 const us8 AARE_PASS[]= 
_AARE_PASS:
        DATA8
        DB 18, 14, 136, 2, 7, 128, 137, 7, 96, 133, 116, 5, 8, 2, 2, 170, 18
        DB 128, 16, 0
//  241 {
//  242   18,
//  243   0x0E,
//  244   0x88, /* encoding of the tag of the acse-requirements field ([8], IMPLICIT, Context-specific) */
//  245   0x02, /* encoding of the length of the tagged component�s value field. */
//  246   0x07, /* encoding of the number of unused bits in the last byte of the BIT STRING */
//  247   0x80, /* encoding of the authentication functional unit (0) */
//  248   0x89, /* encoding of the tag ([9], IMPLICIT, Context-specific) */
//  249   0x07, /* encoding of the length of the tagged component�s value field */
//  250   0x60, /* encoding the value of the object identifier:- high-level-security-mechanism-name (5) */
//  251   0x85,
//  252   0x74,
//  253   0x05,
//  254   0x08,
//  255   0x02,
//  256   0x02,
//  257   0xAA, /* encoding of the tag ([10], Context-specific) */
//  258   0x12, /* encoding of the length of the tagged component�s value field */
//  259   0x80, /* encoding of the choice for Authentication-value (charstring [0] IMPLICIT GraphicString) */
//  260   0x10, /* encoding of the length of the Authentication-information�s value field (8 octets) */
//  261 };
//  262 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  263 const us8 A[]= 
_A:
        DATA8
        DB 16, 4, 14, 8, 0, 6, 95, 31, 4, 0, 2, 0, 0, 7
//  264 {
//  265   0x10, /* length of tag */
//  266   0x04, /* choice of user information */
//  267   0x0E, /* lengh of octet string */
//  268   0x08, /* tag */
//  269   0x00, /* Quality of service(optional not present) */
//  270   0x06, /* DLMS version number */
//  271   0x5F, /* ASN.1 tag[0] */
//  272   0x1F, /* ASN.1 tag[1] */
//  273   0x04, /* length of ASN.1 */
//  274   0x00, /* number of unused bits */
//  275   0x02, /* 0x01;//max_receive_pdu_size[0]23/02/2007 */
//  276   0x00, /* 0xFF;//max_receive_pdu_size[1]23/02/2007 */
//  277   0x00, /* VAA-name-component[0] */
//  278   0x07};

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  279 const us8 obis_fill[]= 
_obis_fill:
        DATA8
        DB 9, 6, 0, 0, 10, 0, 100, 255
//  280 {
//  281   0x09, 0x06,
//  282   0x00, //val-A
//  283   0x00, //val-B
//  284   0x0A, //val-C
//  285   0x00, //val-D
//  286   0x64, //val-E
//  287   0xFF  //val-F
//  288 };

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  289 const us8 B[]= 
_B:
        DATA8
        DB 129, 128, 20, 5, 2, 0, 0, 6, 2, 0, 0, 7, 4, 0, 0, 0, 0, 8, 4, 0, 0
        DB 0, 0, 0
//  290 {
//  291   0x81,
//  292   0x80,
//  293   0x14, /* next no. of bytes */
//  294   0x05, /* max tx info size */
//  295   0x02, /* no. of byte used */
//  296   0x00,
//  297   0x00,
//  298   0x06, /* max rx info size */
//  299   0x02, /* no. of byte used */
//  300   0x00,
//  301   0x00,
//  302   0x07, /* max win size tx */
//  303   0x04, /* no. of byte used */
//  304   0x00,
//  305   0x00,
//  306   0x00,
//  307   0x00,
//  308   0x08, /* max win size rec */
//  309   0x04, /* no. of byte used */
//  310   0x00,
//  311   0x00,
//  312   0x00,
//  313   0x00};
//  314 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  315 const us8 OBJ_LIST[]= 
_OBJ_LIST:
        DATA8
        DB 5, 73, 74, 84, 15, 1, 0, 0, 40, 0, 1, 255, 84, 8, 0, 0, 0, 1, 0, 0
        DB 255, 35, 1, 0, 0, 0, 42, 0, 0, 255, 35, 1, 0, 0, 0, 96, 1, 0, 255
        DB 84, 15, 1, 0, 0, 40, 0, 0, 255, 84, 15, 1, 0, 0, 40, 0, 2, 255, 35
        DB 17, 0, 0, 0, 41, 0, 0, 255, 42, 3, 0, 1, 0, 31, 7, 0, 255, 42, 3, 0
        DB 1, 0, 51, 7, 0, 255, 42, 3, 0, 1, 0, 71, 7, 0, 255, 42, 3, 0, 1, 0
        DB 32, 7, 0, 255, 42, 3, 0, 1, 0, 52, 7, 0, 255, 42, 3, 0, 1, 0, 72, 7
        DB 0, 255, 42, 3, 0, 1, 0, 33, 7, 0, 255, 42, 3, 0, 1, 0, 53, 7, 0, 255
        DB 42, 3, 0, 1, 0, 73, 7, 0, 255, 42, 3, 0, 1, 0, 13, 7, 0, 255, 42, 3
        DB 0, 1, 0, 14, 7, 0, 255, 42, 3, 0, 1, 0, 9, 7, 0, 255, 42, 3, 0, 1, 0
        DB 1, 7, 0, 255, 42, 3, 0, 1, 0, 3, 7, 0, 255, 35, 1, 0, 0, 0, 96, 7, 0
        DB 255, 42, 3, 0, 0, 0, 94, 91, 8, 255, 35, 1, 0, 0, 0, 94, 91, 0, 255
        DB 35, 1, 0, 0, 0, 0, 1, 0, 255, 35, 1, 0, 0, 0, 96, 2, 0, 255, 42, 3
        DB 0, 0, 0, 0, 1, 2, 255, 35, 1, 0, 0, 0, 96, 1, 1, 255, 35, 1, 0, 1, 0
        DB 0, 2, 0, 255, 35, 1, 0, 0, 0, 94, 91, 9, 255, 35, 1, 0, 1, 0, 0, 4
        DB 2, 255, 35, 1, 0, 1, 0, 0, 4, 3, 255, 35, 1, 0, 0, 0, 96, 1, 4, 255
        DB 35, 1, 0, 1, 0, 0, 8, 0, 255, 35, 1, 0, 1, 0, 0, 8, 4, 255, 49, 22
        DB 0, 0, 0, 15, 0, 0, 255, 80, 7, 1, 1, 0, 94, 91, 0, 255, 80, 7, 1, 1
        DB 0, 94, 91, 3, 255, 80, 7, 1, 1, 0, 99, 1, 0, 255, 80, 7, 1, 1, 0, 94
        DB 91, 4, 255, 80, 7, 1, 1, 0, 99, 2, 0, 255, 80, 7, 1, 1, 0, 94, 91, 5
        DB 255, 35, 1, 0, 0, 0, 96, 11, 0, 255, 35, 1, 0, 0, 0, 96, 11, 1, 255
        DB 35, 1, 0, 0, 0, 96, 11, 2, 255, 35, 1, 0, 0, 0, 96, 11, 3, 255, 35
        DB 1, 0, 0, 0, 96, 11, 4, 255, 35, 1, 0, 0, 0, 96, 11, 5, 255, 80, 7, 1
        DB 0, 0, 99, 98, 0, 255, 80, 7, 1, 0, 0, 99, 98, 1, 255, 80, 7, 1, 0, 0
        DB 99, 98, 2, 255, 80, 7, 1, 0, 0, 99, 98, 3, 255, 80, 7, 1, 0, 0, 99
        DB 98, 4, 255, 80, 7, 1, 0, 0, 99, 98, 5, 255, 35, 9, 0, 0, 0, 10, 0
        DB 100, 255, 80, 7, 1, 1, 0, 94, 91, 7, 255, 42, 3, 0, 1, 0, 1, 8, 0
        DB 255, 42, 3, 0, 1, 0, 5, 8, 0, 255, 42, 3, 0, 1, 0, 8, 8, 0, 255, 42
        DB 3, 0, 1, 0, 9, 8, 0, 255, 80, 7, 1, 1, 0, 98, 1, 0, 255, 91, 20, 0
        DB 0, 0, 13, 0, 0, 255, 35, 1, 0, 0, 0, 0, 1, 1, 255, 80, 7, 1, 1, 0
        DB 94, 91, 6, 255, 56, 4, 0, 1, 0, 1, 6, 0, 255, 56, 4, 0, 1, 0, 9, 6
        DB 0, 255, 42, 63, 0, 0, 0, 96, 10, 1, 255, 35, 1, 0, 0, 0, 94, 91, 12
        DB 255, 80, 7, 1, 0, 0, 94, 91, 10, 255, 42, 3, 0, 1, 0, 1, 2, 0, 255
        DB 42, 3, 0, 1, 0, 9, 2, 0, 255, 42, 3, 0, 1, 0, 128, 8, 0, 255, 35, 1
        DB 0, 0, 0, 94, 91, 11, 255, 108, 15, 1, 0, 0, 40, 0, 3, 255, 0
//  316 {
//  317   5,
//  318   73,
//  319   74,
//  320   84, 15, 1, 0, 0, 40, 0, 1, 255,   /* Association PC */
//  321   84, 8, 0, 0, 0, 1, 0, 0, 255,     /* clock84 */
//  322   35, 1, 0, 0, 0, 42, 0, 0, 255,    /* logical device name */
//  323   35, 1, 0, 0, 0, 96, 1, 0, 255,    /* Sr number */
//  324   84, 15, 1, 0, 0, 40, 0, 0, 255,   /* Association LN */
//  325   84, 15, 1, 0, 0, 40, 0, 2, 255,   /* Association MR */
//  326   35, 17, 0, 0, 0, 41, 0, 0, 255,   /* SAP assignment list */
//  327   42, 3, 0, 1, 0, 31, 7, 0, 255,    /* phase current R */
//  328   42, 3, 0, 1, 0, 51, 7, 0, 255,    /* phase current Y */
//  329   42, 3, 0, 1, 0, 71, 7, 0, 255,    /* phase current B */
//  330   42, 3, 0, 1, 0, 32, 7, 0, 255,    /*  phase voltage R */
//  331   42, 3, 0, 1, 0, 52, 7, 0, 255,    /*  phase voltage Y */
//  332   42, 3, 0, 1, 0, 72, 7, 0, 255,    /*  phase voltage B */
//  333   42, 3, 0, 1, 0, 33, 7, 0, 255,    /*  pf R */
//  334   42, 3, 0, 1, 0, 53, 7, 0, 255,    /*  pf Y */
//  335   42, 3, 0, 1, 0, 73, 7, 0, 255,    /*  pf B */
//  336   42, 3, 0, 1, 0, 13, 7, 0, 255,    /*  net pf */
//  337   42, 3, 0, 1, 0, 14, 7, 0, 255,    /* freq Net*/
//  338   42, 3, 0, 1, 0, 9, 7, 0, 255,     /* VA */
//  339   42, 3, 0, 1, 0, 1, 7, 0, 255,     /* Watt */
//  340   42, 3, 0, 1, 0, 3, 7, 0, 255,     /* VAR */ 
//  341   35, 1, 0, 0, 0, 96, 7, 0, 255,    /* Number of power-failures */
//  342   42, 3, 0, 0, 0, 94, 91, 8, 255,   /* Cumulative power-failure duration */
//  343   35, 1, 0, 0, 0, 94, 91, 0, 255,   /* cumulative tamper count */
//  344   35, 1, 0, 0, 0, 0, 1, 0, 255,     /* cumulative MD reset count */
//  345   35, 1, 0, 0, 0, 96, 2, 0, 255,    /* cumulative PROG  count */
//  346   42, 3, 0, 0, 0, 0, 1, 2, 255,     /* Date and time of last MD reset */
//  347   35, 1, 0, 0, 0, 96, 1, 1, 255,    /* manufacture name */
//  348   35, 1, 0, 1, 0, 0, 2, 0, 255,     /* Firmware ver */
//  349   35, 1, 0, 0, 0, 94, 91, 9, 255,   /* Meter type */
//  350   35, 1, 0, 1, 0, 0, 4, 2, 255,     /* Internal CT ratio */
//  351   35, 1, 0, 1, 0, 0, 4, 3, 255,     /* Internal PT ratio */
//  352   35, 1, 0, 0, 0, 96, 1, 4, 255,    /* year of manufac */
//  353   35, 1, 0, 1, 0, 0, 8, 0, 255,     /* Demand Integration Period */
//  354   35, 1, 0, 1, 0, 0, 8, 4, 255,     /* Profile Capture Period */
//  355   49, 22, 0, 0, 0, 15, 0, 0, 255,   /* Single-action Schedule for Billing Dates */
//  356   80, 7, 1, 1, 0, 94, 91, 0, 255,   /* snap shot of instantaneous parameters */
//  357   80, 7, 1, 1, 0, 94, 91, 3, 255,   /* scaler unit of instantaneous parameters */
//  358   80, 7, 1, 1, 0, 99, 1, 0, 255,    /* Load profile */
//  359   80, 7, 1, 1, 0, 94, 91, 4, 255,   /* scaler unit of load Survey */
//  360   80, 7, 1, 1, 0, 99, 2, 0, 255,    /* Daily Load profile */
//  361   80, 7, 1, 1, 0, 94, 91, 5, 255,   /* scaler unit of daily load Profile */
//  362   35, 1, 0, 0, 0, 96, 11, 0, 255,   /* voltage related counts*/
//  363   35, 1, 0, 0, 0, 96, 11, 1, 255,   /* current related counts*/
//  364   35, 1, 0, 0, 0, 96, 11, 2, 255,   /* power related counts*/
//  365   35, 1, 0, 0, 0, 96, 11, 3, 255,   /* transaction events counts*/
//  366   35, 1, 0, 0, 0, 96, 11, 4, 255,   /* other event profile-magnet, cover open counts*/
//  367   35, 1, 0, 0, 0, 96, 11, 5, 255,   /* non-rollover counts*/
//  368   80, 7, 1, 0, 0, 99, 98, 0, 255,   /* voltage related */
//  369   80, 7, 1, 0, 0, 99, 98, 1, 255,   /* current related */
//  370   80, 7, 1, 0, 0, 99, 98, 2, 255,   /* power related evnt profile(reverse ) */
//  371   80, 7, 1, 0, 0, 99, 98, 3, 255,   /* transaction related event */
//  372   80, 7, 1, 0, 0, 99, 98, 4, 255,   /* other event profile-magnet, cover open */
//  373   80, 7, 1, 0, 0, 99, 98, 5, 255,   /* non-rollover */
//  374   35, 9, 0, 0, 0, 10, 0, 100, 255,  /* tariff script */
//  375   80, 7, 1, 1, 0, 94, 91, 7, 255,   /* scaler unit of event log profile */
//  376   42, 3, 0, 1, 0, 1, 8, 0, 255, 
//  377   42, 3, 0, 1, 0, 5, 8, 0, 255,
//  378   42, 3, 0, 1, 0, 8, 8, 0, 255,     
//  379   42, 3, 0, 1, 0, 9, 8, 0, 255,
//  380   80, 7, 1, 1, 0, 98, 1, 0, 255,    /* bill profile cumulative */
//  381   91, 20, 0, 0, 0, 13, 0, 0, 255,   /* activity calender */
//  382   35, 1, 0, 0, 0, 0, 1, 1, 255,     /* Available Billing periods */
//  383   80, 7, 1, 1, 0, 94, 91, 6, 255,   /* scaler unit of bill profile */
//  384   56, 4, 0, 1, 0, 1, 6, 0, 255,     /* md kw imp*/
//  385   56, 4, 0, 1, 0, 9, 6, 0, 255,     /* md kva imp*/
//  386   42, 63, 0, 0, 0, 96, 10, 1, 255,  /* tamper status byte */
//  387   //35, 1, 0, 1, 0, 96, 128, 18, 255, /* utility id */
//  388   35, 1, 0, 0, 0, 94, 91, 12, 255,  /* current rating */
//  389   80, 7, 1, 0, 0, 94, 91, 10, 255,  /* name plate profile */
//  390   
//  391   42, 3, 0, 1, 0, 1, 2, 0, 255, /* cum md kw */
//  392   42, 3, 0, 1, 0, 9, 2, 0, 255, /* cum md kva */
//  393   
//  394   42, 3, 0, 1, 0, 128, 8, 0, 255, /* cum fundamental energy */
//  395   35, 1, 0, 0, 0, 94, 91, 11, 255, /* meter category */
//  396   
//  397   108, 15, 1, 0, 0, 40, 0, 3, 255,  /* Association US */
//  398   
//  399 };
//  400 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  401 const us8 voltage_event_capture_obj[]= 
_voltage_event_capture_obj:
        DATA8
        DB 13, 8, 2, 0, 0, 1, 0, 0, 255, 1, 2, 0, 0, 96, 11, 0, 255, 3, 2, 1, 0
        DB 31, 7, 0, 255, 3, 2, 1, 0, 51, 7, 0, 255, 3, 2, 1, 0, 71, 7, 0, 255
        DB 3, 2, 1, 0, 32, 7, 0, 255, 3, 2, 1, 0, 52, 7, 0, 255, 3, 2, 1, 0, 72
        DB 7, 0, 255, 3, 2, 1, 0, 33, 7, 0, 255, 3, 2, 1, 0, 53, 7, 0, 255, 3
        DB 2, 1, 0, 73, 7, 0, 255, 3, 2, 1, 0, 1, 8, 0, 255, 3, 2, 1, 0, 9, 8
        DB 0, 255, 0
//  402 {
//  403   13,
//  404   8, 2, 0, 0, 1, 0, 0, 255,   /* D&T */
//  405   1, 2, 0, 0, 96, 11, 0, 255, /* event code voltage */
//  406   3, 2, 1, 0, 31, 7, 0, 255,  /* Ir */
//  407   3, 2, 1, 0, 51, 7, 0, 255,  /* Iy */
//  408   3, 2, 1, 0, 71, 7, 0, 255,  /* Ib */
//  409   3, 2, 1, 0, 32, 7, 0, 255,  /* Vr */
//  410   3, 2, 1, 0, 52, 7, 0, 255,  /* Vy */
//  411   3, 2, 1, 0, 72, 7, 0, 255,  /* Vb */
//  412   3, 2, 1, 0, 33, 7, 0, 255,  /* PF r */
//  413   3, 2, 1, 0, 53, 7, 0, 255,  /* PF y */
//  414   3, 2, 1, 0, 73, 7, 0, 255,  /* PF b */
//  415   3, 2, 1, 0, 1, 8, 0, 255,   /* KWH stamp */
//  416   3, 2, 1, 0, 9, 8, 0, 255    /* KvaH stamp */
//  417 };
//  418 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  419 const us8 current_event_capture_obj[]= 
_current_event_capture_obj:
        DATA8
        DB 13, 8, 2, 0, 0, 1, 0, 0, 255, 1, 2, 0, 0, 96, 11, 1, 255, 3, 2, 1, 0
        DB 31, 7, 0, 255, 3, 2, 1, 0, 51, 7, 0, 255, 3, 2, 1, 0, 71, 7, 0, 255
        DB 3, 2, 1, 0, 32, 7, 0, 255, 3, 2, 1, 0, 52, 7, 0, 255, 3, 2, 1, 0, 72
        DB 7, 0, 255, 3, 2, 1, 0, 33, 7, 0, 255, 3, 2, 1, 0, 53, 7, 0, 255, 3
        DB 2, 1, 0, 73, 7, 0, 255, 3, 2, 1, 0, 1, 8, 0, 255, 3, 2, 1, 0, 9, 8
        DB 0, 255, 0
//  420 {
//  421   13,
//  422   8, 2, 0, 0, 1, 0, 0, 255,   /* D&T */
//  423   1, 2, 0, 0, 96, 11, 1, 255, /* event code voltage */
//  424   3, 2, 1, 0, 31, 7, 0, 255,  /* Ir */
//  425   3, 2, 1, 0, 51, 7, 0, 255,  /* Iy */
//  426   3, 2, 1, 0, 71, 7, 0, 255,  /* Ib */
//  427   3, 2, 1, 0, 32, 7, 0, 255,  /* Vr */
//  428   3, 2, 1, 0, 52, 7, 0, 255,  /* Vy */
//  429   3, 2, 1, 0, 72, 7, 0, 255,  /* Vb */
//  430   3, 2, 1, 0, 33, 7, 0, 255,  /* PF r */
//  431   3, 2, 1, 0, 53, 7, 0, 255,  /* PF y */
//  432   3, 2, 1, 0, 73, 7, 0, 255,  /* PF b */
//  433   3, 2, 1, 0, 1, 8, 0, 255,   /* KWH stamp */
//  434   3, 2, 1, 0, 9, 8, 0, 255    /* KvaH stamp */
//  435 };
//  436 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  437 const us8 power_event_capture_obj[]= 
_power_event_capture_obj:
        DATA8
        DB 2, 8, 2, 0, 0, 1, 0, 0, 255, 1, 2, 0, 0, 96, 11, 2, 255, 0
//  438 {
//  439   2,
//  440   8, 2, 0, 0, 1, 0, 0, 255,  /* D&T */
//  441   1, 2, 0, 0, 96, 11, 2, 255 /* event code power */
//  442     
//  443 };
//  444 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  445 const us8 transaction_event_capture_obj[]= 
_transaction_event_capture_obj:
        DATA8
        DB 2, 8, 2, 0, 0, 1, 0, 0, 255, 1, 2, 0, 0, 96, 11, 3, 255, 0
//  446 {
//  447   2,
//  448   8, 2, 0, 0, 1, 0, 0, 255,   /* D&T */
//  449   1, 2, 0, 0, 96, 11, 3, 255, /* event code */
//  450   /*  3,2,1,0,32,7,0,255, //Vr
//  451   3,2,1,0,52,7,0,255, //Vy
//  452   3,2,1,0,72,7,0,255, //Vb
//  453   3,2,1,0,31,7,0,255, //Ir
//  454   3,2,1,0,51,7,0,255, //Iy
//  455   3,2,1,0,71,7,0,255, //Ib
//  456   3,2,1,0,33,7,0,255, //PF r
//  457   3,2,1,0,53,7,0,255, //PF y
//  458   3,2,1,0,73,7,0,255, //PF b
//  459   3,2,1,0,1,8,0,255  //KWH stamp
//  460   */
//  461 };
//  462 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  463 const us8 other_event_capture_obj[]= 
_other_event_capture_obj:
        DATA8
        DB 13, 8, 2, 0, 0, 1, 0, 0, 255, 1, 2, 0, 0, 96, 11, 4, 255, 3, 2, 1, 0
        DB 31, 7, 0, 255, 3, 2, 1, 0, 51, 7, 0, 255, 3, 2, 1, 0, 71, 7, 0, 255
        DB 3, 2, 1, 0, 32, 7, 0, 255, 3, 2, 1, 0, 52, 7, 0, 255, 3, 2, 1, 0, 72
        DB 7, 0, 255, 3, 2, 1, 0, 33, 7, 0, 255, 3, 2, 1, 0, 53, 7, 0, 255, 3
        DB 2, 1, 0, 73, 7, 0, 255, 3, 2, 1, 0, 1, 8, 0, 255, 3, 2, 1, 0, 9, 8
        DB 0, 255, 0
//  464 {
//  465   13,
//  466   8, 2, 0, 0, 1, 0, 0, 255,   /* D&T */
//  467   1, 2, 0, 0, 96, 11, 4, 255, /* event code voltage */
//  468   3, 2, 1, 0, 31, 7, 0, 255,  /* Ir */
//  469   3, 2, 1, 0, 51, 7, 0, 255,  /* Iy */
//  470   3, 2, 1, 0, 71, 7, 0, 255,  /* Ib */
//  471   3, 2, 1, 0, 32, 7, 0, 255,  /* Vr */
//  472   3, 2, 1, 0, 52, 7, 0, 255,  /* Vy */
//  473   3, 2, 1, 0, 72, 7, 0, 255,  /* Vb */
//  474   3, 2, 1, 0, 33, 7, 0, 255,  /* PF r */
//  475   3, 2, 1, 0, 53, 7, 0, 255,  /* PF y */
//  476   3, 2, 1, 0, 73, 7, 0, 255,  /* PF b */
//  477   3, 2, 1, 0, 1, 8, 0, 255,   /* KWH stamp */
//  478   3, 2, 1, 0, 9, 8, 0, 255    /* KvaH stamp */
//  479 };
//  480 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  481 const us8 non_rollover_event_capture_obj[]= 
_non_rollover_event_capture_obj:
        DATA8
        DB 2, 8, 2, 0, 0, 1, 0, 0, 255, 1, 2, 0, 0, 96, 11, 5, 255, 0
//  482 {
//  483   2,
//  484   8, 2, 0, 0, 1, 0, 0, 255,   /* D&T */
//  485   1, 2, 0, 0, 96, 11, 5, 255, /* event code voltage */
//  486   /*  3,2,1,0,32,7,0,255, //Vr
//  487   3,2,1,0,52,7,0,255, //Vy
//  488   3,2,1,0,72,7,0,255, //Vb
//  489   3,2,1,0,31,7,0,255, //Ir
//  490   3,2,1,0,51,7,0,255, //Iy
//  491   3,2,1,0,71,7,0,255, //Ib
//  492   3,2,1,0,33,7,0,255, //PF r
//  493   3,2,1,0,53,7,0,255, //PF y
//  494   3,2,1,0,73,7,0,255, //PF b
//  495   3,2,1,0,1,8,0,255,  //KWH stamp
//  496   */
//  497 };

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  498 const us8 debug_event_capture_obj[]= 
_debug_event_capture_obj:
        DATA8
        DB 2, 8, 2, 0, 0, 1, 0, 0, 255, 1, 2, 0, 0, 96, 11, 2, 255, 0
//  499 {
//  500   2,
//  501   8, 2, 0, 0, 1, 0, 0, 255,  /* D&T */
//  502   1, 2, 0, 0, 96, 11, 2, 255 /* event code power */
//  503     
//  504 };

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  505 const us8 event_log_profile_scaler_cap_obj[]= 
_event_log_profile_scaler_cap_obj:
        DATA8
        DB 11, 3, 3, 1, 0, 31, 7, 0, 255, 3, 3, 1, 0, 51, 7, 0, 255, 3, 3, 1, 0
        DB 71, 7, 0, 255, 3, 3, 1, 0, 32, 7, 0, 255, 3, 3, 1, 0, 52, 7, 0, 255
        DB 3, 3, 1, 0, 72, 7, 0, 255, 3, 3, 1, 0, 33, 7, 0, 255, 3, 3, 1, 0, 53
        DB 7, 0, 255, 3, 3, 1, 0, 73, 7, 0, 255, 3, 3, 1, 0, 1, 8, 0, 255, 3, 3
        DB 1, 0, 9, 8, 0, 255, 0
//  506 {
//  507   11,
//  508   3, 3, 1, 0, 31, 7, 0, 255, /* Ir */
//  509   3, 3, 1, 0, 51, 7, 0, 255, /* Iy */
//  510   3, 3, 1, 0, 71, 7, 0, 255, /* Ib */
//  511   3, 3, 1, 0, 32, 7, 0, 255, /* Vr */
//  512   3, 3, 1, 0, 52, 7, 0, 255, /* Vy */
//  513   3, 3, 1, 0, 72, 7, 0, 255, /* Vb */
//  514   3, 3, 1, 0, 33, 7, 0, 255, /* PF r */
//  515   3, 3, 1, 0, 53, 7, 0, 255, /* PF y */
//  516   3, 3, 1, 0, 73, 7, 0, 255, /* PF b */
//  517   3, 3, 1, 0, 1, 8, 0, 255,  /* KWH stamp */
//  518   3, 3, 1, 0, 9, 8, 0, 255,  /* KvaH stamp */
//  519 };
//  520 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  521 const us8 instantaneous_parameter_cap_obj[]= 
_instantaneous_parameter_cap_obj:
        DATA8
        DB 31, 8, 2, 0, 0, 1, 0, 0, 255, 3, 2, 1, 0, 31, 7, 0, 255, 3, 2, 1, 0
        DB 51, 7, 0, 255, 3, 2, 1, 0, 71, 7, 0, 255, 3, 2, 1, 0, 32, 7, 0, 255
        DB 3, 2, 1, 0, 52, 7, 0, 255, 3, 2, 1, 0, 72, 7, 0, 255, 3, 2, 1, 0, 33
        DB 7, 0, 255, 3, 2, 1, 0, 53, 7, 0, 255, 3, 2, 1, 0, 73, 7, 0, 255, 3
        DB 2, 1, 0, 13, 7, 0, 255, 3, 2, 1, 0, 14, 7, 0, 255, 3, 2, 1, 0, 9, 7
        DB 0, 255, 3, 2, 1, 0, 1, 7, 0, 255, 3, 2, 1, 0, 3, 7, 0, 255, 1, 2, 0
        DB 0, 96, 7, 0, 255, 3, 2, 0, 0, 94, 91, 8, 255, 1, 2, 0, 0, 94, 91, 0
        DB 255, 1, 2, 0, 0, 0, 1, 0, 255, 1, 2, 0, 0, 96, 2, 0, 255, 3, 2, 0, 0
        DB 0, 1, 2, 255, 3, 2, 1, 0, 1, 8, 0, 255, 3, 2, 1, 0, 5, 8, 0, 255, 3
        DB 2, 1, 0, 8, 8, 0, 255, 3, 2, 1, 0, 9, 8, 0, 255, 4, 2, 1, 0, 1, 6, 0
        DB 255, 4, 5, 1, 0, 1, 6, 0, 255, 4, 2, 1, 0, 9, 6, 0, 255, 4, 5, 1, 0
        DB 9, 6, 0, 255, 3, 2, 1, 0, 1, 2, 0, 255, 3, 2, 1, 0, 9, 2, 0, 255, 0
//  522 {
//  523   31,
//  524   8, 2, 0, 0, 1, 0, 0, 255,  /* inst D&T0 */
//  525   3, 2, 1, 0, 31, 7, 0, 255, /* Ir */
//  526   3, 2, 1, 0, 51, 7, 0, 255, /* Iy */
//  527   3, 2, 1, 0, 71, 7, 0, 255, /* Ib */
//  528   
//  529   3, 2, 1, 0, 32, 7, 0, 255,  /* Vr */
//  530   3, 2, 1, 0, 52, 7, 0, 255,  /* Vy */
//  531   3, 2, 1, 0, 72, 7, 0, 255,  /* Vb */
//  532   3, 2, 1, 0, 33, 7, 0, 255,  /* PFr */
//  533   3, 2, 1, 0, 53, 7, 0, 255,  /* PFy */
//  534   3, 2, 1, 0, 73, 7, 0, 255,  /* PFb */
//  535   3, 2, 1, 0, 13, 7, 0, 255,  /* PF */
//  536   3, 2, 1, 0, 14, 7, 0, 255,  /* freq */
//  537   3, 2, 1, 0, 9, 7, 0, 255,   /* apprent power kVA */
//  538   3, 2, 1, 0, 1, 7, 0, 255,   /* Signed Active Power � kW */
//  539   3, 2, 1, 0, 3, 7, 0, 255,   /* Signed Reactive Power � kvar */
//  540   1, 2, 0, 0, 96, 7, 0, 255,  /* Number of power-failures */
//  541   3, 2, 0, 0, 94, 91, 8, 255, /* Cumulative power-failure duration */
//  542   1, 2, 0, 0, 94, 91, 0, 255, /* Cumulative tamper count */
//  543   1, 2, 0, 0, 0, 1, 0, 255,   /* Cumulative MD resets count */
//  544   1, 2, 0, 0, 96, 2, 0, 255,  /* Cumulative programming count */
//  545   3, 2, 0, 0, 0, 1, 2, 255,   /* Date and time of last MD reset */
//  546   3, 2, 1, 0, 1, 8, 0, 255,   /* cum kwh */
//  547   3, 2, 1, 0, 5, 8, 0, 255,   /* cum kvarh lag */
//  548   3, 2, 1, 0, 8, 8, 0, 255,   /* cum kvarh lead */
//  549   3, 2, 1, 0, 9, 8, 0, 255,   /* cum kavh */
//  550   4, 2, 1, 0, 1, 6, 0, 255,   /* md kw */
//  551   4, 5, 1, 0, 1, 6, 0, 255,
//  552   4, 2, 1, 0, 9, 6, 0, 255, /* md kva */
//  553   4, 5, 1, 0, 9, 6, 0, 255,
//  554   //3,2,1,0,150,8,0,255, // defraud kwh
//  555   // 3,2,0,0,96,8,0,255, // Cumulative power-on duration
//  556   // 3,2,1,0,91,7,0,255, // netural*/
//  557   3, 2, 1, 0, 1, 2, 0, 255, // CUM MD KW */
//  558   3, 2, 1, 0, 9, 2, 0, 255, // CUM MD KVA */
//  559   /*  3,2,1,0,128,8,0,255  / * Fun Kwh cum * / */
//  560 };
//  561 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  562 const us8 instantaneous_parameter_scaler_cap_obj[]= 
_instantaneous_parameter_scaler_cap_obj:
        DATA8
        DB 24, 3, 3, 1, 0, 31, 7, 0, 255, 3, 3, 1, 0, 51, 7, 0, 255, 3, 3, 1, 0
        DB 71, 7, 0, 255, 3, 3, 1, 0, 32, 7, 0, 255, 3, 3, 1, 0, 52, 7, 0, 255
        DB 3, 3, 1, 0, 72, 7, 0, 255, 3, 3, 1, 0, 33, 7, 0, 255, 3, 3, 1, 0, 53
        DB 7, 0, 255, 3, 3, 1, 0, 73, 7, 0, 255, 3, 3, 1, 0, 13, 7, 0, 255, 3
        DB 3, 1, 0, 14, 7, 0, 255, 3, 3, 1, 0, 9, 7, 0, 255, 3, 3, 1, 0, 1, 7
        DB 0, 255, 3, 3, 1, 0, 3, 7, 0, 255, 3, 3, 0, 0, 94, 91, 8, 255, 3, 3
        DB 0, 0, 0, 1, 2, 255, 3, 3, 1, 0, 1, 8, 0, 255, 3, 3, 1, 0, 5, 8, 0
        DB 255, 3, 3, 1, 0, 8, 8, 0, 255, 3, 3, 1, 0, 9, 8, 0, 255, 4, 3, 1, 0
        DB 1, 6, 0, 255, 4, 3, 1, 0, 9, 6, 0, 255, 3, 3, 1, 0, 1, 2, 0, 255, 3
        DB 3, 1, 0, 9, 2, 0, 255, 0
//  563 {
//  564   24,
//  565   3, 3, 1, 0, 31, 7, 0, 255,  /* Ir */
//  566   3, 3, 1, 0, 51, 7, 0, 255,  /* Iy */
//  567   3, 3, 1, 0, 71, 7, 0, 255,  /* Ib */
//  568   3, 3, 1, 0, 32, 7, 0, 255,  /* Vr */
//  569   3, 3, 1, 0, 52, 7, 0, 255,  /* Vy */
//  570   3, 3, 1, 0, 72, 7, 0, 255,  /* Vb */
//  571   3, 3, 1, 0, 33, 7, 0, 255,  /* rph pf */
//  572   3, 3, 1, 0, 53, 7, 0, 255,  /* rph pf */
//  573   3, 3, 1, 0, 73, 7, 0, 255,  /* rph pf */
//  574   3, 3, 1, 0, 13, 7, 0, 255,  /* rph pf */
//  575   3, 3, 1, 0, 14, 7, 0, 255,  /* freq */
//  576   3, 3, 1, 0, 9, 7, 0, 255,   /* apprent power kVA */
//  577   3, 3, 1, 0, 1, 7, 0, 255,   /* Signed Active Power � kW */
//  578   3, 3, 1, 0, 3, 7, 0, 255,   /* Signed Reactive Power � kvar */
//  579   3, 3, 0, 0, 94, 91, 8, 255, /* Cumulative power-failure duration */
//  580   3, 3, 0, 0, 0, 1, 2, 255,   /* Date and time of last MD reset */
//  581   3, 3, 1, 0, 1, 8, 0, 255,   /* cum kwh */
//  582   3, 3, 1, 0, 5, 8, 0, 255,   /* Cum kvarh lag */
//  583   3, 3, 1, 0, 8, 8, 0, 255,   /* Cum kvarh lead. */
//  584   3, 3, 1, 0, 9, 8, 0, 255,   /* Cum kvah */
//  585   
//  586   4, 3, 1, 0, 1, 6, 0, 255, /* md kw */
//  587   4, 3, 1, 0, 9, 6, 0, 255, /* mdkva */
//  588   //        3,3,1,0,150,8,0,255, /* cum kwh */
//  589   //        3,3,0,0,96,8,0,255, /* Cumulative power-failure duration */
//  590   //        3,3,1,0,91,7,0,255, /* Ib */
//  591   3, 3, 1, 0, 1, 2, 0, 255, /* CUM MD KW */
//  592   3, 3, 1, 0, 9, 2, 0, 255, /* CUM MD KVA */
//  593   /*  3,3,1,0,128,8,0,255   / * Fun Kwh cum * / */
//  594 };
//  595 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  596 const us8 instantaneous_parameter_scaler_buffer[]= 
_instantaneous_parameter_scaler_buffer:
        DATA8
        DB 24, 253, 33, 1, 253, 33, 1, 253, 33, 1, 254, 35, 2, 254, 35, 2, 254
        DB 35, 2, 253, 255, 0, 253, 255, 0, 253, 255, 0, 253, 255, 0, 253, 44
        DB 0, 255, 28, 0, 255, 27, 0, 255, 29, 0, 0, 6, 0, 0, 255, 0, 0, 30, 3
        DB 0, 32, 3, 0, 32, 3, 0, 31, 3, 0, 27, 3, 0, 28, 3, 0, 27, 3, 0, 28, 3
        DB 0
//  597 {
//  598   24,
//  599   0xfd, 33, 1,   /* ir      //Scalar, Unit,Scalar Adder(1-scalar_cur, 2-scalar_vol, 3scalar_energy) */
//  600   0xfd, 33, 1,   /* iy */
//  601   0xfd, 33, 1,   /* ib */
//  602   0xfe, 35, 2,   /* Vr */
//  603   0xfe, 35, 2,   /* Vy */
//  604   0xfe, 35, 2,   /* Vb */
//  605   0xfd, 0xff, 0, /* rph pf */
//  606   0xfd, 0xff, 0, /* yph pf */
//  607   0xfd, 0xff, 0, /* bph pf */
//  608   0xfd, 0xff, 0, /* nph pf */
//  609   0xfd, 44, 0,   /* freq */
//  610   0xFF, 28, 0,   /* kVA */
//  611   0xFF, 27, 0,   /* kw */
//  612   0xFF, 29, 0,   /* kVar */
//  613   0x00, 6, 0,    /* cum power failure duration */
//  614   0x00,255,0,
//  615   0x00, 30, 3,   /* kwh */
//  616   0x00, 32, 3,   /* kvarh lag */
//  617   0x00, 32, 3,   /* kvarh lead */
//  618   0x00, 31, 3,   /* kvah */
//  619   
//  620   0x00, 27, 3, /* md kw */
//  621   0x00, 28, 3, /* md kva */
//  622   //        0x00,30,3, /* kwh */
//  623   //        0x00,6,0, /* cum power failure duration */
//  624   //        0xfe,33,1, /* ib */
//  625   0x00, 27, 3, /* cum md kw */
//  626   0x00, 28, 3, /* cum md kva */
//  627   /*  0x00,30,3   / * fun kwh cum * / */
//  628 };
//  629 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  630 const us8 dailyload_profile_parameter_scaler_cap_obj[]= 
_dailyload_profile_parameter_scaler_cap_obj:
        DATA8
        DB 5, 3, 3, 1, 0, 1, 8, 0, 255, 3, 3, 1, 0, 9, 8, 0, 255, 3, 3, 0, 0
        DB 94, 91, 13, 255, 3, 3, 1, 0, 5, 8, 0, 255, 3, 3, 1, 0, 8, 8, 0, 255
        DB 0
//  631 {
//  632   5,
//  633   3, 3, 1, 0, 1, 8, 0, 255, /* kWh stamp block */
//  634   3, 3, 1, 0, 9, 8, 0, 255, /* kVAh stamp */
//  635   3, 3, 0, 0, 94, 91, 13, 255,  /* cum power on duration */
//  636   3, 3, 1, 0, 5, 8, 0, 255, /* kVArh lags tamp */
//  637   3, 3, 1, 0, 8, 8, 0, 255, /* kVArh lead stamp */
//  638 };
//  639 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  640 const us8 dailyload_profile_parameter_cap_obj[]= 
_dailyload_profile_parameter_cap_obj:
        DATA8
        DB 6, 8, 2, 0, 0, 1, 0, 0, 255, 3, 2, 1, 0, 1, 8, 0, 255, 3, 2, 1, 0, 9
        DB 8, 0, 255, 3, 2, 0, 0, 94, 91, 13, 255, 3, 2, 1, 0, 5, 8, 0, 255, 3
        DB 2, 1, 0, 8, 8, 0, 255, 0
//  641 {
//  642   6,
//  643   8, 2, 0, 0, 1, 0, 0, 255, /* rtc D&T */
//  644   3, 2, 1, 0, 1, 8, 0, 255, /* kWh stamp */
//  645   3, 2, 1, 0, 9, 8, 0, 255, /* kVAh stamp */
//  646   3, 2, 0, 0, 94, 91, 13, 255,  /* cum power on duration */
//  647   3, 2, 1, 0, 5, 8, 0, 255, /* kVArh lags tamp */
//  648   3, 2, 1, 0, 8, 8, 0, 255, /* kVArh lead stamp */
//  649 };
//  650 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  651 const us8 dailyload_profile_parameter_scaler_buffer[]= 
_dailyload_profile_parameter_scaler_buffer:
        DATA8
        DB 5, 0, 30, 3, 0, 31, 3, 0, 6, 0, 0, 32, 3, 0, 32, 3
//  652 {
//  653   5,
//  654   0x00, 30, 3, /* kwh */
//  655   0x00, 31, 3, /* kvah */
//  656   0x00, 6, 0,   //cum pow on hour */
//  657   0x00, 32, 3, //kvarh lag
//  658   0x00, 32, 3, //kvarh lead
//  659 };
//  660 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  661 const us8 blockload_survey_parameter_scaler_cap_obj[]= 
_blockload_survey_parameter_scaler_cap_obj:
        DATA8
        DB 10, 3, 3, 1, 0, 31, 27, 0, 255, 3, 3, 1, 0, 51, 27, 0, 255, 3, 3, 1
        DB 0, 71, 27, 0, 255, 3, 3, 1, 0, 32, 27, 0, 255, 3, 3, 1, 0, 52, 27, 0
        DB 255, 3, 3, 1, 0, 72, 27, 0, 255, 3, 3, 1, 0, 1, 29, 0, 255, 3, 3, 1
        DB 0, 5, 29, 0, 255, 3, 3, 1, 0, 8, 29, 0, 255, 3, 3, 1, 0, 9, 29, 0
        DB 255, 0
//  662 {
//  663   10,
//  664   3, 3, 1, 0, 31, 27, 0, 255, /* Ir */
//  665   3, 3, 1, 0, 51, 27, 0, 255, /* Iy */
//  666   3, 3, 1, 0, 71, 27, 0, 255, /* Ib */
//  667   3, 3, 1, 0, 32, 27, 0, 255, /* Vr */
//  668   3, 3, 1, 0, 52, 27, 0, 255, /* Vy */
//  669   3, 3, 1, 0, 72, 27, 0, 255, /* Vb */
//  670   3, 3, 1, 0, 1, 29, 0, 255,  /* LS kWh */
//  671   3, 3, 1, 0, 5, 29, 0, 255,  /* LS kvarh -lag */
//  672   3, 3, 1, 0, 8, 29, 0, 255,  /* LS kvarh -lead */
//  673   3, 3, 1, 0, 9, 29, 0, 255,  /* LS kVAh */
//  674   /* 3,3,0,0,96,8,0,255, //poh in loadsurvey */
//  675   /* 3,3,1,0,14,27,0,255 //avg freq */
//  676 };
//  677 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  678 const us8 load_survey_parameter_cap_obj[]= 
_load_survey_parameter_cap_obj:
        DATA8
        DB 11, 8, 2, 0, 0, 1, 0, 0, 255, 3, 2, 1, 0, 31, 27, 0, 255, 3, 2, 1, 0
        DB 51, 27, 0, 255, 3, 2, 1, 0, 71, 27, 0, 255, 3, 2, 1, 0, 32, 27, 0
        DB 255, 3, 2, 1, 0, 52, 27, 0, 255, 3, 2, 1, 0, 72, 27, 0, 255, 3, 2, 1
        DB 0, 1, 29, 0, 255, 3, 2, 1, 0, 5, 29, 0, 255, 3, 2, 1, 0, 8, 29, 0
        DB 255, 3, 2, 1, 0, 9, 29, 0, 255, 0
//  679 {
//  680   11,
//  681   8, 2, 0, 0, 1, 0, 0, 255,   /* D&T */
//  682   3, 2, 1, 0, 31, 27, 0, 255, /* Ir */
//  683   3, 2, 1, 0, 51, 27, 0, 255, /* Iy */
//  684   3, 2, 1, 0, 71, 27, 0, 255, /* Ib */
//  685   3, 2, 1, 0, 32, 27, 0, 255, /* Vr */
//  686   3, 2, 1, 0, 52, 27, 0, 255, /* Vy */
//  687   3, 2, 1, 0, 72, 27, 0, 255, /* Vb */
//  688   3, 2, 1, 0, 1, 29, 0, 255,  /* Signed Active Power � kW */
//  689   3, 2, 1, 0, 5, 29, 0, 255,  /* kvar -lag */
//  690   3, 2, 1, 0, 8, 29, 0, 255,  /* kvar -lead */
//  691   3, 2, 1, 0, 9, 29, 0, 255,  /* apprent power kVA */
//  692   /*  3 ,2 ,0 ,0 ,96 ,8 ,0 ,255, //pom in loadsurvey */
//  693   /*  1,2,0,0,96,7,0,255, //power failure cnt */
//  694   /*  1,2,0,0,96,12,5,255,  //signal strength */
//  695   /*  3,2,1,0,14,27,0,255 //avg freq */
//  696   /*  7 ,255, 1,0,99,1,0,255,     // Sequence number */
//  697 };
//  698 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  699 const us8 blockload_survey_parameter_scaler_buffer[]= 
_blockload_survey_parameter_scaler_buffer:
        DATA8
        DB 10, 254, 33, 1, 254, 33, 1, 254, 33, 1, 254, 35, 2, 254, 35, 2, 254
        DB 35, 2, 0, 30, 3, 0, 32, 3, 0, 32, 3, 0, 31, 3, 0
//  700 {
//  701   10,
//  702   0xfe, 33, 1, /* Ir */
//  703   0xfe, 33, 1, /* IY */
//  704   0xfe, 33, 1, /* IB */
//  705   0xfe, 35, 2, /* Vr */
//  706   0xfe, 35, 2, /* VY */
//  707   0xfe, 35, 2, /* Vb */
//  708   0x00, 30, 3, /* kw */
//  709   0x00, 32, 3, /* kVar */
//  710   0x00, 32, 3, /* kVar */
//  711   0x00, 31, 3, /* kVA */
//  712   /* 0x00,6,0, //pow on hour */
//  713   /* 0xfd,44 //avg freq */
//  714 };
//  715 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  716 const us8 bill_profile_parameter_cap_obj[]= 
_bill_profile_parameter_cap_obj:
        DATA8
        DB 92, 3, 2, 0, 0, 0, 1, 2, 255, 3, 2, 1, 0, 13, 0, 0, 255, 3, 2, 1, 0
        DB 1, 8, 0, 255, 3, 2, 1, 0, 1, 8, 1, 255, 3, 2, 1, 0, 1, 8, 2, 255, 3
        DB 2, 1, 0, 1, 8, 3, 255, 3, 2, 1, 0, 1, 8, 4, 255, 3, 2, 1, 0, 1, 8, 5
        DB 255, 3, 2, 1, 0, 1, 8, 6, 255, 3, 2, 1, 0, 1, 8, 7, 255, 3, 2, 1, 0
        DB 1, 8, 8, 255, 3, 2, 1, 0, 5, 8, 0, 255, 3, 2, 1, 0, 8, 8, 0, 255, 3
        DB 2, 1, 0, 9, 8, 0, 255, 3, 2, 1, 0, 9, 8, 1, 255, 3, 2, 1, 0, 9, 8, 2
        DB 255, 3, 2, 1, 0, 9, 8, 3, 255, 3, 2, 1, 0, 9, 8, 4, 255, 3, 2, 1, 0
        DB 9, 8, 5, 255, 3, 2, 1, 0, 9, 8, 6, 255, 3, 2, 1, 0, 9, 8, 7, 255, 3
        DB 2, 1, 0, 9, 8, 8, 255, 4, 2, 1, 0, 1, 6, 0, 255, 4, 5, 1, 0, 1, 6, 0
        DB 255, 4, 2, 1, 0, 1, 6, 1, 255, 4, 5, 1, 0, 1, 6, 1, 255, 4, 2, 1, 0
        DB 1, 6, 2, 255, 4, 5, 1, 0, 1, 6, 2, 255, 4, 2, 1, 0, 1, 6, 3, 255, 4
        DB 5, 1, 0, 1, 6, 3, 255, 4, 2, 1, 0, 1, 6, 4, 255, 4, 5, 1, 0, 1, 6, 4
        DB 255, 4, 2, 1, 0, 1, 6, 5, 255, 4, 5, 1, 0, 1, 6, 5, 255, 4, 2, 1, 0
        DB 1, 6, 6, 255, 4, 5, 1, 0, 1, 6, 6, 255, 4, 2, 1, 0, 1, 6, 7, 255, 4
        DB 5, 1, 0, 1, 6, 7, 255, 4, 2, 1, 0, 1, 6, 8, 255, 4, 5, 1, 0, 1, 6, 8
        DB 255, 4, 2, 1, 0, 9, 6, 0, 255, 4, 5, 1, 0, 9, 6, 0, 255, 4, 2, 1, 0
        DB 9, 6, 1, 255, 4, 5, 1, 0, 9, 6, 1, 255, 4, 2, 1, 0, 9, 6, 2, 255, 4
        DB 5, 1, 0, 9, 6, 2, 255, 4, 2, 1, 0, 9, 6, 3, 255, 4, 5, 1, 0, 9, 6, 3
        DB 255, 4, 2, 1, 0, 9, 6, 4, 255, 4, 5, 1, 0, 9, 6, 4, 255, 4, 2, 1, 0
        DB 9, 6, 5, 255, 4, 5, 1, 0, 9, 6, 5, 255, 4, 2, 1, 0, 9, 6, 6, 255, 4
        DB 5, 1, 0, 9, 6, 6, 255, 4, 2, 1, 0, 9, 6, 7, 255, 4, 5, 1, 0, 9, 6, 7
        DB 255, 4, 2, 1, 0, 9, 6, 8, 255, 4, 5, 1, 0, 9, 6, 8, 255, 3, 2, 0, 0
        DB 94, 91, 13, 255, 4, 2, 1, 0, 21, 6, 0, 255, 4, 5, 1, 0, 21, 6, 0
        DB 255, 4, 2, 1, 0, 41, 6, 0, 255, 4, 5, 1, 0, 41, 6, 0, 255, 4, 2, 1
        DB 0, 61, 6, 0, 255, 4, 5, 1, 0, 61, 6, 0, 255, 3, 2, 1, 0, 128, 8, 0
        DB 255, 1, 2, 0, 0, 94, 91, 0, 255, 1, 2, 1, 0, 96, 128, 19, 255, 3, 2
        DB 1, 0, 5, 8, 1, 255, 3, 2, 1, 0, 5, 8, 2, 255, 3, 2, 1, 0, 5, 8, 3
        DB 255, 3, 2, 1, 0, 5, 8, 4, 255, 3, 2, 1, 0, 5, 8, 5, 255, 3, 2, 1, 0
        DB 5, 8, 6, 255, 3, 2, 1, 0, 5, 8, 7, 255, 3, 2, 1, 0, 5, 8, 8, 255, 3
        DB 2, 1, 0, 8, 8, 1, 255, 3, 2, 1, 0, 8, 8, 2, 255, 3, 2, 1, 0, 8, 8, 3
        DB 255, 3, 2, 1, 0, 8, 8, 4, 255, 3, 2, 1, 0, 8, 8, 5, 255, 3, 2, 1, 0
        DB 8, 8, 6, 255, 3, 2, 1, 0, 8, 8, 7, 255, 3, 2, 1, 0, 8, 8, 8, 255, 3
        DB 2, 1, 0, 13, 0, 1, 255, 3, 2, 1, 0, 13, 0, 2, 255, 3, 2, 1, 0, 13, 0
        DB 3, 255, 3, 2, 1, 0, 13, 0, 4, 255, 3, 2, 1, 0, 13, 0, 5, 255, 3, 2
        DB 1, 0, 13, 0, 6, 255, 3, 2, 1, 0, 13, 0, 7, 255, 3, 2, 1, 0, 13, 0, 8
        DB 255, 0
//  717 {
//  718   92,                        //62, //+24
//  719   3, 2, 0, 0, 0, 1, 2, 255,  /* D&T */
//  720   3, 2, 1, 0, 13, 0, 0, 255, /* pf */
//  721   3, 2, 1, 0, 1, 8, 0, 255,  /* kWh stamp */
//  722   3, 2, 1, 0, 1, 8, 1, 255,  /* kWh stamp z1 */
//  723   3, 2, 1, 0, 1, 8, 2, 255,  /* kVAh stamp z2 */
//  724   3, 2, 1, 0, 1, 8, 3, 255,  /* kWh stamp z3 */
//  725   3, 2, 1, 0, 1, 8, 4, 255,  /* kVAh stamp z4 */
//  726   3, 2, 1, 0, 1, 8, 5, 255,  /* kWh stamp z5 */
//  727   3, 2, 1, 0, 1, 8, 6, 255,  /* kVAh stamp z6 */
//  728   3, 2, 1, 0, 1, 8, 7, 255,  /* kWh stamp z7 */
//  729   3, 2, 1, 0, 1, 8, 8, 255,  /* kVAh stamp z8 */
//  730   3, 2, 1, 0, 5, 8, 0, 255,  /* kvarh lag */
//  731   3, 2, 1, 0, 8, 8, 0, 255,  /* kvarh lead */
//  732   3, 2, 1, 0, 9, 8, 0, 255,  /* kVAh stamp */
//  733   3, 2, 1, 0, 9, 8, 1, 255,  /* kWh stamp z1 */
//  734   3, 2, 1, 0, 9, 8, 2, 255,  /* kVAh stamp z2 */
//  735   3, 2, 1, 0, 9, 8, 3, 255,  /* kWh stamp z3 */
//  736   3, 2, 1, 0, 9, 8, 4, 255,  /* kVAh stamp z4 */
//  737   3, 2, 1, 0, 9, 8, 5, 255,  /* kWh stamp z5 */
//  738   3, 2, 1, 0, 9, 8, 6, 255,  /* kVAh stamp z6 */
//  739   3, 2, 1, 0, 9, 8, 7, 255,  /* kWh stamp z7 */
//  740   3, 2, 1, 0, 9, 8, 8, 255,  /* kVAh stamp z8 */
//  741   
//  742   /*	1,2,0,0,0,1,0,255,	// cumulative MD reset count */
//  743   4, 2, 1, 0, 1, 6, 0, 255,                                /* md kw */
//  744   4, 5, 1, 0, 1, 6, 0, 255,                                /* md kw D&T */
//  745   4, 2, 1, 0, 1, 6, 1, 255,                                /* md kw z1 */
//  746   4, 5, 1, 0, 1, 6, 1, 255,                                /* md D&T */
//  747   4, 2, 1, 0, 1, 6, 2, 255,                                /* md kw z2 */
//  748   4, 5, 1, 0, 1, 6, 2, 255,                                /* md kw */
//  749   4, 2, 1, 0, 1, 6, 3, 255,                                /* md kw z3 */
//  750   4, 5, 1, 0, 1, 6, 3, 255,                                /* md D&T */
//  751   4, 2, 1, 0, 1, 6, 4, 255,                                /* md kw z4 */
//  752   4, 5, 1, 0, 1, 6, 4, 255,                                /* md kw */
//  753   4, 2, 1, 0, 1, 6, 5, 255,                                /* md kw z5 */
//  754   4, 5, 1, 0, 1, 6, 5, 255,                                /* md D&T */
//  755   4, 2, 1, 0, 1, 6, 6, 255,                                /* md kw z6 */
//  756   4, 5, 1, 0, 1, 6, 6, 255,                                /* md kw */
//  757   4, 2, 1, 0, 1, 6, 7, 255,                                /* md kw z7 */
//  758   4, 5, 1, 0, 1, 6, 7, 255,                                /* md D&T */
//  759   4, 2, 1, 0, 1, 6, 8, 255,                                /* md kw z8 */
//  760   4, 5, 1, 0, 1, 6, 8, 255,                                /* md kw */
//  761   4, 2, 1, 0, 9, 6, 0, 255,                                /* md kva */
//  762   4, 5, 1, 0, 9, 6, 0, 255,                                /* md kva D&T */
//  763   4, 2, 1, 0, 9, 6, 1, 255,                                /* md kva z1 */
//  764   4, 5, 1, 0, 9, 6, 1, 255,                                /* md D&T */
//  765   4, 2, 1, 0, 9, 6, 2, 255,                                /* md kva z2 */
//  766   4, 5, 1, 0, 9, 6, 2, 255,                                /* md kva */
//  767   4, 2, 1, 0, 9, 6, 3, 255,                                /* md kva z3 */
//  768   4, 5, 1, 0, 9, 6, 3, 255,                                /* md D&T */
//  769   4, 2, 1, 0, 9, 6, 4, 255,                                /* md kva z4 */
//  770   4, 5, 1, 0, 9, 6, 4, 255,                                /* md kva */
//  771   4, 2, 1, 0, 9, 6, 5, 255,                                /* md kva z5 */
//  772   4, 5, 1, 0, 9, 6, 5, 255,                                /* md D&T */
//  773   4, 2, 1, 0, 9, 6, 6, 255,                                /* md kva z6 */
//  774   4, 5, 1, 0, 9, 6, 6, 255,                                /* md kva */
//  775   4, 2, 1, 0, 9, 6, 7, 255,                                /* md kva z7 */
//  776   4, 5, 1, 0, 9, 6, 7, 255,                                /* md D&T */
//  777   4, 2, 1, 0, 9, 6, 8, 255,                                /* md kva z8 */
//  778   4, 5, 1, 0, 9, 6, 8, 255,                                /* md kva */
//  779   3, 2, 0, 0, 94, 91, 13, 255,                             /* Bill power on duration */
//  780   
//  781   4, 2, 1, 0, 21, 6, 0, 255,                                /*r phase md kw */
//  782   4, 5, 1, 0, 21, 6, 0, 255,                                /* md kw D&T */
//  783   4, 2, 1, 0, 41, 6, 0, 255,                                /*y phase md kw */
//  784   4, 5, 1, 0, 41, 6, 0, 255,                                /* md kw D&T */
//  785   4, 2, 1, 0, 61, 6, 0, 255,                                /*b phase md kw */
//  786   4, 5, 1, 0, 61, 6, 0, 255,                                /* md kw D&T */
//  787   
//  788   3, 2, 1, 0, 128, 8, 0, 255,                              /* fundamental */
//  789   1, 2, 0, 0, 94, 91, 0, 255,                              /* Bill Tamper Count */
//  790   1, 2, 1, 0, 96, 128, 19, 255, /* md reset cause Count */ //count 0 start parameter 1 to before
//  791   
//  792   3, 2, 1, 0, 5, 8, 1, 255, /*kvarh lag z1*/
//  793   3, 2, 1, 0, 5, 8, 2, 255, /*kvarh lag z2*/
//  794   3, 2, 1, 0, 5, 8, 3, 255, /*kvarh lag z3*/
//  795   3, 2, 1, 0, 5, 8, 4, 255, /*kvarh lag z4*/
//  796   3, 2, 1, 0, 5, 8, 5, 255, /*kvarh lag z5*/
//  797   3, 2, 1, 0, 5, 8, 6, 255, /*kvarh lag z6*/
//  798   3, 2, 1, 0, 5, 8, 7, 255, /*kvarh lag z7*/
//  799   3, 2, 1, 0, 5, 8, 8, 255, /*kvarh lag z8*/
//  800   
//  801   3, 2, 1, 0, 8, 8, 1, 255, /*kvarh lead z1*/
//  802   3, 2, 1, 0, 8, 8, 2, 255, /*kvarh lead z2*/
//  803   3, 2, 1, 0, 8, 8, 3, 255, /*kvarh lead z3*/
//  804   3, 2, 1, 0, 8, 8, 4, 255, /*kvarh lead z4*/
//  805   3, 2, 1, 0, 8, 8, 5, 255, /*kvarh lead z5*/
//  806   3, 2, 1, 0, 8, 8, 6, 255, /*kvarh lead z6*/
//  807   3, 2, 1, 0, 8, 8, 7, 255, /*kvarh lag z7*/
//  808   3, 2, 1, 0, 8, 8, 8, 255, /*kvarh lag z8*/
//  809   
//  810   3, 2, 1, 0, 13, 0, 1, 255, /*zone PF z1*/
//  811   3, 2, 1, 0, 13, 0, 2, 255, /*zone PF z2*/
//  812   3, 2, 1, 0, 13, 0, 3, 255, /*zone PF z3*/
//  813   3, 2, 1, 0, 13, 0, 4, 255, /*zone PF z4*/
//  814   3, 2, 1, 0, 13, 0, 5, 255, /*zone PF z5*/
//  815   3, 2, 1, 0, 13, 0, 6, 255, /*zone PF z6*/
//  816   3, 2, 1, 0, 13, 0, 7, 255, /*zone PF z7*/
//  817   3, 2, 1, 0, 13, 0, 8, 255  /*zone PF z8*/
//  818 };
//  819 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  820 const us8 bill_profile_parameter_scaler_buffer[]= 
_bill_profile_parameter_scaler_buffer:
        DATA8
        DB 69, 0, 255, 0, 253, 255, 0, 0, 30, 3, 0, 30, 3, 0, 30, 3, 0, 30, 3
        DB 0, 30, 3, 0, 30, 3, 0, 30, 3, 0, 30, 3, 0, 30, 3, 0, 32, 3, 0, 32, 3
        DB 0, 31, 3, 0, 31, 3, 0, 31, 3, 0, 31, 3, 0, 31, 3, 0, 31, 3, 0, 31, 3
        DB 0, 31, 3, 0, 31, 3, 0, 27, 3, 0, 27, 3, 0, 27, 3, 0, 27, 3, 0, 27, 3
        DB 0, 27, 3, 0, 27, 3, 0, 27, 3, 0, 27, 3, 0, 28, 3, 0, 28, 3, 0, 28, 3
        DB 0, 28, 3, 0, 28, 3, 0, 28, 3, 0, 28, 3, 0, 28, 3, 0, 28, 3, 0, 6, 0
        DB 0, 27, 3, 0, 27, 3, 0, 27, 3, 0, 30, 3, 0, 32, 3, 0, 32, 3, 0, 32, 3
        DB 0, 32, 3, 0, 32, 3, 0, 32, 3, 0, 32, 3, 0, 32, 3, 0, 32, 3, 0, 32, 3
        DB 0, 32, 3, 0, 32, 3, 0, 32, 3, 0, 32, 3, 0, 32, 3, 0, 32, 3, 253, 255
        DB 0, 253, 255, 0, 253, 255, 0, 253, 255, 0, 253, 255, 0, 253, 255, 0
        DB 253, 255, 0, 253, 255, 0
//  821 {
//  822   69,
//  823   0x00,255,0,
//  824   0xfd, 255, 0,
//  825   0x00, 30, 3, /* Wh */
//  826   0x00, 30, 3, /* Wh z1 */
//  827   0x00, 30, 3, /* VAh z2 */
//  828   0x00, 30, 3, /* Wh z3 */
//  829   0x00, 30, 3, /* Wh z4 */
//  830   0x00, 30, 3, /* Wh z5 */
//  831   0x00, 30, 3, /* Wh z6 */
//  832   0x00, 30, 3, /* Wh z7 */
//  833   0x00, 30, 3, /* Wh z8 */
//  834   0x00, 32, 3, /* VArh lag */
//  835   0x00, 32, 3, /* VArh lag */
//  836   0x00, 31, 3, /* VAh */
//  837   0x00, 31, 3, /* VAh z1 */
//  838   0x00, 31, 3, /* VAh z2 */
//  839   0x00, 31, 3, /* VAh z3 */
//  840   0x00, 31, 3, /* VAh z4 */
//  841   0x00, 31, 3, /* VAh z5 */
//  842   0x00, 31, 3, /* VAh z6 */
//  843   0x00, 31, 3, /* VAh z7  */
//  844   0x00, 31, 3, /* VAh z8  */
//  845   0x00, 27, 3, /* W */
//  846   0x00, 27, 3, /* W z1 */
//  847   0x00, 27, 3, /* W z2 */
//  848   0x00, 27, 3, /* W z3 */
//  849   0x00, 27, 3, /* W z4 */
//  850   0x00, 27, 3, /* W z5 */
//  851   0x00, 27, 3, /* W z6 */
//  852   0x00, 27, 3, /* W z7 */
//  853   0x00, 27, 3, /* W z8 */
//  854   0x00, 28, 3, /* va */
//  855   0x00, 28, 3, /* va z1*/
//  856   0x00, 28, 3, /* va z2 */
//  857   0x00, 28, 3, /* va z3*/
//  858   0x00, 28, 3, /* va z4 */
//  859   0x00, 28, 3, /* va z5*/
//  860   0x00, 28, 3, /* va z6 */
//  861   0x00, 28, 3, /* va z7 */
//  862   0x00, 28, 3, /* va z8 */
//  863   0x00, 6, 0,  /*POH */
//  864   0x00, 27, 3, /* r phase MD KW */
//  865   0x00, 27, 3, /* y phase MD KW  */
//  866   0x00, 27, 3, /* b phase MD KW  */
//  867   0x00, 30, 3, /*fundamental*/
//  868   
//  869   0x00, 32, 3, /* VArh lag */ //41
//  870   0x00, 32, 3,                /* VArh lag */
//  871   0x00, 32, 3,                /* VArh lag */
//  872   0x00, 32, 3,                /* VArh lag */
//  873   0x00, 32, 3,                /* VArh lag */
//  874   0x00, 32, 3,                /* VArh lag */
//  875   0x00, 32, 3,                /* VArh lag */
//  876   0x00, 32, 3,                /* VArh lag */
//  877   
//  878   0x00, 32, 3, /* VArh lag */
//  879   0x00, 32, 3, /* VArh lag */
//  880   0x00, 32, 3, /* VArh lag */
//  881   0x00, 32, 3, /* VArh lag */
//  882   0x00, 32, 3, /* VArh lag */
//  883   0x00, 32, 3, /* VArh lag */
//  884   0x00, 32, 3, /* VArh lag */
//  885   0x00, 32, 3, /* VArh lag */
//  886   
//  887   0xfd, 0xff, 0, /* rph pf */
//  888   0xfd, 0xff, 0, /* rph pf */
//  889   0xfd, 0xff, 0, /* rph pf */
//  890   0xfd, 0xff, 0, /* rph pf */
//  891   0xfd, 0xff, 0, /* rph pf */
//  892   0xfd, 0xff, 0, /* rph pf */
//  893   0xfd, 0xff, 0, /* rph pf */
//  894   0xfd, 0xff, 0, /* rph pf */
//  895 };
//  896 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  897 const us8 bill_profile_parameter_scaler_cap_obj[]= 
_bill_profile_parameter_scaler_cap_obj:
        DATA8
        DB 69, 3, 3, 0, 0, 0, 1, 2, 255, 3, 3, 1, 0, 13, 0, 0, 255, 3, 3, 1, 0
        DB 1, 8, 0, 255, 3, 3, 1, 0, 1, 8, 1, 255, 3, 3, 1, 0, 1, 8, 2, 255, 3
        DB 3, 1, 0, 1, 8, 3, 255, 3, 3, 1, 0, 1, 8, 4, 255, 3, 3, 1, 0, 1, 8, 5
        DB 255, 3, 3, 1, 0, 1, 8, 6, 255, 3, 3, 1, 0, 1, 8, 7, 255, 3, 3, 1, 0
        DB 1, 8, 8, 255, 3, 3, 1, 0, 5, 8, 0, 255, 3, 3, 1, 0, 8, 8, 0, 255, 3
        DB 3, 1, 0, 9, 8, 0, 255, 3, 3, 1, 0, 9, 8, 1, 255, 3, 3, 1, 0, 9, 8, 2
        DB 255, 3, 3, 1, 0, 9, 8, 3, 255, 3, 3, 1, 0, 9, 8, 4, 255, 3, 3, 1, 0
        DB 9, 8, 5, 255, 3, 3, 1, 0, 9, 8, 6, 255, 3, 3, 1, 0, 9, 8, 7, 255, 3
        DB 3, 1, 0, 9, 8, 8, 255, 4, 3, 1, 0, 1, 6, 0, 255, 4, 3, 1, 0, 1, 6, 1
        DB 255, 4, 3, 1, 0, 1, 6, 2, 255, 4, 3, 1, 0, 1, 6, 3, 255, 4, 3, 1, 0
        DB 1, 6, 4, 255, 4, 3, 1, 0, 1, 6, 5, 255, 4, 3, 1, 0, 1, 6, 6, 255, 4
        DB 3, 1, 0, 1, 6, 7, 255, 4, 3, 1, 0, 1, 6, 8, 255, 4, 3, 1, 0, 9, 6, 0
        DB 255, 4, 3, 1, 0, 9, 6, 1, 255, 4, 3, 1, 0, 9, 6, 2, 255, 4, 3, 1, 0
        DB 9, 6, 3, 255, 4, 3, 1, 0, 9, 6, 4, 255, 4, 3, 1, 0, 9, 6, 5, 255, 4
        DB 3, 1, 0, 9, 6, 6, 255, 4, 3, 1, 0, 9, 6, 7, 255, 4, 3, 1, 0, 9, 6, 8
        DB 255, 3, 3, 0, 0, 94, 91, 13, 255, 4, 3, 1, 0, 21, 6, 0, 255, 4, 3, 1
        DB 0, 41, 6, 0, 255, 4, 3, 1, 0, 61, 6, 0, 255, 3, 3, 1, 0, 128, 8, 0
        DB 255, 3, 3, 1, 0, 5, 8, 1, 255, 3, 3, 1, 0, 5, 8, 2, 255, 3, 3, 1, 0
        DB 5, 8, 3, 255, 3, 3, 1, 0, 5, 8, 4, 255, 3, 3, 1, 0, 5, 8, 5, 255, 3
        DB 3, 1, 0, 5, 8, 6, 255, 3, 3, 1, 0, 5, 8, 7, 255, 3, 3, 1, 0, 5, 8, 8
        DB 255, 3, 3, 1, 0, 8, 8, 1, 255, 3, 3, 1, 0, 8, 8, 2, 255, 3, 3, 1, 0
        DB 8, 8, 3, 255, 3, 3, 1, 0, 8, 8, 4, 255, 3, 3, 1, 0, 8, 8, 5, 255, 3
        DB 3, 1, 0, 8, 8, 6, 255, 3, 3, 1, 0, 8, 8, 7, 255, 3, 3, 1, 0, 8, 8, 8
        DB 255, 3, 3, 1, 0, 13, 0, 1, 255, 3, 3, 1, 0, 13, 0, 2, 255, 3, 3, 1
        DB 0, 13, 0, 3, 255, 3, 3, 1, 0, 13, 0, 4, 255, 3, 3, 1, 0, 13, 0, 5
        DB 255, 3, 3, 1, 0, 13, 0, 6, 255, 3, 3, 1, 0, 13, 0, 7, 255, 3, 3, 1
        DB 0, 13, 0, 8, 255, 0
//  898 {
//  899   69,                          //41+24,
//  900   3, 3, 0, 0, 0, 1, 2, 255,  /* D&T *///41+24,
//  901   3, 3, 1, 0, 13, 0, 0, 255,   /* Pf */
//  902   3, 3, 1, 0, 1, 8, 0, 255,    /* kWh stamp */
//  903   3, 3, 1, 0, 1, 8, 1, 255,    /* kWh Z1 */
//  904   3, 3, 1, 0, 1, 8, 2, 255,    /* kWh Z2 */
//  905   3, 3, 1, 0, 1, 8, 3, 255,    /* kWh Z3 */
//  906   3, 3, 1, 0, 1, 8, 4, 255,    /* kWh Z4 */
//  907   3, 3, 1, 0, 1, 8, 5, 255,    /* kWh Z5 */
//  908   3, 3, 1, 0, 1, 8, 6, 255,    /* kWh Z6 */
//  909   3, 3, 1, 0, 1, 8, 7, 255,    /* kWh Z7 */
//  910   3, 3, 1, 0, 1, 8, 8, 255,    /* kWh Z8 */
//  911   3, 3, 1, 0, 5, 8, 0, 255,    /* kVArh lag */
//  912   3, 3, 1, 0, 8, 8, 0, 255,    /* kVArh lead */
//  913   3, 3, 1, 0, 9, 8, 0, 255,    /* kVA */
//  914   3, 3, 1, 0, 9, 8, 1, 255,    /* kvah Z1 */
//  915   3, 3, 1, 0, 9, 8, 2, 255,    /* kvah Z2 */
//  916   3, 3, 1, 0, 9, 8, 3, 255,    /* kvah Z3 */
//  917   3, 3, 1, 0, 9, 8, 4, 255,    /* kvah Z4 */
//  918   3, 3, 1, 0, 9, 8, 5, 255,    /* kvah Z5 */
//  919   3, 3, 1, 0, 9, 8, 6, 255,    /* kvah Z6 */
//  920   3, 3, 1, 0, 9, 8, 7, 255,    /* kvah Z7 */
//  921   3, 3, 1, 0, 9, 8, 8, 255,    /* kvah Z8 */
//  922   4, 3, 1, 0, 1, 6, 0, 255,    /* MD kW */
//  923   4, 3, 1, 0, 1, 6, 1, 255,    /* MD kW Z1 */
//  924   4, 3, 1, 0, 1, 6, 2, 255,    /* MD kW Z2 */
//  925   4, 3, 1, 0, 1, 6, 3, 255,    /* MD kW Z3 */
//  926   4, 3, 1, 0, 1, 6, 4, 255,    /* MD kW Z4 */
//  927   4, 3, 1, 0, 1, 6, 5, 255,    /* MD kW Z5 */
//  928   4, 3, 1, 0, 1, 6, 6, 255,    /* MD kW Z6 */
//  929   4, 3, 1, 0, 1, 6, 7, 255,    /* MD kW Z7 */
//  930   4, 3, 1, 0, 1, 6, 8, 255,    /* MD kW Z8 */
//  931   4, 3, 1, 0, 9, 6, 0, 255,    /* MD kVA */
//  932   4, 3, 1, 0, 9, 6, 1, 255,    /* MD kVA Z1 */
//  933   4, 3, 1, 0, 9, 6, 2, 255,    /* MD kVA Z2 */
//  934   4, 3, 1, 0, 9, 6, 3, 255,    /* MD kVA Z3 */
//  935   4, 3, 1, 0, 9, 6, 4, 255,    /* MD kVA Z4 */
//  936   4, 3, 1, 0, 9, 6, 5, 255,    /* MD kVA Z5 */
//  937   4, 3, 1, 0, 9, 6, 6, 255,    /* MD kVA Z6 */
//  938   4, 3, 1, 0, 9, 6, 7, 255,    /* MD kVA Z7 */
//  939   4, 3, 1, 0, 9, 6, 8, 255,    /* MD kVA Z8 */
//  940   3, 3, 0, 0, 94, 91, 13, 255, /*BP POnH */
//  941   
//  942   4, 3, 1, 0, 21, 6, 0, 255,    /* r phase MD kW */
//  943   4, 3, 1, 0, 41, 6, 0, 255,    /* y phase MD kW */
//  944   4, 3, 1, 0, 61, 6, 0, 255,    /* b phase MD kW */
//  945   3, 3, 1, 0, 128, 8, 0, 255,  /* fundamental */
//  946   
//  947   3, 3, 1, 0, 5, 8, 1, 255, /*kvarh lag z1*/
//  948   3, 3, 1, 0, 5, 8, 2, 255, /*kvarh lag z2*/
//  949   3, 3, 1, 0, 5, 8, 3, 255, /*kvarh lag z3*/
//  950   3, 3, 1, 0, 5, 8, 4, 255, /*kvarh lag z4*/
//  951   3, 3, 1, 0, 5, 8, 5, 255, /*kvarh lag z5*/
//  952   3, 3, 1, 0, 5, 8, 6, 255, /*kvarh lag z6*/
//  953   3, 3, 1, 0, 5, 8, 7, 255, /*kvarh lag z7*/
//  954   3, 3, 1, 0, 5, 8, 8, 255, /*kvarh lag z8*/
//  955   
//  956   3, 3, 1, 0, 8, 8, 1, 255, /*kvarh lead z1*/
//  957   3, 3, 1, 0, 8, 8, 2, 255, /*kvarh lead z2*/
//  958   3, 3, 1, 0, 8, 8, 3, 255, /*kvarh lead z3*/
//  959   3, 3, 1, 0, 8, 8, 4, 255, /*kvarh lead z4*/
//  960   3, 3, 1, 0, 8, 8, 5, 255, /*kvarh lead z5*/
//  961   3, 3, 1, 0, 8, 8, 6, 255, /*kvarh lead z6*/
//  962   3, 3, 1, 0, 8, 8, 7, 255, /*kvarh lag z7*/
//  963   3, 3, 1, 0, 8, 8, 8, 255, /*kvarh lag z8*/
//  964   
//  965   3, 3, 1, 0, 13, 0, 1, 255, /*zone PF z1*/
//  966   3, 3, 1, 0, 13, 0, 2, 255, /*zone PF z2*/
//  967   3, 3, 1, 0, 13, 0, 3, 255, /*zone PF z3*/
//  968   3, 3, 1, 0, 13, 0, 4, 255, /*zone PF z4*/
//  969   3, 3, 1, 0, 13, 0, 5, 255, /*zone PF z5*/
//  970   3, 3, 1, 0, 13, 0, 6, 255, /*zone PF z6*/
//  971   3, 3, 1, 0, 13, 0, 7, 255, /*zone PF z7*/
//  972   3, 3, 1, 0, 13, 0, 8, 255  /*zone PF z8*/
//  973     
//  974 };
//  975 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  976 const us8 event_log_profile_scaler_buffer[]= 
_event_log_profile_scaler_buffer:
        DATA8
        DB 11, 253, 33, 1, 253, 33, 1, 253, 33, 1, 254, 35, 2, 254, 35, 2, 254
        DB 35, 2, 253, 255, 0, 253, 255, 0, 253, 255, 0, 0, 30, 3, 0, 31, 3
//  977 {
//  978   11,
//  979   0xfd, 33, 1,   /* Ir */
//  980   0xfd, 33, 1,   /* IY */
//  981   0xfd, 33, 1,   /* Ib */
//  982   0xfe, 35, 2,   /* Vr      //Scalar, Unit,Scalar Adder(1-scalar_cur, 2-scalar_vol, 3scalar_energy) */
//  983   0xfe, 35, 2,   /* VY */
//  984   0xfe, 35, 2,   /* VB */
//  985   0xfd, 0xff, 0, /* pfr */
//  986   0xfd, 0xff, 0, /* pfy */
//  987   0xfd, 0xff, 0, /* pfb */
//  988   0x00, 30, 3,   /* kwh */
//  989   0x00, 31, 3    /* kwh */
//  990 };
//  991 

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  992 const us8 name_plate_profile_capture_obj[]= 
_name_plate_profile_capture_obj:
        DATA8
        DB 9, 1, 2, 0, 0, 96, 1, 0, 255, 1, 2, 0, 0, 96, 1, 1, 255, 1, 2, 1, 0
        DB 0, 2, 0, 255, 1, 2, 0, 0, 94, 91, 9, 255, 1, 2, 0, 0, 94, 91, 11
        DB 255, 1, 2, 0, 0, 94, 91, 12, 255, 1, 2, 1, 0, 0, 4, 2, 255, 1, 2, 1
        DB 0, 0, 4, 3, 255, 1, 2, 0, 0, 96, 1, 4, 255, 0

        SECTION `.data`:DATA:REORDER:NOROOT(1)
        SECTION_GROUP __Constant_3e8_0
__Constant_3e8_0:
        DATA32
        DD 1'000, 0

        SECTION `.data`:DATA:REORDER:NOROOT(1)
        SECTION_GROUP __Constant_0_0
__Constant_0_0:
        DATA32
        DD 0, 0

        SECTION `.data`:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0
??isdatevalid_0:
        DATA32
        DW        1
        DATA16
        DW        12
        DW        LWRD(??isdatevalid_4)
        DW        LWRD(??isdatevalid_1)
        DW        LWRD(??isdatevalid_3)
        DW        LWRD(??isdatevalid_1)
        DW        LWRD(??isdatevalid_2)
        DW        LWRD(??isdatevalid_1)
        DW        LWRD(??isdatevalid_2)
        DW        LWRD(??isdatevalid_1)
        DW        LWRD(??isdatevalid_1)
        DW        LWRD(??isdatevalid_2)
        DW        LWRD(??isdatevalid_1)
        DW        LWRD(??isdatevalid_2)
        DW        LWRD(??isdatevalid_1)

        SECTION `.data`:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0
??vBlock_transfer_list_0:
        DATA16
        DW        22
        DW        LWRD(??vBlock_transfer_list_24)
        DW        LWRD(??vBlock_transfer_list_3)
        DW        LWRD(??vBlock_transfer_list_1)
        DW        LWRD(??vBlock_transfer_list_1)
        DW        LWRD(??vBlock_transfer_list_1)
        DW        LWRD(??vBlock_transfer_list_1)
        DW        LWRD(??vBlock_transfer_list_22)
        DW        LWRD(??vBlock_transfer_list_6)
        DW        LWRD(??vBlock_transfer_list_7)
        DW        LWRD(??vBlock_transfer_list_8)
        DW        LWRD(??vBlock_transfer_list_10)
        DW        LWRD(??vBlock_transfer_list_11)
        DW        LWRD(??vBlock_transfer_list_12)
        DW        LWRD(??vBlock_transfer_list_13)
        DW        LWRD(??vBlock_transfer_list_14)
        DW        LWRD(??vBlock_transfer_list_15)
        DW        LWRD(??vBlock_transfer_list_16)
        DW        LWRD(??vBlock_transfer_list_17)
        DW        LWRD(??vBlock_transfer_list_18)
        DW        LWRD(??vBlock_transfer_list_19)
        DW        LWRD(??vBlock_transfer_list_4)
        DW        LWRD(??vBlock_transfer_list_20)
        DW        LWRD(??vBlock_transfer_list_21)
        DATA32
        DD        851968
        DD        2621440
        DD        2621441
        DD        2621442
        DD        2621443
        DD        6183690
        DD        6513152
        DD        6513153
        DD        6513154
        DD        6513155
        DD        6513156
        DD        6513157
        DD        6513251
        DD        22960896
        DD        22960899
        DD        22960900
        DD        22960901
        DD        22960902
        DD        22960903
        DD        23200000
        DD        23265536
        DD        23265792

        SECTION `.data`:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0
??data_dec_0:
        DATA16
        DW        29
        DW        LWRD(??data_dec_77)
        DW        LWRD(??data_dec_31)
        DW        LWRD(??data_dec_37)
        DW        LWRD(??data_dec_43)
        DW        LWRD(??data_dec_44)
        DW        LWRD(??data_dec_48)
        DW        LWRD(??data_dec_24)
        DW        LWRD(??data_dec_25)
        DW        LWRD(??data_dec_26)
        DW        LWRD(??data_dec_27)
        DW        LWRD(??data_dec_29)
        DW        LWRD(??data_dec_30)
        DW        LWRD(??data_dec_52)
        DW        LWRD(??data_dec_53)
        DW        LWRD(??data_dec_54)
        DW        LWRD(??data_dec_56)
        DW        LWRD(??data_dec_57)
        DW        LWRD(??data_dec_60)
        DW        LWRD(??data_dec_61)
        DW        LWRD(??data_dec_63)
        DW        LWRD(??data_dec_64)
        DW        LWRD(??data_dec_65)
        DW        LWRD(??data_dec_67)
        DW        LWRD(??data_dec_68)
        DW        LWRD(??data_dec_71)
        DW        LWRD(??data_dec_73)
        DW        LWRD(??data_dec_75)
        DW        LWRD(??data_dec_76)
        DW        LWRD(??data_dec_46)
        DW        LWRD(??data_dec_47)
        DATA32
        DD        65536
        DD        851968
        DD        983040
        DD        2621442
        DD        6291712
        DD        16778242
        DD        16778243
        DD        16779264
        DD        16779268
        DD        16779270
        DD        16780038
        DD        23101440
        DD        23101441
        DD        23101442
        DD        23101443
        DD        23101444
        DD        23101445
        DD        23101446
        DD        23101447
        DD        23101448
        DD        23101449
        DD        23101451
        DD        23101452
        DD        23101453
        DD        23101458
        DD        23101462
        DD        23101490
        DD        23101500
        DD        23101502

        SECTION `.data`:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0
??class_sel_0:
        DATA16
        DW        18
        DW        LWRD(??dlms_reset_data_817)
        DW        LWRD(??class_sel_1)
        DW        LWRD(??class_sel_2)
        DW        LWRD(??class_sel_3)
        DW        LWRD(??class_sel_4)
        DW        LWRD(??class_sel_5)
        DW        LWRD(??class_sel_6)
        DW        LWRD(??class_sel_7)
        DW        LWRD(??class_sel_8)
        DW        LWRD(??class_sel_9)
        DW        LWRD(??class_sel_11)
        DW        LWRD(??class_sel_12)
        DW        LWRD(??class_sel_14)
        DW        LWRD(??class_sel_10)
        DW        LWRD(??class_sel_13)
        DW        LWRD(??class_sel_15)
        DW        LWRD(??class_sel_16)
        DW        LWRD(??class_sel_17)
        DW        LWRD(??class_sel_18)
        DATA24
        DW        1
        DW        3
        DW        4
        DW        5
        DW        6
        DW        7
        DW        8
        DW        9
        DW        11
        DW        15
        DW        17
        DW        19
        DW        20
        DW        22
        DW        23
        DW        27
        DW        28
        DW        63

        SECTION `.data`:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0
??access_rights_0:
        DATA32
        DW        0
        DATA16
        DW        11
        DW        LWRD(??dlms_reset_data_843)
        DW        LWRD(??access_rights_2)
        DW        LWRD(??access_rights_3)
        DW        LWRD(??access_rights_4)
        DW        LWRD(??access_rights_5)
        DW        LWRD(??access_rights_6)
        DW        LWRD(??access_rights_7)
        DW        LWRD(??access_rights_8)
        DW        LWRD(??access_rights_9)
        DW        LWRD(??access_rights_10)
        DW        LWRD(??access_rights_11)
        DW        LWRD(??access_rights_12)
//  993 {
//  994   9,
//  995   1, 2, 0, 0, 96, 1, 0, 255,   /* meter serial no */
//  996   1, 2, 0, 0, 96, 1, 1, 255,   /* manufacturer name */
//  997   1, 2, 1, 0, 0, 2, 0, 255,    /* firmware version for meter */
//  998   1, 2, 0, 0, 94, 91, 9, 255,  /* meter type */
//  999   1, 2, 0, 0, 94, 91, 11, 255, /* category */
// 1000   1, 2, 0, 0, 94, 91, 12, 255, /* current rating 1,0,0,4,2,255 */
// 1001   1, 2, 1, 0, 0, 4, 2, 255,
// 1002   1, 2, 1, 0, 0, 4, 3, 255,
// 1003   1, 2, 0, 0, 96, 1, 4, 255, /* meter year of manufacture */
// 1004 };
// 1005 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function _info_l
          CFI NoCalls
        CODE
// 1006 void info_l()
// 1007 {
_info_l:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 1008   k = k + 4;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x4           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 1009 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock0
        ; ------------------------------------- Block: 9 cycles
        ; ------------------------------------- Total: 9 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function _info_l6
          CFI NoCalls
        CODE
// 1010 void info_l6()
// 1011 {
_info_l6:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 1012   k = k + 6;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x6           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 1013 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock1
        ; ------------------------------------- Block: 9 cycles
        ; ------------------------------------- Total: 9 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function _info_l5
          CFI NoCalls
        CODE
// 1014 void info_l5()
// 1015 {
_info_l5:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 1016   k = k + 5;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x5           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 1017 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock2
        ; ------------------------------------- Block: 9 cycles
        ; ------------------------------------- Total: 9 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function _fill_0b
          CFI NoCalls
        CODE
// 1018 void fill_0b()
// 1019 {
_fill_0b:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 1020   info[k++]= 0x01; /* data result */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x1            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1021   info[k++]= 0x0B; /* object Unavailable */                  
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xB            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1022 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock3
        ; ------------------------------------- Block: 16 cycles
        ; ------------------------------------- Total: 16 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function _fill_0d
          CFI NoCalls
        CODE
// 1023 void fill_0d()
// 1024 {
_fill_0d:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 1025   info[k++]= 0x01; /* data result */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x1            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1026   info[k++]= 0x0D; /* object Unavailable */                  
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xD            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1027 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock4
        ; ------------------------------------- Block: 16 cycles
        ; ------------------------------------- Total: 16 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function _array
          CFI NoCalls
        CODE
// 1028 void array(us8 len, us8 flag)
// 1029 {
_array:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 1030   if(flag == 1)
        XCH       A, X               ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        BNZ       ??dlms_reset_data_0  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 1031   {
// 1032     info[k++]= 0x00;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       D, #0x0            ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        ; ------------------------------------- Block: 7 cycles
// 1033   }
// 1034   info[k++]= 0x01;
??dlms_reset_data_0:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       D, #0x1            ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1035   info[k++]= len;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1036 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock5
        ; ------------------------------------- Block: 17 cycles
        ; ------------------------------------- Total: 31 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function _structure
          CFI NoCalls
        CODE
// 1037 void structure(us8 len)
// 1038 {
_structure:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 1039   info[k++]= 0x02;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       X, #0x2            ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1040   info[k++]= len;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1041 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock6
        ; ------------------------------------- Block: 17 cycles
        ; ------------------------------------- Total: 17 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function _octet_s
          CFI NoCalls
        CODE
// 1042 void octet_s(us8 len, us8 flag)
// 1043 {
_octet_s:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 1044   if(flag == 1)
        XCH       A, X               ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        BNZ       ??dlms_reset_data_1  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 1045   {
// 1046     info[k++]= 0;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       D, #0x0            ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        ; ------------------------------------- Block: 7 cycles
// 1047   }
// 1048   info[k++]= 0x09;
??dlms_reset_data_1:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       D, #0x9            ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1049   info[k++]= len;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1050 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock7
        ; ------------------------------------- Block: 17 cycles
        ; ------------------------------------- Total: 31 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock8 Using cfiCommon1
          CFI Function _obiscode
        CODE
// 1051 void obiscode(us8 a, us8 b, us8 c, us8 d, us8 e, us8 f)
// 1052 { 
_obiscode:
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+10
        ; Auto size: 6
// 1053   octet_s(0x06, 0);
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0x6            ;; 1 cycle
          CFI FunCall _octet_s
        CALL      _octet_s           ;; 3 cycles
// 1054   info[k]= a;     /* val-A */
        MOV       A, [SP+0x05]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
// 1055   info[k + 1]= b; /* val-B */
        MOV       A, [SP+0x04]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+1)[BC], A   ;; 1 cycle
// 1056   info[k + 2]= c; /* val-C */
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+2)[BC], A   ;; 1 cycle
// 1057   info[k + 3]= d; /* val-D */
        MOV       A, [SP+0x03]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
// 1058   info[k + 4]= e; /* val-E */
        MOV       A, [SP]            ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+4)[BC], A   ;; 1 cycle
// 1059   info[k + 5]= f; /* val-E */
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+5)[BC], A   ;; 1 cycle
// 1060   info_l6();
          CFI FunCall _info_l6
        CALL      _info_l6           ;; 3 cycles
// 1061 }
        ADDW      SP, #0x6           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock8
        ; ------------------------------------- Block: 36 cycles
        ; ------------------------------------- Total: 36 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function _long_unsign
          CFI NoCalls
        CODE
// 1062 void long_unsign(void) /* note: used only when first byte is 0x00 */
// 1063 {
_long_unsign:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 1064   info[k++]= 0x12;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x12           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1065   info[k++]= 0x00;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1066 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock9
        ; ------------------------------------- Block: 16 cycles
        ; ------------------------------------- Total: 16 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock10 Using cfiCommon2
          CFI Function _val_4byt
        CODE
// 1067 void val_4byt(us8 a, us8 b, us8 c, us8 d)
// 1068 { 
_val_4byt:
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        ; Auto size: 4
// 1069   info[k]= 0x06;  /* double_long_unsigned */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x6            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
// 1070   info[k + 1]= a; /* byte-1 */
        MOV       A, [SP+0x03]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+1)[BC], A   ;; 1 cycle
// 1071   info[k + 2]= b; /* byte-2 */
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+2)[BC], A   ;; 1 cycle
// 1072   info[k + 3]= c; /* byte-3 */
        MOV       A, [SP]            ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
// 1073   info[k + 4]= d; /* byte-4 */
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+4)[BC], A   ;; 1 cycle
// 1074   info_l5();
          CFI FunCall _info_l5
        CALL      _info_l5           ;; 3 cycles
// 1075 }
        ADDW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock10
        ; ------------------------------------- Block: 27 cycles
        ; ------------------------------------- Total: 27 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock11 Using cfiCommon2
          CFI Function _val_4byt2
        CODE
// 1076 void val_4byt2(us8 a, us8 b, us8 c, us8 d)
// 1077 {
_val_4byt2:
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        ; Auto size: 4
// 1078   info[k++]= 0x00;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1079   val_4byt(a, b, c, d);
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x03]       ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 1080 }
        ADDW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock11
        ; ------------------------------------- Block: 24 cycles
        ; ------------------------------------- Total: 24 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock12 Using cfiCommon2
          CFI Function _val_signed_4byt
        CODE
// 1081 void val_signed_4byt(us8 a,us8 b,us8 c,us8 d)
// 1082 { 
_val_signed_4byt:
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        ; Auto size: 4
// 1083   info[k]=0x05; /* double_long_signed */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x5            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
// 1084   info[k+1]=a;  /* byte-1 */
        MOV       A, [SP+0x03]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+1)[BC], A   ;; 1 cycle
// 1085   info[k+2]=b;  /* byte-2 */
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+2)[BC], A   ;; 1 cycle
// 1086   info[k+3]=c;  /* byte-3 */
        MOV       A, [SP]            ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
// 1087   info[k+4]=d;  /* byte-4 */
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+4)[BC], A   ;; 1 cycle
// 1088   info_l5();
          CFI FunCall _info_l5
        CALL      _info_l5           ;; 3 cycles
// 1089 }
        ADDW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock12
        ; ------------------------------------- Block: 27 cycles
        ; ------------------------------------- Total: 27 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock13 Using cfiCommon2
          CFI Function _val_signed_4byt2
        CODE
// 1090 void val_signed_4byt2(us8 a,us8 b,us8 c,us8 d)
// 1091 {
_val_signed_4byt2:
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        ; Auto size: 4
// 1092   info[k++]=0x00;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1093   val_signed_4byt(a,b,c,d);
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x03]       ;; 1 cycle
          CFI FunCall _val_signed_4byt
        CALL      _val_signed_4byt   ;; 3 cycles
// 1094 }
        ADDW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock13
        ; ------------------------------------- Block: 24 cycles
        ; ------------------------------------- Total: 24 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function _unsigned8
          CFI NoCalls
        CODE
// 1095 void unsigned8(us8 value)
// 1096 {
_unsigned8:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 1097   info[k++]= 0x00;  /* data result */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       X, #0x0            ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1098   info[k++]= 0x11;  /* object Unavailable */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       X, #0x11           ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1099   info[k++]= value; /* object Unavailable */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1100 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock14
        ; ------------------------------------- Block: 24 cycles
        ; ------------------------------------- Total: 24 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function _val_1byt
          CFI NoCalls
        CODE
// 1101 void val_1byt(us8 value, us8 flag)
// 1102 {
_val_1byt:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 1103   if(flag == 1)
        XCH       A, X               ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        BNZ       ??dlms_reset_data_2  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 1104     info[k++]= 0x00; //data result
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       D, #0x0            ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        ; ------------------------------------- Block: 7 cycles
// 1105   info[k++]= 0x11;     //object avaliable
??dlms_reset_data_2:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       D, #0x11           ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1106   info[k++]= value;    //object avaliable
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1107 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock15
        ; ------------------------------------- Block: 17 cycles
        ; ------------------------------------- Total: 31 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function _val_2byt
          CFI NoCalls
        CODE
// 1108 void val_2byt(us8 a, us8 b)
// 1109 {
_val_2byt:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 1110   info[k++]= 0x12; /* integer */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       D, #0x12           ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1111   info[k++]= a;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1112   info[k++]= b;
        MOVW      BC, N:_k           ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1113 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock16
        ; ------------------------------------- Block: 23 cycles
        ; ------------------------------------- Total: 23 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function _val_2byt2
        CODE
// 1114 void val_2byt2(us8 a, us8 b)
// 1115 {
_val_2byt2:
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        ; Auto size: 2
// 1116   info[k++]= 0x00;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1117   val_2byt(a, b);
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
// 1118 }
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock17
        ; ------------------------------------- Block: 19 cycles
        ; ------------------------------------- Total: 19 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function _bit_string
          CFI NoCalls
        CODE
// 1119 void bit_string(us8 len, us8 flag)
// 1120 {
_bit_string:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 1121   if(flag)
        CMP0      X                  ;; 1 cycle
        BZ        ??dlms_reset_data_3  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 1122   {
// 1123     info[k++]= 0x00;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       D, #0x0            ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        ; ------------------------------------- Block: 7 cycles
// 1124   }
// 1125   info[k++]= 0x04; /* bit string */
??dlms_reset_data_3:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       D, #0x4            ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1126   info[k++]= len;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1127 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock18
        ; ------------------------------------- Block: 17 cycles
        ; ------------------------------------- Total: 29 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function _enum_d
          CFI NoCalls
        CODE
// 1128 void enum_d(us8 len)
// 1129 {
_enum_d:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 1130   info[k++]= 0x16;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       X, #0x16           ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1131   info[k++]= len;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1132 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock19
        ; ------------------------------------- Block: 17 cycles
        ; ------------------------------------- Total: 17 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function _enum_d2
          CFI NoCalls
        CODE
// 1133 void enum_d2(us8 len)
// 1134 {
_enum_d2:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 1135   info[k++]= 0x00;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       X, #0x0            ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1136   info[k++]= 0x16;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       X, #0x16           ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1137   info[k++]= len;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1138 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock20
        ; ------------------------------------- Block: 24 cycles
        ; ------------------------------------- Total: 24 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function _signed_integer
        CODE
// 1139 void signed_integer(uint16_t su16_int)
// 1140 {
_signed_integer:
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        ; Auto size: 2
// 1141   long_int= su16_int;
        MOVW      AX, [SP]           ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_long_int, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_long_int+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 1142   int_into_char_array(long_int,char_array);
        MOVW      BC, #LWRD(_char_array)  ;; 1 cycle
        MOVW      HL, S:_long_int+2  ;; 1 cycle
        MOVW      DE, S:_long_int    ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
          CFI FunCall _int_into_char_array
        CALL      _int_into_char_array  ;; 3 cycles
// 1143   info[k++]=0x10;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x10           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1144   info[k++]=char_array[0];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1145   info[k++]=char_array[1];
        MOV       A, N:_char_array+1  ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1146 }
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock21
        ; ------------------------------------- Block: 36 cycles
        ; ------------------------------------- Total: 36 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function _integer8
          CFI NoCalls
        CODE
// 1147 void integer8(s8 value)
// 1148 {
_integer8:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 1149   info[k++]= 0x0F;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       X, #0xF            ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1150   info[k++]= value;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1151 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock22
        ; ------------------------------------- Block: 17 cycles
        ; ------------------------------------- Total: 17 cycles
// 1152 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock23 Using cfiCommon2
          CFI Function _sca_unit
        CODE
// 1153 void sca_unit(s8 a, us8 b, us8 add_zero)
// 1154 { 
_sca_unit:
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        ; Auto size: 4
// 1155   if(add_zero == 1)
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_4  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 1156   {
// 1157     info[k++]= 0x00;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        ; ------------------------------------- Block: 5 cycles
// 1158   }
// 1159   structure(0x02);
??dlms_reset_data_4:
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 1160   integer8(a);
        MOV       A, [SP+0x03]       ;; 1 cycle
          CFI FunCall _integer8
        CALL      _integer8          ;; 3 cycles
// 1161   enum_d(b);
        MOV       A, [SP+0x02]       ;; 1 cycle
          CFI FunCall _enum_d
        CALL      _enum_d            ;; 3 cycles
// 1162 }
        ADDW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock23
        ; ------------------------------------- Block: 19 cycles
        ; ------------------------------------- Total: 32 cycles
// 1163 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function _bcd_to_hex
        CODE
// 1164 unsigned char bcd_to_hex(unsigned char temp)
// 1165 {
_bcd_to_hex:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
        MOV       B, A               ;; 1 cycle
// 1166   return ((temp % 0x10) + ((temp / 0x10) * 0x0a));
        MOV       A, B               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       X, #0x10           ;; 1 cycle
        MOV       A, B               ;; 1 cycle
          CFI FunCall ?UC_DIV_L01
        CALL      N:?UC_DIV_L01      ;; 3 cycles
        MOV       C, A               ;; 1 cycle
        MOV       X, #0xA            ;; 1 cycle
        MOV       A, C               ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        MOV       X, #0x10           ;; 1 cycle
        MOV       A, B               ;; 1 cycle
          CFI FunCall ?UC_MOD_L01
        CALL      N:?UC_MOD_L01      ;; 3 cycles
        MOV       B, A               ;; 1 cycle
        MOV       A, B               ;; 1 cycle
        ADD       A, C               ;; 1 cycle
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock24
        ; ------------------------------------- Block: 28 cycles
        ; ------------------------------------- Total: 28 cycles
// 1167 }
// 1168 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function _hex_to_bcd
        CODE
// 1169 unsigned char hex_to_bcd(unsigned char temp)
// 1170 {
_hex_to_bcd:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
        MOV       B, A               ;; 1 cycle
// 1171   return ((temp / 10) * 16 + (temp % 10));
        MOV       A, B               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       X, #0xA            ;; 1 cycle
        MOV       A, B               ;; 1 cycle
          CFI FunCall ?UC_DIV_L01
        CALL      N:?UC_DIV_L01      ;; 3 cycles
        MOV       C, A               ;; 1 cycle
        MOV       X, #0x10           ;; 1 cycle
        MOV       A, C               ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        MOV       X, #0xA            ;; 1 cycle
        MOV       A, B               ;; 1 cycle
          CFI FunCall ?UC_MOD_L01
        CALL      N:?UC_MOD_L01      ;; 3 cycles
        MOV       B, A               ;; 1 cycle
        MOV       A, C               ;; 1 cycle
        ADD       A, B               ;; 1 cycle
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock25
        ; ------------------------------------- Block: 28 cycles
        ; ------------------------------------- Total: 28 cycles
// 1172 }
// 1173 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function _hex_to_bin
          CFI NoCalls
        CODE
// 1174 unsigned char hex_to_bin(unsigned char hex_val)
// 1175 {
_hex_to_bin:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
        MOV       X, A               ;; 1 cycle
// 1176   unsigned char bin_val= 0;
        MOV       B, #0x0            ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 1177   while(hex_val >= 0x10)
??hex_to_bin_0:
        MOV       A, X               ;; 1 cycle
        CMP       A, #0x10           ;; 1 cycle
        BC        ??dlms_reset_data_5  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 1178   {
// 1179     bin_val= bin_val + 10;
        MOV       A, B               ;; 1 cycle
        ADD       A, #0xA            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
// 1180     hex_val= hex_val - 0x10;
        MOV       A, X               ;; 1 cycle
        ADD       A, #0xF0           ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        BR        S:??hex_to_bin_0   ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 1181   }
// 1182   bin_val= bin_val + hex_val;
??dlms_reset_data_5:
        MOV       A, B               ;; 1 cycle
        ADD       A, X               ;; 1 cycle
// 1183   return (bin_val);
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock26
        ; ------------------------------------- Block: 8 cycles
        ; ------------------------------------- Total: 25 cycles
// 1184 }
// 1185 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function _read_config_parameters
        CODE
// 1186 void read_config_parameters(void)
// 1187 {
_read_config_parameters:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 1188   /* ***1st page*********************************************** */
// 1189   eprom_read(READ_CONFIG_PARA_ADD,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x6400        ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 1190   
// 1191   Push_to_auto_time= (uint16_t)(opr_data[0] * 256) + opr_data[1]; /* seconds */
        MOV       X, N:_opr_data     ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOV       C, N:_opr_data+1   ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        ADDW      AX, BC             ;; 1 cycle
        MOVW      N:_Push_to_auto_time, AX  ;; 1 cycle
// 1192   if((Push_to_auto_time == 0) || (Push_to_auto_time > 2000))
        CLRW      AX                 ;; 1 cycle
        CMPW      AX, N:_Push_to_auto_time  ;; 1 cycle
        BZ        ??dlms_reset_data_6  ;; 4 cycles
        ; ------------------------------------- Block: 22 cycles
        MOVW      AX, N:_Push_to_auto_time  ;; 1 cycle
        CMPW      AX, #0x7D1         ;; 1 cycle
        BC        ??dlms_reset_data_7  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 1193   {
// 1194     Push_to_auto_time= 10;
??dlms_reset_data_6:
        MOVW      AX, #0xA           ;; 1 cycle
        MOVW      N:_Push_to_auto_time, AX  ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 1195   }
// 1196   lcd_back_to_mode0_time[1] = Push_to_auto_time;
??dlms_reset_data_7:
        MOVW      AX, N:_Push_to_auto_time  ;; 1 cycle
        MOVW      N:_lcd_back_to_mode0_time+2, AX  ;; 1 cycle
// 1197   
// 1198   
// 1199   Parameter_Lock_Time= (uint16_t)(opr_data[2] * 256) + opr_data[3]; /* minutes */
        MOV       X, N:_opr_data+2   ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOV       C, N:_opr_data+3   ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        ADDW      AX, BC             ;; 1 cycle
        MOVW      N:_Parameter_Lock_Time, AX  ;; 1 cycle
// 1200   if(Parameter_Lock_Time == 0)
        CLRW      AX                 ;; 1 cycle
        CMPW      AX, N:_Parameter_Lock_Time  ;; 1 cycle
        BNZ       ??dlms_reset_data_8  ;; 4 cycles
        ; ------------------------------------- Block: 17 cycles
// 1201   {
// 1202     Parameter_Lock_Time= 30;
        MOVW      AX, #0x1E          ;; 1 cycle
        MOVW      N:_Parameter_Lock_Time, AX  ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 1203   }
// 1204   
// 1205   /* Implementation pending as per requirement */
// 1206   Battery_suspended_feature= opr_data[4];
??dlms_reset_data_8:
        MOV       A, N:_opr_data+4   ;; 1 cycle
        MOV       N:_Battery_suspended_feature, A  ;; 1 cycle
// 1207   No_of_battery_operation_before_suspension= opr_data[5];
        MOV       A, N:_opr_data+5   ;; 1 cycle
        MOV       N:_No_of_battery_operation_before_suspension, A  ;; 1 cycle
// 1208   if(No_of_battery_operation_before_suspension == 0)
        CMP0      N:_No_of_battery_operation_before_suspension  ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
// 1209   {
// 1210     No_of_battery_operation_before_suspension= 3;
        MOV       N:_No_of_battery_operation_before_suspension, #0x3  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1211   }
// 1212   
// 1213   Battery_time_configured= opr_data[6]; /* minutes */
??read_config_parameters_0:
        MOV       A, N:_opr_data+6   ;; 1 cycle
        MOV       N:_Battery_time_configured, A  ;; 1 cycle
// 1214   if((Battery_time_configured == 0) || (Battery_time_configured > 8))
        CMP0      N:_Battery_time_configured  ;; 1 cycle
        BZ        ??dlms_reset_data_9  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOV       A, N:_Battery_time_configured  ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        SKC                          ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 1215   {
// 1216     Battery_time_configured = 1;
??dlms_reset_data_9:
        MOV       N:_Battery_time_configured, #0x1  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1217   }
// 1218   
// 1219   decimal.voltage = opr_data[7];
??read_config_parameters_1:
        MOV       A, N:_opr_data+7   ;; 1 cycle
        MOV       N:_decimal, A      ;; 1 cycle
// 1220   if(decimal.voltage > DEC_VOL_MAX)   
        MOV       A, N:_decimal      ;; 1 cycle
        CMP       A, #0x3            ;; 1 cycle
        SKC                          ;; 1 cycle
        ; ------------------------------------- Block: 5 cycles
// 1221   {     
// 1222     decimal.voltage = DEC_VOL_DEF;    
        MOV       N:_decimal, #0x1   ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1223   }
// 1224   
// 1225   decimal.current = opr_data[8];
??read_config_parameters_2:
        MOV       A, N:_opr_data+8   ;; 1 cycle
        MOV       N:_decimal+1, A    ;; 1 cycle
// 1226   if(decimal.current > DEC_CURR_MAX)   
        MOV       A, N:_decimal+1    ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        SKC                          ;; 1 cycle
        ; ------------------------------------- Block: 5 cycles
// 1227   {     
// 1228     decimal.current = DEC_CURR_DEF;    
        MOV       N:_decimal+1, #0x2  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1229   }
// 1230   
// 1231   decimal.power = opr_data[9];
??read_config_parameters_3:
        MOV       A, N:_opr_data+9   ;; 1 cycle
        MOV       N:_decimal+2, A    ;; 1 cycle
// 1232   if(decimal.power > DEC_POWER_MAX)     
        MOV       A, N:_decimal+2    ;; 1 cycle
        CMP       A, #0x5            ;; 1 cycle
        SKC                          ;; 1 cycle
        ; ------------------------------------- Block: 5 cycles
// 1233   {     
// 1234     decimal.power = DEC_POWER_DEF;    
        MOV       N:_decimal+2, #0x3  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1235   }
// 1236   
// 1237   decimal.pf = opr_data[10];
??read_config_parameters_4:
        MOV       A, N:_opr_data+10  ;; 1 cycle
        MOV       N:_decimal+3, A    ;; 1 cycle
// 1238   if(decimal.pf > DEC_PF_MAX)        
        MOV       A, N:_decimal+3    ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        SKC                          ;; 1 cycle
        ; ------------------------------------- Block: 5 cycles
// 1239   {     
// 1240     decimal.pf = DEC_PF_DEF;    
        MOV       N:_decimal+3, #0x3  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1241   }
// 1242   
// 1243   decimal.freq = opr_data[11];
??read_config_parameters_5:
        MOV       A, N:_opr_data+11  ;; 1 cycle
        MOV       N:_decimal+4, A    ;; 1 cycle
// 1244   if(decimal.freq > DEC_FREQ_MAX)   
        MOV       A, N:_decimal+4    ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        SKC                          ;; 1 cycle
        ; ------------------------------------- Block: 5 cycles
// 1245   {     
// 1246     decimal.freq = DEC_FREQ_DEF;    
        MOV       N:_decimal+4, #0x3  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1247   }
// 1248   
// 1249   decimal.demand = opr_data[12];
??read_config_parameters_6:
        MOV       A, N:_opr_data+12  ;; 1 cycle
        MOV       N:_decimal+5, A    ;; 1 cycle
// 1250   if(decimal.demand > DEC_DEMAND_MAX)   
        MOV       A, N:_decimal+5    ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        SKC                          ;; 1 cycle
        ; ------------------------------------- Block: 5 cycles
// 1251   {     
// 1252     decimal.demand = DEC_DEMAND_DEF;   
        MOV       N:_decimal+5, #0x2  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1253   }
// 1254   
// 1255   decimal.energy_hr = opr_data[13];
??read_config_parameters_7:
        MOV       A, N:_opr_data+13  ;; 1 cycle
        MOV       N:_decimal+6, A    ;; 1 cycle
// 1256   if(decimal.energy_hr > DEC_ENERGY_HR_MAX)   
        MOV       A, N:_decimal+6    ;; 1 cycle
        CMP       A, #0x6            ;; 1 cycle
        SKC                          ;; 1 cycle
        ; ------------------------------------- Block: 5 cycles
// 1257   {     
// 1258     decimal.energy_hr = DEC_ENERGY_HR_DEF;   
        MOV       N:_decimal+6, #0x5  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1259   }
// 1260   
// 1261   decimal.energy = opr_data[14];
??read_config_parameters_8:
        MOV       A, N:_opr_data+14  ;; 1 cycle
        MOV       N:_decimal+7, A    ;; 1 cycle
// 1262   if(decimal.energy > DEC_ENERGY_MAX)  
        MOV       A, N:_decimal+7    ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        SKC                          ;; 1 cycle
        ; ------------------------------------- Block: 5 cycles
// 1263   {    
// 1264     decimal.energy = DEC_ENERGY_DEF;   
        MOV       N:_decimal+7, #0x3  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1265   }
// 1266   
// 1267   decimal.angle = DEC_ANGLE_DEF;   
??read_config_parameters_9:
        MOV       N:_decimal+8, #0x2  ;; 1 cycle
// 1268   
// 1269   /* ****2nd page********************************************** */
// 1270   eprom_read((READ_CONFIG_PARA_ADD+0x10),0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x6410        ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 1271   
// 1272   /* peding, as per requirement development */
// 1273   Energy_decimal_push= opr_data[0];
        MOV       A, N:_opr_data     ;; 1 cycle
        MOV       N:_Energy_decimal_push, A  ;; 1 cycle
// 1274   if(Energy_decimal_push > 1)
        MOV       A, N:_Energy_decimal_push  ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        SKC                          ;; 1 cycle
        ; ------------------------------------- Block: 13 cycles
// 1275   {
// 1276     Energy_decimal_push= 1;
        MOV       N:_Energy_decimal_push, #0x1  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1277   }
// 1278   
// 1279   /* Pending, development as per requirement */
// 1280   TC_open_display_lock= opr_data[1];
??read_config_parameters_10:
        MOV       A, N:_opr_data+1   ;; 1 cycle
        MOV       N:_TC_open_display_lock, A  ;; 1 cycle
// 1281   if(TC_open_display_lock > 4)
        MOV       A, N:_TC_open_display_lock  ;; 1 cycle
        CMP       A, #0x5            ;; 1 cycle
        SKC                          ;; 1 cycle
        ; ------------------------------------- Block: 5 cycles
// 1282   {
// 1283     TC_open_display_lock = 0;
        MOV       N:_TC_open_display_lock, #0x0  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1284   }
// 1285   TC_status_display_type= opr_data[2];
??read_config_parameters_11:
        MOV       A, N:_opr_data+2   ;; 1 cycle
        MOV       N:_TC_status_display_type, A  ;; 1 cycle
// 1286   if(TC_status_display_type > 5)
        MOV       A, N:_TC_status_display_type  ;; 1 cycle
        CMP       A, #0x6            ;; 1 cycle
        SKC                          ;; 1 cycle
        ; ------------------------------------- Block: 5 cycles
// 1287   {
// 1288     TC_status_display_type= 0;
        MOV       N:_TC_status_display_type, #0x0  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1289   }
// 1290   
// 1291   MAX_BILL= opr_data[3];
??read_config_parameters_12:
        MOV       A, N:_opr_data+3   ;; 1 cycle
        MOV       N:_MAX_BILL, A     ;; 1 cycle
// 1292   if((MAX_BILL == 0) || (MAX_BILL > 12))
        CMP0      N:_MAX_BILL        ;; 1 cycle
        BZ        ??dlms_reset_data_10  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOV       A, N:_MAX_BILL     ;; 1 cycle
        CMP       A, #0xD            ;; 1 cycle
        SKC                          ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 1293   {
// 1294     MAX_BILL= 12;
??dlms_reset_data_10:
        MOV       N:_MAX_BILL, #0xC  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1295   }
// 1296   
// 1297   /* modification REQUIRED */
// 1298   COMP1_TPR_EVENT= opr_data[4];
??read_config_parameters_13:
        MOV       A, N:_opr_data+4   ;; 1 cycle
        MOV       N:_COMP1_TPR_EVENT, A  ;; 1 cycle
// 1299   if((COMP1_TPR_EVENT > 240) || (COMP1_TPR_EVENT == 0))
        MOV       A, N:_COMP1_TPR_EVENT  ;; 1 cycle
        CMP       A, #0xF1           ;; 1 cycle
        BNC       ??dlms_reset_data_11  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        CMP0      N:_COMP1_TPR_EVENT  ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 1300   {
// 1301     COMP1_TPR_EVENT= 80;
??dlms_reset_data_11:
        MOV       N:_COMP1_TPR_EVENT, #0x50  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1302   }
// 1303   
// 1304   COMP2_TPR_EVENT= opr_data[5];
??read_config_parameters_14:
        MOV       A, N:_opr_data+5   ;; 1 cycle
        MOV       N:_COMP2_TPR_EVENT, A  ;; 1 cycle
// 1305   if((COMP2_TPR_EVENT > 240) || (COMP2_TPR_EVENT == 0))
        MOV       A, N:_COMP2_TPR_EVENT  ;; 1 cycle
        CMP       A, #0xF1           ;; 1 cycle
        BNC       ??dlms_reset_data_12  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        CMP0      N:_COMP2_TPR_EVENT  ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 1306   {
// 1307     COMP2_TPR_EVENT= 80;
??dlms_reset_data_12:
        MOV       N:_COMP2_TPR_EVENT, #0x50  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1308   }
// 1309   
// 1310   COMP3_TPR_EVENT= opr_data[6];
??read_config_parameters_15:
        MOV       A, N:_opr_data+6   ;; 1 cycle
        MOV       N:_COMP3_TPR_EVENT, A  ;; 1 cycle
// 1311   if((COMP3_TPR_EVENT > 120) || (COMP3_TPR_EVENT == 0))
        MOV       A, N:_COMP3_TPR_EVENT  ;; 1 cycle
        CMP       A, #0x79           ;; 1 cycle
        BNC       ??dlms_reset_data_13  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        CMP0      N:_COMP3_TPR_EVENT  ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 1312   {
// 1313     COMP3_TPR_EVENT= 40;
??dlms_reset_data_13:
        MOV       N:_COMP3_TPR_EVENT, #0x28  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1314   }
// 1315   
// 1316   /* Pending, as per requirement */
// 1317   Blank_display_required= opr_data[7];
??read_config_parameters_16:
        MOV       A, N:_opr_data+7   ;; 1 cycle
        MOV       N:_Blank_display_required, A  ;; 1 cycle
// 1318   Blank_display_time= (uint16_t)(opr_data[8] * 256) + opr_data[9];
        MOV       X, N:_opr_data+8   ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOV       C, N:_opr_data+9   ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        ADDW      AX, BC             ;; 1 cycle
        MOVW      N:_Blank_display_time, AX  ;; 1 cycle
// 1319   if((Blank_display_time == 0) || (Blank_display_time > 600))
        CLRW      AX                 ;; 1 cycle
        CMPW      AX, N:_Blank_display_time  ;; 1 cycle
        BZ        ??dlms_reset_data_14  ;; 4 cycles
        ; ------------------------------------- Block: 17 cycles
        MOVW      AX, N:_Blank_display_time  ;; 1 cycle
        CMPW      AX, #0x259         ;; 1 cycle
        BC        ??dlms_reset_data_15  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 1320   {
// 1321     Blank_display_time= 10;
??dlms_reset_data_14:
        MOVW      AX, #0xA           ;; 1 cycle
        MOVW      N:_Blank_display_time, AX  ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 1322   }
// 1323   
// 1324   TOD_energy_config= opr_data[10];
??dlms_reset_data_15:
        MOV       A, N:_opr_data+10  ;; 1 cycle
        MOV       N:_TOD_energy_config, A  ;; 1 cycle
// 1325   
// 1326   /* Pending, as per requirement */
// 1327   Energy_Decimal_differ_in_modes= opr_data[11];
        MOV       A, N:_opr_data+11  ;; 1 cycle
        MOV       N:_Energy_Decimal_differ_in_modes, A  ;; 1 cycle
// 1328   
// 1329   /* reserved for magnet_PF=opr_data[12] //use in 1Phase meter */
// 1330   Manufacturer= opr_data[13];
        MOV       A, N:_opr_data+13  ;; 1 cycle
        MOV       N:_Manufacturer, A  ;; 1 cycle
// 1331   
// 1332   if(opr_data[14] == 0 || opr_data[14] == 1)
        CMP0      N:_opr_data+14     ;; 1 cycle
        BZ        ??dlms_reset_data_16  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
        CMP       N:_opr_data+14, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_17  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 1333   {
// 1334     DISPLAY_NAVIGATION_TYPE = opr_data[14];
??dlms_reset_data_16:
        MOV       A, N:_opr_data+14  ;; 1 cycle
        MOV       N:_DISPLAY_NAVIGATION_TYPE, A  ;; 1 cycle
        BR        S:??dlms_reset_data_18  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 1335   }
// 1336   else 
// 1337   {
// 1338     DISPLAY_NAVIGATION_TYPE = 1;
??dlms_reset_data_17:
        MOV       N:_DISPLAY_NAVIGATION_TYPE, #0x1  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1339   }
// 1340   /* ****3rd page********************************************** */
// 1341   eprom_read((READ_CONFIG_PARA_ADD+0x20),0,PAGE_1,AUTO_CALC);
??dlms_reset_data_18:
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x6420        ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 1342   
// 1343   //////    Ref_Voltage= (uint16_t)((uint16_t)opr_data[0] * 256 + opr_data[1]) * 10; /* voltage 2dec */
// 1344   //////    Basic_Current= (uint16_t)((uint16_t)opr_data[2] * 256 + opr_data[3]); /* current 2dec */
// 1345   //////    Max_Current= (uint16_t)((uint16_t)opr_data[4] * 256 + opr_data[5]);   /* current 2dec */
// 1346   
// 1347   KVAH_SNAP= opr_data[6] & 0x01; /*0=required, 1= not required*/
        MOVW      HL, #LWRD(_opr_data+6)  ;; 1 cycle
        MOV       A, [HL]            ;; 1 cycle
        AND       A, #0x1            ;; 1 cycle
        MOV       N:_KVAH_SNAP, A    ;; 1 cycle
// 1348   
// 1349   if(opr_data[6] == 0xFF)
        CMP       N:_opr_data+6, #0xFF  ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 13 cycles
// 1350   {
// 1351     KVAH_SNAP= 0;
        MOV       N:_KVAH_SNAP, #0x0  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1352   }
// 1353   if(opr_data[7] & 0x01)
??read_config_parameters_17:
        MOVW      HL, #LWRD(_opr_data+7)  ;; 1 cycle
        MOV1      CY, [HL].0         ;; 1 cycle
        CLRB      A                  ;; 1 cycle
        SKC                          ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
        ONEB      A                  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??read_config_parameters_18:
        MOV       N:_FUENERGY_REQ, A  ;; 1 cycle
// 1354   {
// 1355     FUENERGY_REQ= 0; //OPR11[6]; /*0=required, 1= not required*/
// 1356   }
// 1357   else
// 1358   {
// 1359     FUENERGY_REQ= 1;
// 1360   }
// 1361   
// 1362   if(opr_data[7] & 0x02)
        MOVW      HL, #LWRD(_opr_data+7)  ;; 1 cycle
        MOV1      CY, [HL].1         ;; 1 cycle
        CLRB      A                  ;; 1 cycle
        SKC                          ;; 1 cycle
        ; ------------------------------------- Block: 5 cycles
        ONEB      A                  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??read_config_parameters_19:
        MOV       N:_BILLTPR_CNT, A  ;; 1 cycle
// 1363   {
// 1364     BILLTPR_CNT= 0;
// 1365   }
// 1366   else
// 1367   {
// 1368     BILLTPR_CNT= 1;
// 1369   }
// 1370   if(opr_data[7] & 0x04)
        MOVW      HL, #LWRD(_opr_data+7)  ;; 1 cycle
        MOV1      CY, [HL].2         ;; 1 cycle
        CLRB      A                  ;; 1 cycle
        SKC                          ;; 1 cycle
        ; ------------------------------------- Block: 5 cycles
        ONEB      A                  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??read_config_parameters_20:
        MOV       N:_MDRESET_TYPE_CONFIG, A  ;; 1 cycle
// 1371   {
// 1372     MDRESET_TYPE_CONFIG= 0;
// 1373   }
// 1374   else
// 1375   {
// 1376     MDRESET_TYPE_CONFIG= 1;
// 1377   }
// 1378   
// 1379   if(opr_data[8] & 0x01)
        MOVW      HL, #LWRD(_opr_data+8)  ;; 1 cycle
        MOV1      CY, [HL].0         ;; 1 cycle
        CLRB      A                  ;; 1 cycle
        SKC                          ;; 1 cycle
        ; ------------------------------------- Block: 5 cycles
        ONEB      A                  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??read_config_parameters_21:
        MOV       N:_DEFRAUD_REQ, A  ;; 1 cycle
// 1380   {
// 1381     DEFRAUD_REQ= 0;
// 1382   }
// 1383   else
// 1384   {
// 1385     DEFRAUD_REQ= 1;
// 1386   }
// 1387   
// 1388   if(opr_data[9] & 0x01)
        MOVW      HL, #LWRD(_opr_data+9)  ;; 1 cycle
        MOV1      CY, [HL].0         ;; 1 cycle
        CLRB      A                  ;; 1 cycle
        ROLC      A, 0x1             ;; 1 cycle
        MOV       N:_D_KVARH_REQ, A  ;; 1 cycle
// 1389   {
// 1390     D_KVARH_REQ= 1;
// 1391   }
// 1392   else
// 1393   {
// 1394     D_KVARH_REQ= 0;
// 1395   }
// 1396   
// 1397   if(opr_data[9] == 0xFF)
        CMP       N:_opr_data+9, #0xFF  ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 8 cycles
// 1398   {
// 1399     D_KVARH_REQ= 0;
        MOV       N:_D_KVARH_REQ, #0x0  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1400   }
// 1401   
// 1402   /* Pending, already implemented in the code */
// 1403   if(opr_data[10] & 0x01)
??read_config_parameters_22:
        MOVW      HL, #LWRD(_opr_data+10)  ;; 1 cycle
        MOV1      CY, [HL].0         ;; 1 cycle
        CLRB      A                  ;; 1 cycle
        SKC                          ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
        ONEB      A                  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??read_config_parameters_23:
        MOV       N:_SHIFT_DIGIT, A  ;; 1 cycle
// 1404   {
// 1405     SHIFT_DIGIT= 0;
// 1406   }
// 1407   else
// 1408   {
// 1409     SHIFT_DIGIT= 1;
// 1410   }
// 1411   
// 1412   TOP_RESTORE_REQ= opr_data[11] & 0x01;
        MOVW      HL, #LWRD(_opr_data+11)  ;; 1 cycle
        MOV       A, [HL]            ;; 1 cycle
        AND       A, #0x1            ;; 1 cycle
        MOV       N:_TOP_RESTORE_REQ, A  ;; 1 cycle
// 1413   if(opr_data[11] == 0xFF)
        CMP       N:_opr_data+11, #0xFF  ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 7 cycles
// 1414   {
// 1415     TOP_RESTORE_REQ = 1;
        MOV       N:_TOP_RESTORE_REQ, #0x1  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1416   }
// 1417   
// 1418   CUM_MAX_DEMAND= opr_data[12] & 0x01;
??read_config_parameters_24:
        MOVW      HL, #LWRD(_opr_data+12)  ;; 1 cycle
        MOV       A, [HL]            ;; 1 cycle
        AND       A, #0x1            ;; 1 cycle
        MOV       N:_CUM_MAX_DEMAND, A  ;; 1 cycle
// 1419   if(opr_data[12] == 0xFF)
        CMP       N:_opr_data+12, #0xFF  ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
// 1420   {
// 1421     CUM_MAX_DEMAND= 0;
        MOV       N:_CUM_MAX_DEMAND, #0x0  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1422   }
// 1423   
// 1424   /* Pending, As per requirement */
// 1425   if(opr_data[13] & 0x01)
??read_config_parameters_25:
        MOVW      HL, #LWRD(_opr_data+13)  ;; 1 cycle
        MOV1      CY, [HL].0         ;; 1 cycle
        CLRB      A                  ;; 1 cycle
        ROLC      A, 0x1             ;; 1 cycle
        MOV       N:_neutral_metering_enable_f, A  ;; 1 cycle
// 1426   {
// 1427     neutral_metering_enable_f= 1;
// 1428   }
// 1429   else
// 1430   {
// 1431     neutral_metering_enable_f= 0;
// 1432   }
// 1433   
// 1434   /* Pending, As per requirement */
// 1435   if(opr_data[13] & 0x02)
        MOVW      HL, #LWRD(_opr_data+13)  ;; 1 cycle
        MOV1      CY, [HL].1         ;; 1 cycle
        CLRB      A                  ;; 1 cycle
        ROLC      A, 0x1             ;; 1 cycle
        MOV       N:_PHASE_MISS_METERING_ENABLE, A  ;; 1 cycle
// 1436   {
// 1437     PHASE_MISS_METERING_ENABLE= 1;
// 1438   }
// 1439   else
// 1440   {
// 1441     PHASE_MISS_METERING_ENABLE= 0;
// 1442   }
// 1443   
// 1444   /* Pending, As per requirement */
// 1445   if(opr_data[13] & 0x08)
        MOVW      HL, #LWRD(_opr_data+13)  ;; 1 cycle
        MOV1      CY, [HL].3         ;; 1 cycle
        CLRB      A                  ;; 1 cycle
        ROLC      A, 0x1             ;; 1 cycle
        MOV       N:_Two_wire_metering_enable, A  ;; 1 cycle
// 1446   {
// 1447     Two_wire_metering_enable= 1;
// 1448   }
// 1449   else
// 1450   {
// 1451     Two_wire_metering_enable= 0;
// 1452   }
// 1453   
// 1454   if(opr_data[13] == 0xFF)
        CMP       N:_opr_data+13, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_19  ;; 4 cycles
        ; ------------------------------------- Block: 20 cycles
// 1455   {
// 1456     neutral_metering_enable_f= 0;
        MOV       N:_neutral_metering_enable_f, #0x0  ;; 1 cycle
// 1457     PHASE_MISS_METERING_ENABLE= 0;
        MOV       N:_PHASE_MISS_METERING_ENABLE, #0x0  ;; 1 cycle
// 1458     Two_wire_metering_enable= 0;
        MOV       N:_Two_wire_metering_enable, #0x0  ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 1459   }
// 1460   
// 1461   /* Pending, As per requirement */
// 1462   md_reset_disable= opr_data[14];
??dlms_reset_data_19:
        MOV       A, N:_opr_data+14  ;; 1 cycle
        MOV       N:_md_reset_disable, A  ;; 1 cycle
// 1463   if(opr_data[14] > 0x01)
        MOV       A, N:_opr_data+14  ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        SKC                          ;; 1 cycle
        ; ------------------------------------- Block: 5 cycles
// 1464   {
// 1465     md_reset_disable= 0;
        MOV       N:_md_reset_disable, #0x0  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1466   }
// 1467   
// 1468   /* Pending, to be added after analysis */
// 1469   //////    if((Ref_Voltage == 24000) || (Ref_Voltage == 23000) || (Ref_Voltage == 22000))
// 1470   //////    {
// 1471   //////        nop();
// 1472   //////    }
// 1473   //////    else
// 1474   //////    {
// 1475   //////        Ref_Voltage= 24000;
// 1476   //////    }
// 1477   //////
// 1478   //////    if(5000 == Basic_Current || 10000 == Basic_Current || 20000 == Basic_Current || 50000 == Basic_Current)
// 1479   //////    {
// 1480   //////        nop();
// 1481   //////    }
// 1482   //////    else
// 1483   //////    {
// 1484   //////        Basic_Current= 1000;
// 1485   //////    }
// 1486   //////
// 1487   //////    if(30000 == Max_Current || 40000 == Max_Current || 60000 == Max_Current || 80000 == Max_Current || 100000 == Max_Current)
// 1488   //////    {
// 1489   //////        nop();
// 1490   //////    }
// 1491   //////    else
// 1492   //////    {
// 1493   //////        Max_Current= 4000;
// 1494   //////    }
// 1495 }
??read_config_parameters_26:
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock27
        ; ------------------------------------- Block: 6 cycles
        ; ------------------------------------- Total: 333 cycles
// 1496 
// 1497 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock28 Using cfiCommon2
          CFI Function _fill_disp
        CODE
// 1498 void fill_disp(uint16_t addrr, uint8_t num, uint8_t auto_push)
// 1499 {
_fill_disp:
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        ; Auto size: 6
        SUBW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+10
// 1500   
// 1501   uint8_t tem, tem1;
// 1502   k= k + 2;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x2           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 1503   for(tem= 0; tem < num; tem= tem + 15)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        ; ------------------------------------- Block: 8 cycles
??fill_disp_0:
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x02]       ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BNC       ??dlms_reset_data_20  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 1504   {
// 1505     for(tem1= 0; tem1 < 15; tem1++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??fill_disp_1:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0xF            ;; 1 cycle
        BNC       ??dlms_reset_data_21  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 1506     {
// 1507       *(&opr_data[0] + tem1)= info[k++];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_opr_data)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 1508     }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??fill_disp_1    ;; 3 cycles
        ; ------------------------------------- Block: 16 cycles
// 1509     eprom_write(addrr,0,16,PAGE_1,AUTO_CALC);
??dlms_reset_data_21:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x06]      ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 1510     addrr= addrr + 0x10;
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      [SP+0x06], AX      ;; 1 cycle
// 1511   }
        MOV       A, [SP+0x03]       ;; 1 cycle
        ADD       A, #0xF            ;; 1 cycle
        MOV       [SP+0x03], A       ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+10
        BR        S:??fill_disp_0    ;; 3 cycles
        ; ------------------------------------- Block: 19 cycles
// 1512   eprom_read(0x0FB0,0,PAGE_1,AUTO_CALC);
??dlms_reset_data_20:
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFB0         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 1513   if(auto_push == 'p')
        MOV       A, [SP+0x03]       ;; 1 cycle
        CMP       A, #0x70           ;; 1 cycle
        BNZ       ??dlms_reset_data_22  ;; 4 cycles
        ; ------------------------------------- Block: 13 cycles
// 1514   {
// 1515     opr_data[1]= num;
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       N:_opr_data+1, A   ;; 1 cycle
// 1516     opr_data[3] = 0x01;
        MOV       N:_opr_data+3, #0x1  ;; 1 cycle
        BR        S:??dlms_reset_data_23  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 1517   }
// 1518   else
// 1519   {
// 1520     opr_data[0]= num;
??dlms_reset_data_22:
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       N:_opr_data, A     ;; 1 cycle
// 1521     opr_data[2] = 0x01;
        MOV       N:_opr_data+2, #0x1  ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 1522   }
// 1523   eprom_write(0x0FB0,0,16,PAGE_1,AUTO_CALC);
??dlms_reset_data_23:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFB0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 1524   
// 1525   lcd_ram_init();
          CFI FunCall _lcd_ram_init
        CALL      _lcd_ram_init      ;; 3 cycles
// 1526 }
        ADDW      SP, #0x8           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock28
        ; ------------------------------------- Block: 19 cycles
        ; ------------------------------------- Total: 100 cycles
// 1527 
// 1528 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function _Sel_DailyLoadsurvey_buffer
        CODE
// 1529 void Sel_DailyLoadsurvey_buffer(void)
// 1530 {
_Sel_DailyLoadsurvey_buffer:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 18
        SUBW      SP, #0x12          ;; 1 cycle
          CFI CFA SP+22
// 1531   uint8_t lu8_j, i_daily, to_cntr_d= 0, from_cntr_d= 0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x04], A       ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
// 1532   uint16_t dcounter, diff1, filled_k= 0, min_days, lc_address;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [SP+0x0C], AX      ;; 1 cycle
// 1533   uint8_t u8temp= 0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x0A], A       ;; 1 cycle
// 1534   
// 1535   k= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 1536   Start_Info2();
          CFI FunCall _Start_Info2
        CALL      _Start_Info2       ;; 3 cycles
// 1537   k= 15;
        MOVW      AX, #0xF           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 1538   
// 1539   filled_k= k;
        MOVW      AX, N:_k           ;; 1 cycle
        MOVW      [SP+0x0C], AX      ;; 1 cycle
// 1540   if(buffer_first_not_fill_f == 0)
        CMP0      N:_buffer_first_not_fill_f  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_24  ;; 4 cycles
        ; ------------------------------------- Block: 23 cycles
// 1541   {
// 1542     if(sel_access_flag == 1)
        CMP       N:_sel_access_flag, #0x1  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_25  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 1543     {
// 1544       if(midnight_roll_f == 0)
        CMP0      N:_midnight_roll_f  ;; 1 cycle
        BNZ       ??dlms_reset_data_26  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 1545       {
// 1546         eprom_read(DLOADSURVEY_INIT_ADD,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x4000        ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 1547         min_days= sel_datediff(bcd_to_hex(opr_data[0]), bcd_to_hex(opr_data[1]), bcd_to_hex(opr_data[2]));
        MOV       A, N:_opr_data+2   ;; 1 cycle
          CFI FunCall _bcd_to_hex
        CALL      _bcd_to_hex        ;; 3 cycles
        MOV       [SP+0x0E], A       ;; 1 cycle
        MOV       A, N:_opr_data+1   ;; 1 cycle
          CFI FunCall _bcd_to_hex
        CALL      _bcd_to_hex        ;; 3 cycles
        MOV       [SP+0x0B], A       ;; 1 cycle
        MOV       A, N:_opr_data     ;; 1 cycle
          CFI FunCall _bcd_to_hex
        CALL      _bcd_to_hex        ;; 3 cycles
        MOV       B, A               ;; 1 cycle
        MOV       A, [SP+0x0E]       ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        MOV       A, [SP+0x0B]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, B               ;; 1 cycle
          CFI FunCall _sel_datediff
        CALL      _sel_datediff      ;; 3 cycles
        MOVW      [SP+0x10], AX      ;; 1 cycle
        ; ------------------------------------- Block: 31 cycles
// 1548       }
// 1549       
// 1550       if((from_val[0] > present_year) || (to_val[0] > present_year) || (access_selector != 1)) /* in case of valid from value it will not send data */
??dlms_reset_data_26:
        MOV       A, N:_Now+6        ;; 1 cycle
        CMP       A, N:_from_val     ;; 1 cycle
        BC        ??dlms_reset_data_27  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_Now+6        ;; 1 cycle
        CMP       A, N:_to_val       ;; 1 cycle
        BC        ??dlms_reset_data_27  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        CMP       N:_access_selector, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_28  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 1551       {
// 1552         dls_count_dlms= 0;
??dlms_reset_data_27:
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_dls_count_dlms, AX  ;; 1 cycle
        BR        N:??dlms_reset_data_25  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 1553       }
// 1554       else
// 1555       {
// 1556         diff1= sel_datediff(present_date, present_month, present_year);
??dlms_reset_data_28:
        MOV       C, N:_Now+6        ;; 1 cycle
        MOV       X, N:_Now+5        ;; 1 cycle
        MOV       A, N:_Now+3        ;; 1 cycle
          CFI FunCall _sel_datediff
        CALL      _sel_datediff      ;; 3 cycles
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 1557         to_days= sel_datediff(to_val[2], to_val[1], to_val[0]);
        MOV       C, N:_to_val       ;; 1 cycle
        MOV       X, N:_to_val+1     ;; 1 cycle
        MOV       A, N:_to_val+2     ;; 1 cycle
          CFI FunCall _sel_datediff
        CALL      _sel_datediff      ;; 3 cycles
        MOVW      N:_to_days, AX     ;; 1 cycle
// 1558         from_days= sel_datediff(from_val[2], from_val[1], from_val[0]);
        MOV       C, N:_from_val     ;; 1 cycle
        MOV       X, N:_from_val+1   ;; 1 cycle
        MOV       A, N:_from_val+2   ;; 1 cycle
          CFI FunCall _sel_datediff
        CALL      _sel_datediff      ;; 3 cycles
        MOVW      N:_from_days, AX   ;; 1 cycle
// 1559         if(1==correct_DE_entry_f)
        CMP       N:_correct_DE_entry_f, #0x1  ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 23 cycles
// 1560         {
// 1561           from_days++;
        INCW      N:_from_days       ;; 2 cycles
        ; ------------------------------------- Block: 2 cycles
// 1562         }
// 1563         to_cntr_d= 200;
??Sel_DailyLoadsurvey_buffer_0:
        MOV       A, #0xC8           ;; 1 cycle
        MOV       [SP+0x04], A       ;; 1 cycle
// 1564         if((to_days > diff1) || (to_days < from_days) || (from_days > diff1))
        MOVW      HL, N:_to_days     ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BC        ??dlms_reset_data_29  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
        MOVW      HL, N:_from_days   ;; 1 cycle
        MOVW      AX, N:_to_days     ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BC        ??dlms_reset_data_29  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      HL, N:_from_days   ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNC       ??dlms_reset_data_30  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 1565         {
// 1566           dls_count_dlms= 0;
??dlms_reset_data_29:
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_dls_count_dlms, AX  ;; 1 cycle
        BR        S:??dlms_reset_data_31  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 1567         }
// 1568         else
// 1569         {
// 1570           dcounter= midnight_par_cnt; /* char_array_to_int(&opr_data[0]); */
??dlms_reset_data_30:
        MOV       X, N:_midnight_par_cnt  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      [SP+0x08], AX      ;; 1 cycle
// 1571           for(i_daily= dcounter - 1, lu8_j= 0; lu8_j < max_midnight_cnt; lu8_j++)
        MOVW      AX, [SP+0x08]      ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        DEC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x05], A       ;; 1 cycle
        ; ------------------------------------- Block: 9 cycles
??Sel_DailyLoadsurvey_buffer_1:
        MOV       A, [SP+0x05]       ;; 1 cycle
        CMP       A, #0x4C           ;; 1 cycle
        BNC       ??dlms_reset_data_31  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 1572           {
// 1573             lc_address= DLOADSURVEY_INIT_ADD + (uint16_t)(i_daily * DAILY_ENERGY_SNAP_SIZE);
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x60          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x4000        ;; 1 cycle
        MOVW      [SP+0x06], AX      ;; 1 cycle
// 1574             eprom_read(lc_address,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x06]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 1575             diff1= sel_datediff(opr_data[0], opr_data[1], opr_data[2]);
        MOV       C, N:_opr_data+2   ;; 1 cycle
        MOV       X, N:_opr_data+1   ;; 1 cycle
        MOV       A, N:_opr_data     ;; 1 cycle
          CFI FunCall _sel_datediff
        CALL      _sel_datediff      ;; 3 cycles
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 1576             if((to_days >= diff1) && (diff1 != 0))
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      HL, N:_to_days     ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BH        ??dlms_reset_data_32  ;; 4 cycles
        ; ------------------------------------- Block: 29 cycles
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        BZ        ??dlms_reset_data_32  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 1577             {
// 1578               to_cntr_d= i_daily;
        MOV       A, [SP]            ;; 1 cycle
        MOV       [SP+0x04], A       ;; 1 cycle
// 1579               break;
        BR        S:??dlms_reset_data_31  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 1580             }
// 1581             
// 1582             i_daily= i_daily - 1;
??dlms_reset_data_32:
        MOV       A, [SP]            ;; 1 cycle
        DEC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 1583             if(i_daily == 255)
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_33  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 1584             {
// 1585               i_daily= max_midnight_cnt - 1;
        MOV       A, #0x4B           ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 1586             }
// 1587           }
??dlms_reset_data_33:
        MOV       A, [SP+0x05]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x05], A       ;; 1 cycle
        BR        S:??Sel_DailyLoadsurvey_buffer_1  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 1588         }
// 1589         
// 1590         if(to_cntr_d == 200)
??dlms_reset_data_31:
        MOV       A, [SP+0x04]       ;; 1 cycle
        CMP       A, #0xC8           ;; 1 cycle
        BNZ       ??dlms_reset_data_34  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 1591         {
// 1592           dls_count_dlms= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_dls_count_dlms, AX  ;; 1 cycle
// 1593           to_cntr_d= 0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x04], A       ;; 1 cycle
        BR        N:??dlms_reset_data_35  ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 1594         }
// 1595         else
// 1596         {
// 1597           from_cntr_d= 200;
??dlms_reset_data_34:
        MOV       A, #0xC8           ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
// 1598           lc_address= DLOADSURVEY_INIT_ADD + ((dcounter - 1) * DAILY_ENERGY_SNAP_SIZE);
        MOVW      AX, [SP+0x08]      ;; 1 cycle
        MOVW      BC, #0x60          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x3FA0        ;; 1 cycle
        MOVW      [SP+0x06], AX      ;; 1 cycle
// 1599           eprom_read(lc_address,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x06]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 1600           diff1= sel_datediff(opr_data[0], opr_data[1], opr_data[2]);
        MOV       C, N:_opr_data+2   ;; 1 cycle
        MOV       X, N:_opr_data+1   ;; 1 cycle
        MOV       A, N:_opr_data     ;; 1 cycle
          CFI FunCall _sel_datediff
        CALL      _sel_datediff      ;; 3 cycles
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 1601           if(from_days > diff1)
        MOVW      HL, N:_from_days   ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNC       ??dlms_reset_data_36  ;; 4 cycles
        ; ------------------------------------- Block: 29 cycles
// 1602           {
// 1603             dls_count_dlms= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_dls_count_dlms, AX  ;; 1 cycle
        BR        N:??dlms_reset_data_35  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 1604           }
// 1605           else
// 1606           {
// 1607             for(i_daily= to_cntr_d, lu8_j= 0; lu8_j < max_midnight_cnt; lu8_j++)
??dlms_reset_data_36:
        MOV       A, [SP+0x04]       ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x05], A       ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
??Sel_DailyLoadsurvey_buffer_2:
        MOV       A, [SP+0x05]       ;; 1 cycle
        CMP       A, #0x4C           ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_35  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 1608             {
// 1609               lc_address= DLOADSURVEY_INIT_ADD + (uint16_t)(i_daily * DAILY_ENERGY_SNAP_SIZE);
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x60          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x4000        ;; 1 cycle
        MOVW      [SP+0x06], AX      ;; 1 cycle
// 1610               //                            long1= dcounter;
// 1611               eprom_read(lc_address,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x06]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 1612               diff1= sel_datediff(opr_data[0], opr_data[1], opr_data[2]);
        MOV       C, N:_opr_data+2   ;; 1 cycle
        MOV       X, N:_opr_data+1   ;; 1 cycle
        MOV       A, N:_opr_data     ;; 1 cycle
          CFI FunCall _sel_datediff
        CALL      _sel_datediff      ;; 3 cycles
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 1613               //                            long2= diff1;
// 1614               if((from_days >= diff1) && (diff1 != 0))
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      HL, N:_from_days   ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BH        ??dlms_reset_data_37  ;; 4 cycles
        ; ------------------------------------- Block: 29 cycles
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        BZ        ??dlms_reset_data_37  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 1615               {
// 1616                 if(from_days == diff1)
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      HL, N:_from_days   ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNZ       ??dlms_reset_data_38  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 1617                 {
// 1618                   from_cntr_d= i_daily;
        MOV       A, [SP]            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
// 1619                   break;
        BR        S:??dlms_reset_data_35  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 1620                 }
// 1621                 else
// 1622                 {
// 1623                   from_cntr_d= i_daily + 1;           /* if from_days=24 value not present in the d_array=25,23,22 selection of 25 */
??dlms_reset_data_38:
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
// 1624                   if(from_cntr_d >= max_midnight_cnt) /* in case of rollover */
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, #0x4C           ;; 1 cycle
        BC        ??dlms_reset_data_39  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 1625                   {
// 1626                     from_cntr_d= 0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 1627                   }
// 1628                   
// 1629                   if(lu8_j == 0) /* if from_cntr greater than to_cntr */
??dlms_reset_data_39:
        MOV       A, [SP+0x05]       ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_35  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 1630                   {
// 1631                     from_cntr_d= 200;
        MOV       A, #0xC8           ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
// 1632                   }
// 1633                   
// 1634                   break;
        BR        S:??dlms_reset_data_35  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 1635                 }
// 1636               }
// 1637               
// 1638               if((midnight_roll_f == 0) && (diff1 < min_days))
??dlms_reset_data_37:
        CMP0      N:_midnight_roll_f  ;; 1 cycle
        BNZ       ??dlms_reset_data_40  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOVW      AX, [SP+0x10]      ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNC       ??dlms_reset_data_40  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 1639               {
// 1640                 from_cntr_d= 0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
// 1641                 break;
        BR        S:??dlms_reset_data_35  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 1642               }
// 1643               
// 1644               i_daily= i_daily - 1;
??dlms_reset_data_40:
        MOV       A, [SP]            ;; 1 cycle
        DEC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 1645               if(i_daily == 255)
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_41  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 1646               {
// 1647                 i_daily= max_midnight_cnt - 1;
        MOV       A, #0x4B           ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 1648               }
// 1649             }
??dlms_reset_data_41:
        MOV       A, [SP+0x05]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x05], A       ;; 1 cycle
        BR        N:??Sel_DailyLoadsurvey_buffer_2  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 1650           }
// 1651         }
// 1652         
// 1653         if(from_cntr_d == 200)
??dlms_reset_data_35:
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, #0xC8           ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_42  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 1654         {
// 1655           if(midnight_roll_f == 1)
        CMP       N:_midnight_roll_f, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_43  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 1656           {
// 1657             if(dcounter == max_midnight_cnt - 1)
        MOVW      AX, [SP+0x08]      ;; 1 cycle
        CMPW      AX, #0x4B          ;; 1 cycle
        BNZ       ??dlms_reset_data_44  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 1658             {
// 1659               eprom_read(DLOADSURVEY_INIT_ADD,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x4000        ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 1660               diff1= sel_datediff(opr_data[0], opr_data[1], opr_data[2]);
        MOV       C, N:_opr_data+2   ;; 1 cycle
        MOV       X, N:_opr_data+1   ;; 1 cycle
        MOV       A, N:_opr_data     ;; 1 cycle
          CFI FunCall _sel_datediff
        CALL      _sel_datediff      ;; 3 cycles
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 1661               if(diff1 > from_days)
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      HL, N:_from_days   ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        SKH                          ;; 4 cycles
        BR        N:??dlms_reset_data_42  ;; 4 cycles
        ; ------------------------------------- Block: 21 cycles
// 1662               {
// 1663                 from_cntr_d= 0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        BR        N:??dlms_reset_data_42  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 1664               }
// 1665             }
// 1666             else
// 1667             {
// 1668               lc_address= DLOADSURVEY_INIT_ADD + ((dcounter + 1) * DAILY_ENERGY_SNAP_SIZE);
??dlms_reset_data_44:
        MOVW      AX, [SP+0x08]      ;; 1 cycle
        MOVW      BC, #0x60          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x4060        ;; 1 cycle
        MOVW      [SP+0x06], AX      ;; 1 cycle
// 1669               eprom_read(lc_address,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x06]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 1670               diff1= sel_datediff(opr_data[0], opr_data[1], opr_data[2]);
        MOV       C, N:_opr_data+2   ;; 1 cycle
        MOV       X, N:_opr_data+1   ;; 1 cycle
        MOV       A, N:_opr_data     ;; 1 cycle
          CFI FunCall _sel_datediff
        CALL      _sel_datediff      ;; 3 cycles
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 1671               if(diff1 > from_days) /* after rollover from_days less than lowest value */
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      HL, N:_from_days   ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNH       ??dlms_reset_data_45  ;; 4 cycles
        ; ------------------------------------- Block: 27 cycles
// 1672               {
// 1673                 from_cntr_d= dcounter; /* +1; */
        MOVW      AX, [SP+0x08]      ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        BR        S:??dlms_reset_data_42  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 1674               }
// 1675               else
// 1676               {
// 1677                 dls_count_dlms= 0;
??dlms_reset_data_45:
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_dls_count_dlms, AX  ;; 1 cycle
        BR        S:??dlms_reset_data_42  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 1678               }
// 1679             }
// 1680           }
// 1681           else if((midnight_roll_f == 0) && (dcounter == max_midnight_cnt))
??dlms_reset_data_43:
        CMP0      N:_midnight_roll_f  ;; 1 cycle
        BNZ       ??dlms_reset_data_46  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOVW      AX, [SP+0x08]      ;; 1 cycle
        CMPW      AX, #0x4C          ;; 1 cycle
        BNZ       ??dlms_reset_data_46  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 1682           {
// 1683             lc_address= DLOADSURVEY_INIT_ADD + ((dcounter)*DAILY_ENERGY_SNAP_SIZE);
        MOVW      AX, [SP+0x08]      ;; 1 cycle
        MOVW      BC, #0x60          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x4000        ;; 1 cycle
        MOVW      [SP+0x06], AX      ;; 1 cycle
// 1684             eprom_read(lc_address,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x06]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 1685             diff1= sel_datediff(opr_data[0], opr_data[1], opr_data[2]);
        MOV       C, N:_opr_data+2   ;; 1 cycle
        MOV       X, N:_opr_data+1   ;; 1 cycle
        MOV       A, N:_opr_data     ;; 1 cycle
          CFI FunCall _sel_datediff
        CALL      _sel_datediff      ;; 3 cycles
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 1686             if(diff1 > from_days)
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      HL, N:_from_days   ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNH       ??dlms_reset_data_47  ;; 4 cycles
        ; ------------------------------------- Block: 27 cycles
// 1687             {
// 1688               from_cntr_d= 0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        BR        S:??dlms_reset_data_42  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 1689             }
// 1690             else
// 1691             {
// 1692               dls_count_dlms= 0;
??dlms_reset_data_47:
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_dls_count_dlms, AX  ;; 1 cycle
        BR        S:??dlms_reset_data_42  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 1693             }
// 1694           }
// 1695           else
// 1696           {
// 1697             dls_count_dlms= 0;
??dlms_reset_data_46:
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_dls_count_dlms, AX  ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 1698           }
// 1699         }
// 1700         
// 1701         if(dls_count_dlms != 0)
??dlms_reset_data_42:
        CLRW      AX                 ;; 1 cycle
        CMPW      AX, N:_dls_count_dlms  ;; 1 cycle
        BZ        ??dlms_reset_data_25  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 1702         {
// 1703           if(to_cntr_d >= from_cntr_d)
        MOV       A, [SP+0x04]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BC        ??dlms_reset_data_48  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 1704           {
// 1705             dls_count_dlms= to_cntr_d - from_cntr_d + 1;
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        MOV       H, #0x0            ;; 1 cycle
        MOV       A, [SP+0x04]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        MOVW      N:_dls_count_dlms, AX  ;; 1 cycle
        BR        S:??dlms_reset_data_49  ;; 3 cycles
        ; ------------------------------------- Block: 12 cycles
// 1706           }
// 1707           else
// 1708           {
// 1709             dls_count_dlms= max_midnight_cnt + to_cntr_d - from_cntr_d + 1;
??dlms_reset_data_48:
        MOV       A, [SP+0x04]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, #0x4C          ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       D, #0x0            ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        SUBW      AX, DE             ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        MOVW      N:_dls_count_dlms, AX  ;; 1 cycle
        ; ------------------------------------- Block: 12 cycles
// 1710           }
// 1711           if(dls_count_dlms >= max_midnight_cnt)
??dlms_reset_data_49:
        MOVW      AX, N:_dls_count_dlms  ;; 1 cycle
        CMPW      AX, #0x4C          ;; 1 cycle
        BC        ??dlms_reset_data_50  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 1712           {
// 1713             dls_count_dlms= max_midnight_cnt;
        MOVW      AX, #0x4C          ;; 1 cycle
        MOVW      N:_dls_count_dlms, AX  ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 1714           }
// 1715           
// 1716           for(i_daily= 0; i_daily < from_cntr_d; i_daily++)
??dlms_reset_data_50:
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??Sel_DailyLoadsurvey_buffer_3:
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BNC       ??dlms_reset_data_25  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 1717           {
// 1718             UintLoadSurptr1+= DAILY_ENERGY_SNAP_SIZE;
        MOVW      AX, N:_UintLoadSurptr1  ;; 1 cycle
        ADDW      AX, #0x60          ;; 1 cycle
        MOVW      N:_UintLoadSurptr1, AX  ;; 1 cycle
// 1719           }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??Sel_DailyLoadsurvey_buffer_3  ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 1720         }
// 1721       }
// 1722     }
// 1723     
// 1724     if((to_days == from_days) && (from_cntr_d > to_cntr_d))
??dlms_reset_data_25:
        MOVW      HL, N:_from_days   ;; 1 cycle
        MOVW      AX, N:_to_days     ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNZ       ??dlms_reset_data_24  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOV       A, [SP+0x04]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BNC       ??dlms_reset_data_24  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 1725     {
// 1726       dls_count_dlms= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_dls_count_dlms, AX  ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 1727     }
// 1728   }
// 1729   
// 1730   if(sel_access_flag == 0)
??dlms_reset_data_24:
        CMP0      N:_sel_access_flag  ;; 1 cycle
        BNZ       ??dlms_reset_data_51  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 1731   {
// 1732     no_bytes= 31 + (D_KVARH_REQ * 10);
        MOV       A, N:_D_KVARH_REQ  ;; 1 cycle
        MOV       X, #0xA            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       A, #0x1F           ;; 1 cycle
        MOV       N:_no_bytes, A     ;; 1 cycle
        BR        S:??dlms_reset_data_52  ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 1733   }
// 1734   else if(sel_access_flag == 1)
??dlms_reset_data_51:
        CMP       N:_sel_access_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_52  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 1735   {
// 1736     no_bytes= 2;
        MOV       N:_no_bytes, #0x2  ;; 1 cycle
// 1737     if(sel_obj[0] == 1)
        CMP       N:_sel_obj, #0x1   ;; 1 cycle
        BNZ       ??dlms_reset_data_53  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 1738     {
// 1739       no_bytes+= 14;
        MOVW      HL, #LWRD(_no_bytes)  ;; 1 cycle
        MOV       A, [HL]            ;; 1 cycle
        ADD       A, #0xE            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
// 1740     }
// 1741     
// 1742     if(sel_obj[1] == 1)
??dlms_reset_data_53:
        CMP       N:_sel_obj+1, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_54  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 1743     {
// 1744       no_bytes+= 5;
        MOVW      HL, #LWRD(_no_bytes)  ;; 1 cycle
        MOV       A, [HL]            ;; 1 cycle
        ADD       A, #0x5            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
// 1745     }
// 1746     
// 1747     if(sel_obj[2] == 1)
??dlms_reset_data_54:
        CMP       N:_sel_obj+2, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_55  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 1748     {
// 1749       no_bytes+= 5;
        MOVW      HL, #LWRD(_no_bytes)  ;; 1 cycle
        MOV       A, [HL]            ;; 1 cycle
        ADD       A, #0x5            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
// 1750     }
// 1751     
// 1752     if(sel_obj[3] == 1)
??dlms_reset_data_55:
        CMP       N:_sel_obj+3, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_56  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 1753     {
// 1754       no_bytes+= 5;
        MOVW      HL, #LWRD(_no_bytes)  ;; 1 cycle
        MOV       A, [HL]            ;; 1 cycle
        ADD       A, #0x5            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
// 1755     }
// 1756     
// 1757     if(sel_obj[4] == 1)
??dlms_reset_data_56:
        CMP       N:_sel_obj+4, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_57  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 1758     {
// 1759       no_bytes+= D_KVARH_REQ * 5;
        MOV       A, N:_D_KVARH_REQ  ;; 1 cycle
        MOV       X, #0x5            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOVW      HL, #LWRD(_no_bytes)  ;; 1 cycle
        ADD       A, [HL]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        ; ------------------------------------- Block: 7 cycles
// 1760     }
// 1761     
// 1762     if(sel_obj[5] == 1)
??dlms_reset_data_57:
        CMP       N:_sel_obj+5, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_52  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 1763     {
// 1764       no_bytes+= D_KVARH_REQ * 5;
        MOV       A, N:_D_KVARH_REQ  ;; 1 cycle
        MOV       X, #0x5            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOVW      HL, #LWRD(_no_bytes)  ;; 1 cycle
        ADD       A, [HL]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        ; ------------------------------------- Block: 7 cycles
// 1765     }
// 1766     
// 1767   }
// 1768   
// 1769   if(buffer_first_not_fill_f == 0)
??dlms_reset_data_52:
        CMP0      N:_buffer_first_not_fill_f  ;; 1 cycle
        BNZ       ??dlms_reset_data_58  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 1770   {
// 1771     array(dls_count_dlms, 0);
        MOV       X, #0x0            ;; 1 cycle
        MOVW      HL, N:_dls_count_dlms  ;; 1 cycle
        MOV       A, L               ;; 1 cycle
          CFI FunCall _array
        CALL      _array             ;; 3 cycles
// 1772     block_size= 0;
        MOV       N:_block_size, #0x0  ;; 1 cycle
// 1773     block_no= 1;
        MOVW      AX, #0x1           ;; 1 cycle
        MOVW      N:_block_no, AX    ;; 1 cycle
// 1774     multi_filling_f= 1;
        MOV       N:_multi_filling_f, #0x1  ;; 1 cycle
// 1775     buffer_first_not_fill_f= 1;
        MOV       N:_buffer_first_not_fill_f, #0x1  ;; 1 cycle
// 1776     if(dls_count_dlms == 0)
        CLRW      AX                 ;; 1 cycle
        CMPW      AX, N:_dls_count_dlms  ;; 1 cycle
        BZ        ??dlms_reset_data_59  ;; 4 cycles
        ; ------------------------------------- Block: 17 cycles
// 1777     {
// 1778       goto cnp;
// 1779     }
// 1780   }
// 1781   
// 1782   for(; block_size < dls_count_dlms; block_size++)
??dlms_reset_data_58:
        MOVW      HL, N:_dls_count_dlms  ;; 1 cycle
        MOV       X, N:_block_size   ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNC       ??dlms_reset_data_59  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 1783   {
// 1784     filled_k+= no_bytes; /* 6 byte increment on each fill */
        MOV       C, N:_no_bytes     ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x0C]      ;; 1 cycle
        ADDW      AX, BC             ;; 1 cycle
        MOVW      [SP+0x0C], AX      ;; 1 cycle
// 1785     if(UintLoadSurptr1 >= (DLOADSURVEY_INIT_ADD + (max_midnight_cnt * DAILY_ENERGY_SNAP_SIZE)))
        MOVW      AX, N:_UintLoadSurptr1  ;; 1 cycle
        CMPW      AX, #0x5C80        ;; 1 cycle
        BC        ??dlms_reset_data_60  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
// 1786     {
// 1787       UintLoadSurptr1= DLOADSURVEY_INIT_ADD;
        MOVW      AX, #0x4000        ;; 1 cycle
        MOVW      N:_UintLoadSurptr1, AX  ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 1788     }
// 1789     
// 1790     daily_enr_fill(UintLoadSurptr1);
??dlms_reset_data_60:
        MOVW      AX, N:_UintLoadSurptr1  ;; 1 cycle
          CFI FunCall _daily_enr_fill
        CALL      _daily_enr_fill    ;; 3 cycles
// 1791     UintLoadSurptr1= UintLoadSurptr1 + DAILY_ENERGY_SNAP_SIZE;
        MOVW      AX, N:_UintLoadSurptr1  ;; 1 cycle
        ADDW      AX, #0x60          ;; 1 cycle
        MOVW      N:_UintLoadSurptr1, AX  ;; 1 cycle
// 1792     if((DLMS_MAX_BUFF_SIZE-10) < (filled_k + no_bytes))
        MOV       C, N:_no_bytes     ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x0C]      ;; 1 cycle
        ADDW      AX, BC             ;; 1 cycle
        CMPW      AX, #0x1F7         ;; 1 cycle
        BNC       ??dlms_reset_data_59  ;; 4 cycles
        ; ------------------------------------- Block: 16 cycles
// 1793     {
// 1794       break;
// 1795     }
// 1796   }
        INC       N:_block_size      ;; 2 cycles
        BR        S:??dlms_reset_data_58  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 1797 cnp:
// 1798   block_size++;
??dlms_reset_data_59:
        INC       N:_block_size      ;; 2 cycles
// 1799   if(block_size >= dls_count_dlms)
        MOVW      HL, N:_dls_count_dlms  ;; 1 cycle
        MOV       X, N:_block_size   ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BC        ??dlms_reset_data_61  ;; 4 cycles
        ; ------------------------------------- Block: 10 cycles
// 1800   {
// 1801     multi_filling_f= 0;
        MOV       N:_multi_filling_f, #0x0  ;; 1 cycle
// 1802     buffer_first_not_fill_f= 0;
        MOV       N:_buffer_first_not_fill_f, #0x0  ;; 1 cycle
// 1803     u8temp= 1;
        MOV       A, #0x1            ;; 1 cycle
        MOV       [SP+0x0A], A       ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
// 1804   }
// 1805   
// 1806   send_data(u8temp);
??dlms_reset_data_61:
        MOV       A, [SP+0x0A]       ;; 1 cycle
          CFI FunCall _send_data
        CALL      _send_data         ;; 3 cycles
// 1807 }
        ADDW      SP, #0x12          ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock29
        ; ------------------------------------- Block: 11 cycles
        ; ------------------------------------- Total: 754 cycles
// 1808 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function _daily_enr_fill
        CODE
// 1809 void daily_enr_fill(uint16_t comptt_address)
// 1810 {
_daily_enr_fill:
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        ; Auto size: 8
        SUBW      SP, #0x6           ;; 1 cycle
          CFI CFA SP+12
// 1811   uint8_t lu8_i, max_obj, temp_obj1;
// 1812   uint16_t add;
// 1813   if(sel_access_flag == 1)
        CMP       N:_sel_access_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_62  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 1814   {
// 1815     structure(no_obj);
        MOV       A, N:_no_obj       ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
        BR        S:??dlms_reset_data_63  ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 1816   }
// 1817   else
// 1818   {
// 1819     /* if(D_KVAH_REQ==1)
// 1820     {
// 1821     temp_obj=0;
// 1822   }
// 1823                else
// 1824     temp_obj=1;*/
// 1825     if(D_KVARH_REQ == 1)
??dlms_reset_data_62:
        CMP       N:_D_KVARH_REQ, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_64  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 1826     {
// 1827       temp_obj1= 0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        BR        S:??dlms_reset_data_65  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 1828     }
// 1829     else
// 1830       temp_obj1= 2;
??dlms_reset_data_64:
        MOV       A, #0x2            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 1831     
// 1832     max_obj= (dailyload_profile_parameter_cap_obj[0] - temp_obj1);
??dlms_reset_data_65:
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, N:_dailyload_profile_parameter_cap_obj  ;; 1 cycle
        SUB       A, X               ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
// 1833     
// 1834     for(lu8_i= 0; lu8_i < max_obj; lu8_i++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 7 cycles
??daily_enr_fill_0:
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x02]       ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BNC       ??dlms_reset_data_66  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 1835     {
// 1836       sel_obj[lu8_i]= 1;
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, #0x1            ;; 1 cycle
        MOV       (_sel_obj)[B], A   ;; 1 cycle
// 1837     }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??daily_enr_fill_0  ;; 3 cycles
        ; ------------------------------------- Block: 10 cycles
// 1838     
// 1839     structure(max_obj);
??dlms_reset_data_66:
        MOV       A, [SP+0x02]       ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 1840   }
// 1841   
// 1842   add= comptt_address;
??dlms_reset_data_63:
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        MOVW      [SP+0x04], AX      ;; 1 cycle
// 1843   eprom_read(add,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x04]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 1844   if(sel_obj[0] == 1)
        CMP       N:_sel_obj, #0x1   ;; 1 cycle
        BNZ       ??dlms_reset_data_67  ;; 4 cycles
        ; ------------------------------------- Block: 14 cycles
// 1845   {
// 1846     date_time(opr_data[0], opr_data[1], opr_data[2], 0, 0, 0, 0); /* d&t */
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       D, #0x0            ;; 1 cycle
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, N:_opr_data+2   ;; 1 cycle
        MOV       X, N:_opr_data+1   ;; 1 cycle
        MOV       A, N:_opr_data     ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+12
        ; ------------------------------------- Block: 12 cycles
// 1847   }
// 1848   
// 1849   if(sel_obj[1] == 1)
??dlms_reset_data_67:
        CMP       N:_sel_obj+1, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_68  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 1850   {
// 1851     val_4byt(opr_data[3], opr_data[4], opr_data[5], opr_data[6]); /* cum kwh */
        MOV       B, N:_opr_data+6   ;; 1 cycle
        MOV       C, N:_opr_data+5   ;; 1 cycle
        MOV       X, N:_opr_data+4   ;; 1 cycle
        MOV       A, N:_opr_data+3   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 1852   }
// 1853   
// 1854   if(sel_obj[2] == 1)
??dlms_reset_data_68:
        CMP       N:_sel_obj+2, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_69  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 1855   {
// 1856     val_4byt(opr_data[7], opr_data[8], opr_data[9], opr_data[10]); /* cum kvah */
        MOV       B, N:_opr_data+10  ;; 1 cycle
        MOV       C, N:_opr_data+9   ;; 1 cycle
        MOV       X, N:_opr_data+8   ;; 1 cycle
        MOV       A, N:_opr_data+7   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 1857   }
// 1858   
// 1859   if(sel_obj[3] == 1)
??dlms_reset_data_69:
        CMP       N:_sel_obj+3, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_70  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 1860   {
// 1861     val_4byt(0, opr_data[11], opr_data[12], opr_data[13]); /* cum power on duration */
        MOV       B, N:_opr_data+13  ;; 1 cycle
        MOV       C, N:_opr_data+12  ;; 1 cycle
        MOV       X, N:_opr_data+11  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 1862   }
// 1863   
// 1864   if(1 == D_KVARH_REQ)
??dlms_reset_data_70:
        CMP       N:_D_KVARH_REQ, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_71  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 1865   {
// 1866     add= comptt_address + 0x10;
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      [SP+0x04], AX      ;; 1 cycle
// 1867     eprom_read(add,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x04]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 1868     
// 1869     if(sel_obj[4] == 1)
        CMP       N:_sel_obj+4, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_72  ;; 4 cycles
        ; ------------------------------------- Block: 15 cycles
// 1870     {
// 1871       val_4byt(opr_data[0], opr_data[1], opr_data[2], opr_data[3]); /* cum kvarh lag*/
        MOV       B, N:_opr_data+3   ;; 1 cycle
        MOV       C, N:_opr_data+2   ;; 1 cycle
        MOV       X, N:_opr_data+1   ;; 1 cycle
        MOV       A, N:_opr_data     ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 1872     }
// 1873     
// 1874     if(sel_obj[5] == 1)
??dlms_reset_data_72:
        CMP       N:_sel_obj+5, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_71  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 1875     {
// 1876       val_4byt(opr_data[4], opr_data[5], opr_data[6], opr_data[7]); /* cum kvarh lag*/
        MOV       B, N:_opr_data+7   ;; 1 cycle
        MOV       C, N:_opr_data+6   ;; 1 cycle
        MOV       X, N:_opr_data+5   ;; 1 cycle
        MOV       A, N:_opr_data+4   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 1877     }
// 1878   }
// 1879 }
??dlms_reset_data_71:
        ADDW      SP, #0x8           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock30
        ; ------------------------------------- Block: 7 cycles
        ; ------------------------------------- Total: 163 cycles
// 1880 /* *************************************************** */

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function _Sel_Loadsurvey_buffer
        CODE
// 1881 void Sel_Loadsurvey_buffer(void)
// 1882 {
_Sel_Loadsurvey_buffer:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 16
        SUBW      SP, #0x10          ;; 1 cycle
          CFI CFA SP+20
// 1883   uint8_t lu8_j, i_l, u8temp= 0, mm2;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x0C], A       ;; 1 cycle
// 1884   uint16_t from_cntr1, to_cntr1;
// 1885   uint16_t buffer_filled_u16=0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [SP+0x0E], AX      ;; 1 cycle
// 1886   uint8_t miss_to_day= 0, miss_from_day= 0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x0B], A       ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x08], A       ;; 1 cycle
// 1887   uint8_t prev_from_val_min= 0, prev_from_val_hr= 0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x09], A       ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x04], A       ;; 1 cycle
// 1888   uint8_t rollover_case= 0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x05], A       ;; 1 cycle
// 1889   k= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 1890   Start_Info2();
          CFI FunCall _Start_Info2
        CALL      _Start_Info2       ;; 3 cycles
// 1891   k= 15;
        MOVW      AX, #0xF           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 1892   
// 1893   if(buffer_first_not_fill_f == 0)
        CMP0      N:_buffer_first_not_fill_f  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_73  ;; 4 cycles
        ; ------------------------------------- Block: 27 cycles
// 1894   {
// 1895     buffer_first_not_fill_f= 1;
        MOV       N:_buffer_first_not_fill_f, #0x1  ;; 1 cycle
// 1896     block_no= 1;
        MOVW      AX, #0x1           ;; 1 cycle
        MOVW      N:_block_no, AX    ;; 1 cycle
// 1897     multi_filling_f= 1;
        MOV       N:_multi_filling_f, #0x1  ;; 1 cycle
// 1898     if(sel_access_flag == 1)
        CMP       N:_sel_access_flag, #0x1  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_73  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 1899     {
// 1900       if((from_val[0] > present_year) || (to_val[0] > present_year) || (access_selector != 1)) /* in case of valid from value it will not send data */
        MOV       A, N:_Now+6        ;; 1 cycle
        CMP       A, N:_from_val     ;; 1 cycle
        BC        ??dlms_reset_data_74  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_Now+6        ;; 1 cycle
        CMP       A, N:_to_val       ;; 1 cycle
        BC        ??dlms_reset_data_74  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        CMP       N:_access_selector, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_75  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 1901       {
// 1902         ls_count_dlms= 0;
??dlms_reset_data_74:
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_ls_count_dlms, AX  ;; 1 cycle
        BR        N:??dlms_reset_data_76  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 1903       }
// 1904       else
// 1905       {
// 1906         to_days= sel_datediff(to_val[2], to_val[1], to_val[0]);
??dlms_reset_data_75:
        MOV       C, N:_to_val       ;; 1 cycle
        MOV       X, N:_to_val+1     ;; 1 cycle
        MOV       A, N:_to_val+2     ;; 1 cycle
          CFI FunCall _sel_datediff
        CALL      _sel_datediff      ;; 3 cycles
        MOVW      N:_to_days, AX     ;; 1 cycle
// 1907         from_days= sel_datediff(from_val[2], from_val[1], from_val[0]);
        MOV       C, N:_from_val     ;; 1 cycle
        MOV       X, N:_from_val+1   ;; 1 cycle
        MOV       A, N:_from_val+2   ;; 1 cycle
          CFI FunCall _sel_datediff
        CALL      _sel_datediff      ;; 3 cycles
        MOVW      N:_from_days, AX   ;; 1 cycle
// 1908         
// 1909         to_cntr= 200;
        MOV       N:_to_cntr, #0xC8  ;; 1 cycle
// 1910         if((to_days > d_array[day_counter]) || (to_days < from_days))
        MOVW      HL, N:_to_days     ;; 1 cycle
        MOVW      AX, N:_day_counter  ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array)  ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, [DE]           ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BC        ??dlms_reset_data_77  ;; 4 cycles
        ; ------------------------------------- Block: 28 cycles
        MOVW      HL, N:_from_days   ;; 1 cycle
        MOVW      AX, N:_to_days     ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNC       ??dlms_reset_data_78  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 1911         {
// 1912           ls_count_dlms= 0;
??dlms_reset_data_77:
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_ls_count_dlms, AX  ;; 1 cycle
        BR        N:??dlms_reset_data_79  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 1913         }
// 1914         else if((to_days == d_array[day_counter]) && ((to_val[3] > present_hr) || ((to_val[3] == present_hr) && (to_val[4] > present_min))))
??dlms_reset_data_78:
        MOVW      AX, N:_day_counter  ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array)  ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [HL]           ;; 1 cycle
        MOVW      HL, N:_to_days     ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNZ       ??dlms_reset_data_80  ;; 4 cycles
        ; ------------------------------------- Block: 13 cycles
        MOV       A, N:_Now+2        ;; 1 cycle
        CMP       A, N:_to_val+3     ;; 1 cycle
        BC        ??dlms_reset_data_81  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_to_val+3     ;; 1 cycle
        CMP       A, N:_Now+2        ;; 1 cycle
        BNZ       ??dlms_reset_data_80  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_Now+1        ;; 1 cycle
        CMP       A, N:_to_val+4     ;; 1 cycle
        BNC       ??dlms_reset_data_80  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 1915         {
// 1916           ls_count_dlms= 0;
??dlms_reset_data_81:
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_ls_count_dlms, AX  ;; 1 cycle
        BR        N:??dlms_reset_data_79  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 1917         }
// 1918         else
// 1919         {
// 1920           if(battery_mode_f == 1)
??dlms_reset_data_80:
        MOVW      HL, #LWRD(_flag1)  ;; 1 cycle
        MOV1      CY, [HL].0         ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_82  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 1921           {
// 1922             if((to_val[0] > OffTime.year) ||
// 1923                (to_val[0] == OffTime.year && to_val[1] > OffTime.month) || 
// 1924                  (to_val[0] == OffTime.year && to_val[1] == OffTime.month && to_val[2] > OffTime.day) ||
// 1925                    (to_val[0] == OffTime.year && to_val[1] == OffTime.month && to_val[2] == OffTime.day && to_val[3] > OffTime.hour) ||
// 1926                      (to_val[0] == OffTime.year && to_val[1] == OffTime.month && to_val[2] == OffTime.day && to_val[3] == OffTime.hour && to_val[4] > OffTime.min))
        MOV       A, N:_OffTime+6    ;; 1 cycle
        CMP       A, N:_to_val       ;; 1 cycle
        BC        ??dlms_reset_data_83  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_to_val       ;; 1 cycle
        CMP       A, N:_OffTime+6    ;; 1 cycle
        BNZ       ??dlms_reset_data_84  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_OffTime+5    ;; 1 cycle
        CMP       A, N:_to_val+1     ;; 1 cycle
        BC        ??dlms_reset_data_83  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
??dlms_reset_data_84:
        MOV       A, N:_to_val       ;; 1 cycle
        CMP       A, N:_OffTime+6    ;; 1 cycle
        BNZ       ??dlms_reset_data_85  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_to_val+1     ;; 1 cycle
        CMP       A, N:_OffTime+5    ;; 1 cycle
        BNZ       ??dlms_reset_data_85  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_OffTime+3    ;; 1 cycle
        CMP       A, N:_to_val+2     ;; 1 cycle
        BC        ??dlms_reset_data_83  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
??dlms_reset_data_85:
        MOV       A, N:_to_val       ;; 1 cycle
        CMP       A, N:_OffTime+6    ;; 1 cycle
        BNZ       ??dlms_reset_data_86  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_to_val+1     ;; 1 cycle
        CMP       A, N:_OffTime+5    ;; 1 cycle
        BNZ       ??dlms_reset_data_86  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_to_val+2     ;; 1 cycle
        CMP       A, N:_OffTime+3    ;; 1 cycle
        BNZ       ??dlms_reset_data_86  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_OffTime+2    ;; 1 cycle
        CMP       A, N:_to_val+3     ;; 1 cycle
        BC        ??dlms_reset_data_83  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
??dlms_reset_data_86:
        MOV       A, N:_to_val       ;; 1 cycle
        CMP       A, N:_OffTime+6    ;; 1 cycle
        BNZ       ??dlms_reset_data_87  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_to_val+1     ;; 1 cycle
        CMP       A, N:_OffTime+5    ;; 1 cycle
        BNZ       ??dlms_reset_data_87  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_to_val+2     ;; 1 cycle
        CMP       A, N:_OffTime+3    ;; 1 cycle
        BNZ       ??dlms_reset_data_87  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_to_val+3     ;; 1 cycle
        CMP       A, N:_OffTime+2    ;; 1 cycle
        BNZ       ??dlms_reset_data_87  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_OffTime+1    ;; 1 cycle
        CMP       A, N:_to_val+4     ;; 1 cycle
        BNC       ??dlms_reset_data_87  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 1927             {
// 1928               to_val[0] = OffTime.year;
??dlms_reset_data_83:
        MOV       A, N:_OffTime+6    ;; 1 cycle
        MOV       N:_to_val, A       ;; 1 cycle
// 1929               to_val[1] = OffTime.month;
        MOV       A, N:_OffTime+5    ;; 1 cycle
        MOV       N:_to_val+1, A     ;; 1 cycle
// 1930               to_val[2] = OffTime.day;
        MOV       A, N:_OffTime+3    ;; 1 cycle
        MOV       N:_to_val+2, A     ;; 1 cycle
// 1931               to_val[3] = OffTime.hour;
        MOV       A, N:_OffTime+2    ;; 1 cycle
        MOV       N:_to_val+3, A     ;; 1 cycle
// 1932               to_val[4] = OffTime.min;
        MOV       A, N:_OffTime+1    ;; 1 cycle
        MOV       N:_to_val+4, A     ;; 1 cycle
        ; ------------------------------------- Block: 10 cycles
// 1933             }
// 1934             to_days= sel_datediff(to_val[2], to_val[1], to_val[0]);
??dlms_reset_data_87:
        MOV       C, N:_to_val       ;; 1 cycle
        MOV       X, N:_to_val+1     ;; 1 cycle
        MOV       A, N:_to_val+2     ;; 1 cycle
          CFI FunCall _sel_datediff
        CALL      _sel_datediff      ;; 3 cycles
        MOVW      N:_to_days, AX     ;; 1 cycle
// 1935             if((to_days > d_array[day_counter]) || (to_days < from_days))
        MOVW      HL, N:_to_days     ;; 1 cycle
        MOVW      AX, N:_day_counter  ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array)  ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, [DE]           ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BC        ??dlms_reset_data_88  ;; 4 cycles
        ; ------------------------------------- Block: 20 cycles
        MOVW      HL, N:_from_days   ;; 1 cycle
        MOVW      AX, N:_to_days     ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNC       ??dlms_reset_data_82  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 1936             {
// 1937               ls_count_dlms= 0;
??dlms_reset_data_88:
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_ls_count_dlms, AX  ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 1938             }
// 1939           }
// 1940           for(i_l= day_counter, lu8_j= 0; lu8_j < max_day_counter; lu8_j++)
??dlms_reset_data_82:
        MOVW      AX, N:_day_counter  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        ; ------------------------------------- Block: 5 cycles
??Sel_Loadsurvey_buffer_0:
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, N:_max_day_counter  ;; 1 cycle
        BNC       ??dlms_reset_data_79  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 1941           {
// 1942             if((to_days >= d_array[i_l]) && (d_array[i_l] != 0))
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array)  ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [HL]           ;; 1 cycle
        MOVW      HL, N:_to_days     ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BH        ??dlms_reset_data_89  ;; 4 cycles
        ; ------------------------------------- Block: 15 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array)  ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [HL]           ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        BZ        ??dlms_reset_data_89  ;; 4 cycles
        ; ------------------------------------- Block: 14 cycles
// 1943             {
// 1944               to_cntr= i_l;
        MOV       A, [SP]            ;; 1 cycle
        MOV       N:_to_cntr, A      ;; 1 cycle
// 1945               
// 1946               if(to_days > d_array[i_l])
        MOVW      HL, N:_to_days     ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array)  ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, [DE]           ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNC       ??dlms_reset_data_79  ;; 4 cycles
        ; ------------------------------------- Block: 17 cycles
// 1947               {
// 1948                 miss_to_day= 1;
        MOV       A, #0x1            ;; 1 cycle
        MOV       [SP+0x0B], A       ;; 1 cycle
// 1949                 to_cntr= to_cntr + 1;
        INC       N:_to_cntr         ;; 2 cycles
// 1950                 to_val[3]= 0x00;
        MOV       N:_to_val+3, #0x0  ;; 1 cycle
// 1951                 to_val[4]= 0x00;
        MOV       N:_to_val+4, #0x0  ;; 1 cycle
// 1952               }
// 1953               
// 1954               break;
        BR        S:??dlms_reset_data_79  ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 1955             }
// 1956             
// 1957             i_l= i_l - 1;
??dlms_reset_data_89:
        MOV       A, [SP]            ;; 1 cycle
        DEC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 1958             if(i_l == 255)
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_90  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 1959             {
// 1960               i_l= max_day_counter - 1;
        MOV       A, N:_max_day_counter  ;; 1 cycle
        DEC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 1961             }
// 1962           }
??dlms_reset_data_90:
        MOV       A, [SP+0x01]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        BR        S:??Sel_Loadsurvey_buffer_0  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 1963         }
// 1964         
// 1965         if(to_cntr == 200)
??dlms_reset_data_79:
        CMP       N:_to_cntr, #0xC8  ;; 1 cycle
        BNZ       ??dlms_reset_data_91  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 1966         {
// 1967           ls_count_dlms= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_ls_count_dlms, AX  ;; 1 cycle
// 1968           to_cntr= day_counter;
        MOVW      AX, N:_day_counter  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       N:_to_cntr, A      ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        BR        N:??dlms_reset_data_92  ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 1969         }
// 1970         else
// 1971         {
// 1972           from_cntr= 200;
??dlms_reset_data_91:
        MOV       N:_from_cntr, #0xC8  ;; 1 cycle
// 1973           if(from_days > d_array[day_counter])
        MOVW      HL, N:_from_days   ;; 1 cycle
        MOVW      AX, N:_day_counter  ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array)  ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, [DE]           ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNC       ??dlms_reset_data_93  ;; 4 cycles
        ; ------------------------------------- Block: 14 cycles
// 1974           {
// 1975             ls_count_dlms= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_ls_count_dlms, AX  ;; 1 cycle
        BR        N:??dlms_reset_data_94  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 1976           }
// 1977           else
// 1978           {
// 1979             for(i_l= to_cntr, lu8_j= 0; lu8_j < max_day_counter; lu8_j++)
??dlms_reset_data_93:
        MOV       A, N:_to_cntr      ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
??Sel_Loadsurvey_buffer_1:
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, N:_max_day_counter  ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_94  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 1980             {
// 1981               if((from_days >= d_array[i_l]) && (d_array[i_l] != 0))
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array)  ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [HL]           ;; 1 cycle
        MOVW      HL, N:_from_days   ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BH        ??dlms_reset_data_95  ;; 4 cycles
        ; ------------------------------------- Block: 15 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array)  ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [HL]           ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        BZ        ??dlms_reset_data_95  ;; 4 cycles
        ; ------------------------------------- Block: 14 cycles
// 1982               {
// 1983                 if(from_days == d_array[i_l])
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array)  ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [HL]           ;; 1 cycle
        MOVW      HL, N:_from_days   ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNZ       ??dlms_reset_data_96  ;; 4 cycles
        ; ------------------------------------- Block: 15 cycles
// 1984                 {
// 1985                   from_cntr= i_l;
        MOV       A, [SP]            ;; 1 cycle
        MOV       N:_from_cntr, A    ;; 1 cycle
// 1986                   break;
        BR        S:??dlms_reset_data_94  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 1987                 }
// 1988                 else
// 1989                 {
// 1990                   from_cntr= i_l + 1; /* if from_days=24 value not present in the d_array=25,23,22 selection of 25 */
??dlms_reset_data_96:
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       N:_from_cntr, A    ;; 1 cycle
// 1991                   miss_from_day= 1;
        MOV       A, #0x1            ;; 1 cycle
        MOV       [SP+0x08], A       ;; 1 cycle
// 1992                   prev_from_val_hr= from_val[3];
        MOV       A, N:_from_val+3   ;; 1 cycle
        MOV       [SP+0x04], A       ;; 1 cycle
// 1993                   prev_from_val_min= from_val[4];
        MOV       A, N:_from_val+4   ;; 1 cycle
        MOV       [SP+0x09], A       ;; 1 cycle
// 1994                   from_val[3]= 0x00;
        MOV       N:_from_val+3, #0x0  ;; 1 cycle
// 1995                   from_val[4]= 0x00;
        MOV       N:_from_val+4, #0x0  ;; 1 cycle
// 1996                   if(from_cntr >= max_day_counter) /* in case of rollover */
        MOV       A, N:_from_cntr    ;; 1 cycle
        CMP       A, N:_max_day_counter  ;; 1 cycle
        SKC                          ;; 1 cycle
        ; ------------------------------------- Block: 14 cycles
// 1997                   {
// 1998                     from_cntr= 0;
        MOV       N:_from_cntr, #0x0  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 1999                   }
// 2000                   
// 2001                   if(lu8_j == 0) /* if from_cntr greater than to_cntr */
??Sel_Loadsurvey_buffer_2:
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_94  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2002                   {
// 2003                     from_cntr= 200;
        MOV       N:_from_cntr, #0xC8  ;; 1 cycle
// 2004                   }
// 2005                   
// 2006                   break;
        BR        S:??dlms_reset_data_94  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 2007                 }
// 2008               }
// 2009               
// 2010               if((lsro_flag == 0) && (d_array[i_l] == 0)) /* not rollover ,vlaue less than d_array[0] */
??dlms_reset_data_95:
        CMP0      N:_lsro_flag       ;; 1 cycle
        BNZ       ??dlms_reset_data_97  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array)  ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [HL]           ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        BNZ       ??dlms_reset_data_97  ;; 4 cycles
        ; ------------------------------------- Block: 14 cycles
// 2011               {
// 2012                 from_cntr= 0;
        MOV       N:_from_cntr, #0x0  ;; 1 cycle
// 2013                 from_val[3]= 0x00;
        MOV       N:_from_val+3, #0x0  ;; 1 cycle
// 2014                 from_val[4]= 0x00;
        MOV       N:_from_val+4, #0x0  ;; 1 cycle
// 2015                 break;
        BR        S:??dlms_reset_data_94  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 2016               }
// 2017               
// 2018               i_l= i_l - 1;
??dlms_reset_data_97:
        MOV       A, [SP]            ;; 1 cycle
        DEC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 2019               if(i_l == 255)
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_98  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 2020               {
// 2021                 i_l= max_day_counter - 1;
        MOV       A, N:_max_day_counter  ;; 1 cycle
        DEC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 2022               }
// 2023             }
??dlms_reset_data_98:
        MOV       A, [SP+0x01]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        BR        N:??Sel_Loadsurvey_buffer_1  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 2024           }
// 2025           
// 2026           if(from_cntr == 200)
??dlms_reset_data_94:
        CMP       N:_from_cntr, #0xC8  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_92  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2027           {
// 2028             if((lsro_flag == 1))
        CMP       N:_lsro_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_99  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2029             {
// 2030               if(day_counter == max_day_counter - 1)
        MOV       X, N:_max_day_counter  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        DECW      AX                 ;; 1 cycle
        MOVW      HL, N:_day_counter  ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNZ       ??dlms_reset_data_100  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 2031               {
// 2032                 if(d_array[0] > from_days)
        MOVW      HL, N:_d_array     ;; 1 cycle
        MOVW      AX, N:_from_days   ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNC       ??dlms_reset_data_92  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 2033                 {
// 2034                   from_cntr= 0;
        MOV       N:_from_cntr, #0x0  ;; 1 cycle
// 2035                   from_val[3]= 0x00;
        MOV       N:_from_val+3, #0x0  ;; 1 cycle
// 2036                   from_val[4]= 0x00;
        MOV       N:_from_val+4, #0x0  ;; 1 cycle
        BR        S:??dlms_reset_data_92  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 2037                 }
// 2038               }
// 2039               else
// 2040               {
// 2041                 if(d_array[day_counter + 1] > from_days) /* after rollover from_days less than lowest value */
??dlms_reset_data_100:
        MOVW      AX, N:_day_counter  ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array+2)  ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [HL]           ;; 1 cycle
        MOVW      HL, N:_from_days   ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNH       ??dlms_reset_data_101  ;; 4 cycles
        ; ------------------------------------- Block: 13 cycles
// 2042                 {
// 2043                   from_cntr= day_counter + 1;
        MOVW      AX, N:_day_counter  ;; 1 cycle
        INC       X                  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       N:_from_cntr, A    ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 2044                   from_val[3]= 0x00;
        MOV       N:_from_val+3, #0x0  ;; 1 cycle
// 2045                   from_val[4]= 0x00;
        MOV       N:_from_val+4, #0x0  ;; 1 cycle
        BR        S:??dlms_reset_data_92  ;; 3 cycles
        ; ------------------------------------- Block: 10 cycles
// 2046                 }
// 2047                 else
// 2048                 {
// 2049                   ls_count_dlms= 0;
??dlms_reset_data_101:
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_ls_count_dlms, AX  ;; 1 cycle
        BR        S:??dlms_reset_data_92  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 2050                 }
// 2051               }
// 2052             }
// 2053             else if((lsro_flag == 0) && (day_counter == max_day_counter - 1))
??dlms_reset_data_99:
        CMP0      N:_lsro_flag       ;; 1 cycle
        BNZ       ??dlms_reset_data_102  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOV       X, N:_max_day_counter  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        DECW      AX                 ;; 1 cycle
        MOVW      HL, N:_day_counter  ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNZ       ??dlms_reset_data_102  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 2054             {
// 2055               if(d_array[0] > from_days)
        MOVW      HL, N:_d_array     ;; 1 cycle
        MOVW      AX, N:_from_days   ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNC       ??dlms_reset_data_103  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 2056               {
// 2057                 from_cntr= 0;
        MOV       N:_from_cntr, #0x0  ;; 1 cycle
// 2058                 from_val[3]= 0x00;
        MOV       N:_from_val+3, #0x0  ;; 1 cycle
// 2059                 from_val[4]= 0x00;
        MOV       N:_from_val+4, #0x0  ;; 1 cycle
        BR        S:??dlms_reset_data_92  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 2060               }
// 2061               else
// 2062               {
// 2063                 ls_count_dlms= 0;
??dlms_reset_data_103:
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_ls_count_dlms, AX  ;; 1 cycle
        BR        S:??dlms_reset_data_92  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 2064               }
// 2065             }
// 2066             else
// 2067             {
// 2068               ls_count_dlms= 0;
??dlms_reset_data_102:
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_ls_count_dlms, AX  ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 2069             }
// 2070           }
// 2071         }
// 2072         
// 2073         if(ls_count_dlms != 0)
??dlms_reset_data_92:
        CLRW      AX                 ;; 1 cycle
        CMPW      AX, N:_ls_count_dlms  ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_76  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2074         {
// 2075           from_val[3]= hex_to_bin(from_val[3]);
        MOV       A, N:_from_val+3   ;; 1 cycle
          CFI FunCall _hex_to_bin
        CALL      _hex_to_bin        ;; 3 cycles
        MOV       N:_from_val+3, A   ;; 1 cycle
// 2076           from_val[4]= hex_to_bin(from_val[4]);
        MOV       A, N:_from_val+4   ;; 1 cycle
          CFI FunCall _hex_to_bin
        CALL      _hex_to_bin        ;; 3 cycles
        MOV       N:_from_val+4, A   ;; 1 cycle
// 2077           to_val[3]= hex_to_bin(to_val[3]);
        MOV       A, N:_to_val+3     ;; 1 cycle
          CFI FunCall _hex_to_bin
        CALL      _hex_to_bin        ;; 3 cycles
        MOV       N:_to_val+3, A     ;; 1 cycle
// 2078           to_val[4]= hex_to_bin(to_val[4]);
        MOV       A, N:_to_val+4     ;; 1 cycle
          CFI FunCall _hex_to_bin
        CALL      _hex_to_bin        ;; 3 cycles
        MOV       N:_to_val+4, A     ;; 1 cycle
// 2079           
// 2080           from_cntr1= ((24 * mdi_sel_ls * ((uint16_t)(from_cntr)) + (from_val[3] * mdi_sel_ls) + (from_val[4] / (60 / mdi_sel_ls))));
        MOV       X, N:_mdi_sel_ls   ;; 1 cycle
        MOV       A, N:_from_val+3   ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       C, N:_from_cntr    ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+22
        POP       HL                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, N:_mdi_sel_ls   ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x18          ;; 1 cycle
        MULHU                        ;; 2 cycles
        PUSH      HL                 ;; 1 cycle
          CFI CFA SP+22
        POP       BC                 ;; 1 cycle
          CFI CFA SP+20
        MULHU                        ;; 2 cycles
        ADDW      AX, DE             ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOV       X, N:_mdi_sel_ls   ;; 1 cycle
        MOV       A, #0x3C           ;; 1 cycle
          CFI FunCall ?UC_DIV_L01
        CALL      N:?UC_DIV_L01      ;; 3 cycles
        MOV       B, A               ;; 1 cycle
        MOV       A, B               ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, N:_from_val+4   ;; 1 cycle
          CFI FunCall ?UC_DIV_L01
        CALL      N:?UC_DIV_L01      ;; 3 cycles
        MOV       C, A               ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        ADDW      AX, BC             ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 2081           
// 2082           if((from_val[4] % (60 / mdi_sel_ls)) != 0)
        MOV       X, N:_mdi_sel_ls   ;; 1 cycle
        MOV       A, #0x3C           ;; 1 cycle
          CFI FunCall ?UC_DIV_L01
        CALL      N:?UC_DIV_L01      ;; 3 cycles
        MOV       B, A               ;; 1 cycle
        MOV       A, B               ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, N:_from_val+4   ;; 1 cycle
          CFI FunCall ?UC_MOD_L01
        CALL      N:?UC_MOD_L01      ;; 3 cycles
        MOV       B, A               ;; 1 cycle
        CMP0      B                  ;; 1 cycle
        BZ        ??dlms_reset_data_104  ;; 4 cycles
        ; ------------------------------------- Block: 74 cycles
// 2083           {
// 2084             from_cntr1+= 1;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 2085           }
// 2086           
// 2087           to_cntr1= ((24 * mdi_sel_ls * (uint16_t)(to_cntr)) + (to_val[3] * mdi_sel_ls) + (to_val[4] / (60 / mdi_sel_ls)));
??dlms_reset_data_104:
        MOV       X, N:_mdi_sel_ls   ;; 1 cycle
        MOV       A, N:_to_val+3     ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       C, N:_to_cntr      ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+22
        POP       HL                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, N:_mdi_sel_ls   ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x18          ;; 1 cycle
        MULHU                        ;; 2 cycles
        PUSH      HL                 ;; 1 cycle
          CFI CFA SP+22
        POP       BC                 ;; 1 cycle
          CFI CFA SP+20
        MULHU                        ;; 2 cycles
        ADDW      AX, DE             ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOV       X, N:_mdi_sel_ls   ;; 1 cycle
        MOV       A, #0x3C           ;; 1 cycle
          CFI FunCall ?UC_DIV_L01
        CALL      N:?UC_DIV_L01      ;; 3 cycles
        MOV       B, A               ;; 1 cycle
        MOV       A, B               ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, N:_to_val+4     ;; 1 cycle
          CFI FunCall ?UC_DIV_L01
        CALL      N:?UC_DIV_L01      ;; 3 cycles
        MOV       C, A               ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        ADDW      AX, BC             ;; 1 cycle
        MOVW      [SP+0x06], AX      ;; 1 cycle
// 2088           
// 2089           if((from_cntr1 == 0) && (to_cntr1 == 0) && (1 != lsro_flag))
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        BNZ       ??dlms_reset_data_105  ;; 4 cycles
        ; ------------------------------------- Block: 42 cycles
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        BNZ       ??dlms_reset_data_105  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        CMP       N:_lsro_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_105  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2090           {
// 2091             ls_count_dlms= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_ls_count_dlms, AX  ;; 1 cycle
        BR        N:??dlms_reset_data_106  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 2092           }
// 2093           else
// 2094           {
// 2095             /*example- days miss 8th on 9th off, 10th off 11th on and
// 2096             data read with selective access from 11th 00:00 to 11th 03:00
// 2097             entry comes 9th 00:00- check introduce to avid this entry.*/
// 2098             /*if((from_val[4]==0x00)&&(from_val[3]==0x00)&&(to_cntr==from_cntr)&&((d_array[to_cntr]-d_array[to_cntr-1])>1)&&(to_cntr!=0)&&(miss_from_day!=1))
// 2099             {
// 2100             from_cntr1+=1;
// 2101           } */
// 2102             if((from_val[4] == 0x00) && (from_val[3] == 0x00) && ((d_array[from_cntr] - d_array[from_cntr - 1]) > 1) && (from_cntr != 0) && (miss_from_day != 1))
??dlms_reset_data_105:
        CMP0      N:_from_val+4      ;; 1 cycle
        BNZ       ??dlms_reset_data_107  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_from_val+3      ;; 1 cycle
        BNZ       ??dlms_reset_data_107  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOV       X, N:_from_cntr    ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array-2)  ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [HL]           ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOV       X, N:_from_cntr    ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array)  ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, [DE]           ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        CMPW      AX, #0x2           ;; 1 cycle
        BC        ??dlms_reset_data_107  ;; 4 cycles
        ; ------------------------------------- Block: 23 cycles
        CMP0      N:_from_cntr       ;; 1 cycle
        BZ        ??dlms_reset_data_107  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOV       A, [SP+0x08]       ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BZ        ??dlms_reset_data_107  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2103             {
// 2104               from_cntr1+= 1;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 2105             }
// 2106             
// 2107             if(((((prev_from_val_hr > 0x00) || ((prev_from_val_hr == 0) && (prev_from_val_min > 0x00))) && ((from_days - d_array[from_cntr - 1]) == 1)) || ((from_days - d_array[from_cntr - 1]) > 1)) && (miss_from_day == 1))
??dlms_reset_data_107:
        MOV       A, [SP+0x04]       ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_108  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x04]       ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_109  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x09]       ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BZ        ??dlms_reset_data_109  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
??dlms_reset_data_108:
        MOV       X, N:_from_cntr    ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array-2)  ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, [DE]           ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, N:_from_days   ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        CMPW      AX, #0x1           ;; 1 cycle
        BZ        ??dlms_reset_data_110  ;; 4 cycles
        ; ------------------------------------- Block: 16 cycles
??dlms_reset_data_109:
        MOV       X, N:_from_cntr    ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array-2)  ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, [DE]           ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, N:_from_days   ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        CMPW      AX, #0x2           ;; 1 cycle
        BC        ??dlms_reset_data_111  ;; 4 cycles
        ; ------------------------------------- Block: 16 cycles
??dlms_reset_data_110:
        MOV       A, [SP+0x08]       ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_111  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2108             {
// 2109               from_cntr1+= 1;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 2110             }
// 2111             
// 2112             if(from_cntr1 > 0)
??dlms_reset_data_111:
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        BZ        ??dlms_reset_data_112  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2113             {
// 2114               from_cntr1= from_cntr1 - 1;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        DECW      AX                 ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 2115             }
// 2116             
// 2117             if(to_cntr1 > 0)
??dlms_reset_data_112:
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        BZ        ??dlms_reset_data_113  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2118             {
// 2119               to_cntr1= to_cntr1 - 1;
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        DECW      AX                 ;; 1 cycle
        MOVW      [SP+0x06], AX      ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 2120             }
// 2121             
// 2122             if((0 == from_cntr1) && (1 == lsro_flag) && (0 == to_cntr1))
??dlms_reset_data_113:
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_114  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        CMP       N:_lsro_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_114  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        BNZ       ??dlms_reset_data_114  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2123             {
// 2124               if((from_val[4] > 0) && (to_val[4] > 0) && (to_val[4] < (60 / mdi_sel_ls)))
        CMP0      N:_from_val+4      ;; 1 cycle
        BZ        ??dlms_reset_data_115  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_to_val+4        ;; 1 cycle
        BZ        ??dlms_reset_data_115  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOV       C, N:_to_val+4     ;; 1 cycle
        MOV       X, N:_mdi_sel_ls   ;; 1 cycle
        MOV       A, #0x3C           ;; 1 cycle
          CFI FunCall ?UC_DIV_L01
        CALL      N:?UC_DIV_L01      ;; 3 cycles
        MOV       B, A               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        CMP       A, B               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        BNC       ??dlms_reset_data_115  ;; 4 cycles
        ; ------------------------------------- Block: 14 cycles
// 2125               {
// 2126                 ls_count_dlms= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_ls_count_dlms, AX  ;; 1 cycle
        BR        N:??dlms_reset_data_106  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 2127               }
// 2128               else if(from_val[4] > 0)
??dlms_reset_data_115:
        CMP0      N:_from_val+4      ;; 1 cycle
        BZ        ??dlms_reset_data_116  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2129               {
// 2130                 from_cntr1= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 2131                 ls_count_dlms= (to_val[4] / (60 / mdi_sel_ls));
        MOV       X, N:_mdi_sel_ls   ;; 1 cycle
        MOV       A, #0x3C           ;; 1 cycle
          CFI FunCall ?UC_DIV_L01
        CALL      N:?UC_DIV_L01      ;; 3 cycles
        MOV       B, A               ;; 1 cycle
        MOV       A, B               ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, N:_to_val+4     ;; 1 cycle
          CFI FunCall ?UC_DIV_L01
        CALL      N:?UC_DIV_L01      ;; 3 cycles
        MOV       C, A               ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_ls_count_dlms, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 2132                 rollover_case= 1;
        MOV       A, #0x1            ;; 1 cycle
        MOV       [SP+0x05], A       ;; 1 cycle
        BR        N:??dlms_reset_data_106  ;; 3 cycles
        ; ------------------------------------- Block: 24 cycles
// 2133               }
// 2134               else
// 2135               {
// 2136                 from_cntr1= MAX_LS - 1;
??dlms_reset_data_116:
        MOVW      AX, #0xE3F         ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 2137                 ls_count_dlms= 1 + (to_val[4] / (60 / mdi_sel_ls));
        MOV       X, N:_mdi_sel_ls   ;; 1 cycle
        MOV       A, #0x3C           ;; 1 cycle
          CFI FunCall ?UC_DIV_L01
        CALL      N:?UC_DIV_L01      ;; 3 cycles
        MOV       B, A               ;; 1 cycle
        MOV       A, B               ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, N:_to_val+4     ;; 1 cycle
          CFI FunCall ?UC_DIV_L01
        CALL      N:?UC_DIV_L01      ;; 3 cycles
        MOV       C, A               ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        INCW      BC                 ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_ls_count_dlms, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 2138                 rollover_case= 1;
        MOV       A, #0x1            ;; 1 cycle
        MOV       [SP+0x05], A       ;; 1 cycle
        BR        N:??dlms_reset_data_106  ;; 3 cycles
        ; ------------------------------------- Block: 25 cycles
// 2139               }
// 2140             }
// 2141             else if((0 == from_cntr1) && (1 == lsro_flag) && (to_cntr1 > 0))
??dlms_reset_data_114:
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        BNZ       ??dlms_reset_data_117  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        CMP       N:_lsro_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_117  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        BZ        ??dlms_reset_data_117  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2142             {
// 2143               if(from_val[4] > 0)
        CMP0      N:_from_val+4      ;; 1 cycle
        BZ        ??dlms_reset_data_118  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2144               {
// 2145                 from_cntr1= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 2146                 ls_count_dlms= to_cntr1 + 1;
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        MOVW      N:_ls_count_dlms, AX  ;; 1 cycle
// 2147                 rollover_case= 1;
        MOV       A, #0x1            ;; 1 cycle
        MOV       [SP+0x05], A       ;; 1 cycle
        BR        S:??dlms_reset_data_106  ;; 3 cycles
        ; ------------------------------------- Block: 10 cycles
// 2148               }
// 2149               else
// 2150               {
// 2151                 from_cntr1= MAX_LS - 1;
??dlms_reset_data_118:
        MOVW      AX, #0xE3F         ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 2152                 ls_count_dlms= to_cntr1 + 1 + 1;
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        ADDW      AX, #0x2           ;; 1 cycle
        MOVW      N:_ls_count_dlms, AX  ;; 1 cycle
// 2153                 rollover_case= 1;
        MOV       A, #0x1            ;; 1 cycle
        MOV       [SP+0x05], A       ;; 1 cycle
        BR        S:??dlms_reset_data_106  ;; 3 cycles
        ; ------------------------------------- Block: 10 cycles
// 2154               }
// 2155             }
// 2156             else if((0 == to_cntr1) && (from_cntr1 > 1))
??dlms_reset_data_117:
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        BNZ       ??dlms_reset_data_119  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        CMPW      AX, #0x2           ;; 1 cycle
        BC        ??dlms_reset_data_119  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2157             {
// 2158               if(0 == to_val[4])
        CMP0      N:_to_val+4        ;; 1 cycle
        BNZ       ??dlms_reset_data_120  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2159               {
// 2160                 ls_count_dlms= MAX_LS - from_cntr1;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, #0xE40         ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        MOVW      N:_ls_count_dlms, AX  ;; 1 cycle
        BR        S:??dlms_reset_data_106  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 2161               }
// 2162               else
// 2163               {
// 2164                 ls_count_dlms= MAX_LS - from_cntr1 + 1;
??dlms_reset_data_120:
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, #0xE41         ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        MOVW      N:_ls_count_dlms, AX  ;; 1 cycle
        BR        S:??dlms_reset_data_106  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 2165               }
// 2166             }
// 2167             else if(to_cntr1 < from_cntr1)
??dlms_reset_data_119:
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNC       ??dlms_reset_data_121  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 2168             {
// 2169               ls_count_dlms= MAX_LS - (from_cntr1 - to_cntr1 - 1);
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, #0xE40         ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        MOVW      N:_ls_count_dlms, AX  ;; 1 cycle
        BR        S:??dlms_reset_data_106  ;; 3 cycles
        ; ------------------------------------- Block: 14 cycles
// 2170             }
// 2171             else
// 2172             {
// 2173               ls_count_dlms= to_cntr1 - from_cntr1 + 1;
??dlms_reset_data_121:
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        MOVW      N:_ls_count_dlms, AX  ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
// 2174             }
// 2175           }
// 2176           
// 2177           if(((1 == miss_to_day) && (1 == miss_from_day) && ((prev_from_val_hr > 0x00) || ((0 == prev_from_val_hr) && (prev_from_val_min > 0x00))) && (to_cntr == from_cntr)))
??dlms_reset_data_106:
        MOV       A, [SP+0x0B]       ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_122  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x08]       ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_122  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x04]       ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_123  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x04]       ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_122  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x09]       ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BZ        ??dlms_reset_data_122  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
??dlms_reset_data_123:
        MOV       A, N:_to_cntr      ;; 1 cycle
        CMP       A, N:_from_cntr    ;; 1 cycle
        BNZ       ??dlms_reset_data_122  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2178           {
// 2179             ls_count_dlms= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_ls_count_dlms, AX  ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 2180           }
// 2181           
// 2182           if((1 == miss_from_day) && ((prev_from_val_hr > 0x00) || ((0 == prev_from_val_hr) && ((prev_from_val_min > 0x00) || (((d_array[from_cntr] - d_array[from_cntr - 1]) > 2) && (1 != miss_to_day) && (from_days > (d_array[from_cntr - 1] + 1)))))) && ((0 == to_val[3]) && (to_val[4] < (60 / mdi_sel_ls))) && (to_cntr == from_cntr))
??dlms_reset_data_122:
        MOV       A, [SP+0x08]       ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_124  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x04]       ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_125  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x04]       ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_124  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x09]       ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_125  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       X, N:_from_cntr    ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array-2)  ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [HL]           ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOV       X, N:_from_cntr    ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array)  ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, [DE]           ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        CMPW      AX, #0x3           ;; 1 cycle
        BC        ??dlms_reset_data_124  ;; 4 cycles
        ; ------------------------------------- Block: 23 cycles
        MOV       A, [SP+0x0B]       ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BZ        ??dlms_reset_data_124  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOVW      HL, N:_from_days   ;; 1 cycle
        MOV       X, N:_from_cntr    ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array-2)  ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, [DE]           ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNC       ??dlms_reset_data_124  ;; 4 cycles
        ; ------------------------------------- Block: 15 cycles
??dlms_reset_data_125:
        CMP0      N:_to_val+3        ;; 1 cycle
        BNZ       ??dlms_reset_data_124  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOV       C, N:_to_val+4     ;; 1 cycle
        MOV       X, N:_mdi_sel_ls   ;; 1 cycle
        MOV       A, #0x3C           ;; 1 cycle
          CFI FunCall ?UC_DIV_L01
        CALL      N:?UC_DIV_L01      ;; 3 cycles
        MOV       B, A               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        CMP       A, B               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        BNC       ??dlms_reset_data_124  ;; 4 cycles
        ; ------------------------------------- Block: 14 cycles
        MOV       A, N:_to_cntr      ;; 1 cycle
        CMP       A, N:_from_cntr    ;; 1 cycle
        BNZ       ??dlms_reset_data_124  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2183           {
// 2184             ls_count_dlms= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_ls_count_dlms, AX  ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 2185           }
// 2186           
// 2187           if(ls_count_dlms >= MAX_LS)
??dlms_reset_data_124:
        MOVW      AX, N:_ls_count_dlms  ;; 1 cycle
        CMPW      AX, #0xE40         ;; 1 cycle
        BC        ??dlms_reset_data_126  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2188           {
// 2189             ls_count_dlms+= MAX_LS;
        MOVW      AX, N:_ls_count_dlms  ;; 1 cycle
        ADDW      AX, #0xE40         ;; 1 cycle
        MOVW      N:_ls_count_dlms, AX  ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 2190           }
// 2191           
// 2192           if(from_cntr1 >= MAX_LS)
??dlms_reset_data_126:
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        CMPW      AX, #0xE40         ;; 1 cycle
        BC        ??dlms_reset_data_127  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2193           {
// 2194             UintLoadSurptr= from_cntr1 - MAX_LS;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        ADDW      AX, #0xF1C0        ;; 1 cycle
        MOVW      N:_UintLoadSurptr, AX  ;; 1 cycle
        BR        S:??dlms_reset_data_76  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 2195           }
// 2196           else
// 2197           {
// 2198             UintLoadSurptr= from_cntr1;
??dlms_reset_data_127:
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      N:_UintLoadSurptr, AX  ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 2199           }
// 2200         }
// 2201       }
// 2202       
// 2203       if((to_days == from_days) && (from_cntr1 > to_cntr1) && (rollover_case != 1))
??dlms_reset_data_76:
        MOVW      HL, N:_from_days   ;; 1 cycle
        MOVW      AX, N:_to_days     ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNZ       ??dlms_reset_data_73  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNC       ??dlms_reset_data_73  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP+0x05]       ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BZ        ??dlms_reset_data_73  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2204       {
// 2205         ls_count_dlms= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_ls_count_dlms, AX  ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 2206       }
// 2207     }
// 2208   }
// 2209   
// 2210   if(sel_access_flag == 0)
??dlms_reset_data_73:
        CMP0      N:_sel_access_flag  ;; 1 cycle
        BNZ       ??dlms_reset_data_128  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2211   {
// 2212     no_obj= ls_max_obj;
        MOV       A, N:_ls_max_obj   ;; 1 cycle
        MOV       N:_no_obj, A       ;; 1 cycle
// 2213     no_bytes= 54; /* 16 + (no_obj-1)*3; */
        MOV       N:_no_bytes, #0x36  ;; 1 cycle
// 2214     for(i_l= 0; i_l < 15; i_l++)
        MOV       B, #0x0            ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
??Sel_Loadsurvey_buffer_3:
        MOV       A, B               ;; 1 cycle
        CMP       A, #0xF            ;; 1 cycle
        BNC       ??dlms_reset_data_129  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2215     {
// 2216       sel_obj[i_l]= 0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_sel_obj)[B], A   ;; 1 cycle
// 2217     }
        INC       B                  ;; 1 cycle
        BR        S:??Sel_Loadsurvey_buffer_3  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 2218     //        memset(sel_obj,0,15);
// 2219     for(i_l= 0; i_l < ls_max_obj; i_l++)
??dlms_reset_data_129:
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??Sel_Loadsurvey_buffer_4:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, N:_ls_max_obj   ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_130  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2220     {
// 2221       mm2= ls_conf_obj[i_l];
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_ls_conf_obj)[B]  ;; 1 cycle
        MOV       [SP+0x0A], A       ;; 1 cycle
// 2222       sel_obj[mm2]= 1;
        MOV       A, [SP+0x0A]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, #0x1            ;; 1 cycle
        MOV       (_sel_obj)[B], A   ;; 1 cycle
// 2223     }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??Sel_Loadsurvey_buffer_4  ;; 3 cycles
        ; ------------------------------------- Block: 14 cycles
// 2224   }
// 2225   else
// 2226   {
// 2227     if(no_obj > ls_max_obj)
??dlms_reset_data_128:
        MOV       A, N:_ls_max_obj   ;; 1 cycle
        CMP       A, N:_no_obj       ;; 1 cycle
        BNC       ??dlms_reset_data_131  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2228     {
// 2229       no_obj= ls_max_obj;
        MOV       A, N:_ls_max_obj   ;; 1 cycle
        MOV       N:_no_obj, A       ;; 1 cycle
// 2230       for(i_l= 0; i_l < 15; i_l++)
        MOV       A, #0x0            ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
??Sel_Loadsurvey_buffer_5:
        CMP       A, #0xF            ;; 1 cycle
        BNC       ??dlms_reset_data_132  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2231       {
// 2232         sel_obj[i_l]= 0;
        MOV       B, A               ;; 1 cycle
        MOV       X, #0x0            ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_sel_obj)[B], A   ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 2233       }
        INC       A                  ;; 1 cycle
        BR        S:??Sel_Loadsurvey_buffer_5  ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 2234       //            memset(sel_obj,0,15);
// 2235       for(i_l= 0; i_l < ls_max_obj; i_l++)
??dlms_reset_data_132:
        MOV       X, #0x0            ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
??Sel_Loadsurvey_buffer_6:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, N:_ls_max_obj   ;; 1 cycle
        BNC       ??dlms_reset_data_131  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2236       {
// 2237         mm2= ls_conf_obj[i_l];
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_ls_conf_obj)[B]  ;; 1 cycle
        MOV       [SP+0x0A], A       ;; 1 cycle
// 2238         sel_obj[mm2]= 1;
        MOV       A, [SP+0x0A]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, #0x1            ;; 1 cycle
        MOV       (_sel_obj)[B], A   ;; 1 cycle
// 2239       }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??Sel_Loadsurvey_buffer_6  ;; 3 cycles
        ; ------------------------------------- Block: 14 cycles
// 2240     }
// 2241     
// 2242     if(no_obj == 11)
??dlms_reset_data_131:
        CMP       N:_no_obj, #0xB    ;; 1 cycle
        BNZ       ??dlms_reset_data_133  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2243     {
// 2244       no_bytes= 54;
        MOV       N:_no_bytes, #0x36  ;; 1 cycle
        BR        S:??dlms_reset_data_130  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 2245     }
// 2246     else
// 2247     {
// 2248       no_bytes = sel_obj[0]*16 +  (no_obj-sel_obj[0]-sel_obj[7]-sel_obj[8]-sel_obj[9]-sel_obj[10])*3 + sel_obj[7]*5 + sel_obj[8]*5 + sel_obj[9]*5 + sel_obj[10]*5;   
??dlms_reset_data_133:
        MOV       A, N:_no_obj       ;; 1 cycle
        SUB       A, N:_sel_obj      ;; 1 cycle
        SUB       A, N:_sel_obj+7    ;; 1 cycle
        SUB       A, N:_sel_obj+8    ;; 1 cycle
        SUB       A, N:_sel_obj+9    ;; 1 cycle
        SUB       A, N:_sel_obj+10   ;; 1 cycle
        MOV       X, #0x3            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, N:_sel_obj      ;; 1 cycle
        MOV       X, #0x10           ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       B, A               ;; 1 cycle
        MOV       A, N:_sel_obj+7    ;; 1 cycle
        MOV       X, #0x5            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       B, A               ;; 1 cycle
        MOV       A, N:_sel_obj+8    ;; 1 cycle
        MOV       X, #0x5            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       B, A               ;; 1 cycle
        MOV       A, N:_sel_obj+9    ;; 1 cycle
        MOV       X, #0x5            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       B, A               ;; 1 cycle
        MOV       A, N:_sel_obj+10   ;; 1 cycle
        MOV       X, #0x5            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       A, B               ;; 1 cycle
        MOV       N:_no_bytes, A     ;; 1 cycle
        ; ------------------------------------- Block: 36 cycles
// 2249     }
// 2250   }
// 2251   
// 2252   /* *************** */
// 2253   
// 2254   if(block_no == 1)
??dlms_reset_data_130:
        ONEW      AX                 ;; 1 cycle
        CMPW      AX, N:_block_no    ;; 1 cycle
        BNZ       ??dlms_reset_data_134  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2255   {
// 2256     //        info[k++]= 0x01; /* array */
// 2257     //        info[k++]= 0x82;
// 2258     array(0x82,0);
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0x82           ;; 1 cycle
          CFI FunCall _array
        CALL      _array             ;; 3 cycles
// 2259     info[k++]= ls_count_dlms / 0x100; /* No Of load Survey */
        MOVW      AX, N:_ls_count_dlms  ;; 1 cycle
        CLRB      X                  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 2260     info[k++]= ls_count_dlms % 0x100; /*  */
        MOVW      AX, N:_ls_count_dlms  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 2261     buffer_filled_u16= (DLMS_MAX_BUFF_SIZE-k-2) / no_bytes;
        XCH       A, D               ;; 1 cycle
        MOV       A, N:_no_bytes     ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOVW      AX, #0x1FE         ;; 1 cycle
        SUBW      AX, N:_k           ;; 1 cycle
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        MOVW      [SP+0x0E], AX      ;; 1 cycle
        BR        S:??dlms_reset_data_135  ;; 3 cycles
        ; ------------------------------------- Block: 40 cycles
// 2262   }
// 2263   else
// 2264   {
// 2265     buffer_filled_u16= (DLMS_MAX_BUFF_SIZE-k) / no_bytes;
??dlms_reset_data_134:
        XCH       A, D               ;; 1 cycle
        MOV       A, N:_no_bytes     ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOVW      AX, #0x200         ;; 1 cycle
        SUBW      AX, N:_k           ;; 1 cycle
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        MOVW      [SP+0x0E], AX      ;; 1 cycle
        ; ------------------------------------- Block: 18 cycles
// 2266   }
// 2267   
// 2268   for(i_l= 0; i_l < buffer_filled_u16; i_l++, UintLoadSurptr++) /* 3 */
??dlms_reset_data_135:
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??Sel_Loadsurvey_buffer_7:
        MOVW      AX, [SP+0x0E]      ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNC       ??dlms_reset_data_136  ;; 4 cycles
        ; ------------------------------------- Block: 10 cycles
// 2269   {
// 2270     if(UintLoadSurptr >= MAX_LS)
        MOVW      AX, N:_UintLoadSurptr  ;; 1 cycle
        CMPW      AX, #0xE40         ;; 1 cycle
        BC        ??dlms_reset_data_137  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2271     {
// 2272       /*                      from_cntr1= loadsurvey_init_add; */
// 2273       UintLoadSurptr= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_UintLoadSurptr, AX  ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 2274     }
// 2275     
// 2276     /*              else */
// 2277     {
// 2278       /*                      from_cntr1=loadsurvey_init_add+(UintLoadSurptr*0x10); */
// 2279     }
// 2280     
// 2281     if((ls_count_dlms == ls_count_local))
??dlms_reset_data_137:
        MOVW      HL, N:_ls_count_local  ;; 1 cycle
        MOVW      AX, N:_ls_count_dlms  ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNZ       ??dlms_reset_data_138  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 2282     {
// 2283       multi_filling_f= 0;
        MOV       N:_multi_filling_f, #0x0  ;; 1 cycle
// 2284       buffer_first_not_fill_f= 0;
        MOV       N:_buffer_first_not_fill_f, #0x0  ;; 1 cycle
// 2285       u8temp= 1;
        MOV       A, #0x1            ;; 1 cycle
        MOV       [SP+0x0C], A       ;; 1 cycle
// 2286       break;
        BR        S:??dlms_reset_data_136  ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 2287     }
// 2288     
// 2289     ls_count_local++;
??dlms_reset_data_138:
        INCW      N:_ls_count_local  ;; 2 cycles
// 2290     load_survey_fill();
          CFI FunCall _load_survey_fill
        CALL      _load_survey_fill  ;; 3 cycles
// 2291     /*              load_survey_fill(from_cntr1); */
// 2292   }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        INCW      N:_UintLoadSurptr  ;; 2 cycles
        BR        S:??Sel_Loadsurvey_buffer_7  ;; 3 cycles
        ; ------------------------------------- Block: 13 cycles
// 2293   
// 2294   send_data(u8temp);
??dlms_reset_data_136:
        MOV       A, [SP+0x0C]       ;; 1 cycle
          CFI FunCall _send_data
        CALL      _send_data         ;; 3 cycles
// 2295   /* ******************************* */
// 2296 }
        ADDW      SP, #0x10          ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock31
        ; ------------------------------------- Block: 11 cycles
        ; ------------------------------------- Total: 1511 cycles
// 2297 
// 2298 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function _load_survey_fill
        CODE
// 2299 void load_survey_fill(void)
// 2300 {
_load_survey_fill:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 16
        SUBW      SP, #0x10          ;; 1 cycle
          CFI CFA SP+20
// 2301   uint8 ls_eep_id;
// 2302   us16 ls_address = 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 2303   us32 ls_pg1_address=0;
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x4           ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [HL], AX           ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
// 2304   structure(no_obj);
        MOV       A, N:_no_obj       ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 2305   
// 2306   ls_pg1_address = ((uint32_t)COMPART_LS_START_ADD+((us32)UintLoadSurptr*COMPART_LS_SIZE));   
        MOVW      AX, N:_UintLoadSurptr  ;; 1 cycle
        MOVW      BC, #0x20          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0xCB00        ;; 1 cycle
        SKNC
        INCW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        ADDW      AX, #0x0           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        XCHW      AX, HL             ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x4           ;; 1 cycle
        XCHW      AX, HL             ;; 1 cycle
        MOVW      [HL], AX           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 2307   ls_address=ls_pg1_address%COMPART_LS_MEM_BYTES;
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 2308   ls_eep_id=ls_pg1_address/COMPART_LS_MEM_BYTES;
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        CLRW      AX                 ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 2309   
// 2310   eprom_read(ls_address,ls_eep_id,PAGE_2,AUTO_CALC);          
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2311   
// 2312   if(sel_obj[0] == 1)
        CMP       N:_sel_obj, #0x1   ;; 1 cycle
        BNZ       ??dlms_reset_data_139  ;; 4 cycles
        ; ------------------------------------- Block: 57 cycles
// 2313   {
// 2314     TempTime = char_array_into_time5(&opr_data[0]);
        MOVW      BC, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
          CFI FunCall _char_array_into_time5
        CALL      _char_array_into_time5  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
// 2315     date_time(TempTime.day,TempTime.month,TempTime.year,TempTime.hour,TempTime.min,0,0); 
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       D, #0x0            ;; 1 cycle
        MOV       A, N:_TempTime+1   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_TempTime+2   ;; 1 cycle
        MOV       C, N:_TempTime+6   ;; 1 cycle
        MOV       X, N:_TempTime+5   ;; 1 cycle
        MOV       A, N:_TempTime+3   ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+20
        ; ------------------------------------- Block: 37 cycles
// 2316   }
// 2317   
// 2318   if(sel_obj[1] == 1)
??dlms_reset_data_139:
        CMP       N:_sel_obj+1, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_140  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2319   {
// 2320     val_2byt(opr_data[11], opr_data[12]); /* Ir */
        MOV       X, N:_opr_data+12  ;; 1 cycle
        MOV       A, N:_opr_data+11  ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 2321   }
// 2322   
// 2323   if(sel_obj[2] == 1)
??dlms_reset_data_140:
        CMP       N:_sel_obj+2, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_141  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2324   {
// 2325     val_2byt(opr_data[13], opr_data[14]); /* Iy */
        MOV       X, N:_opr_data+14  ;; 1 cycle
        MOV       A, N:_opr_data+13  ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 2326   }
// 2327   
// 2328   if(sel_obj[3] == 1)
??dlms_reset_data_141:
        CMP       N:_sel_obj+3, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_142  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2329   {
// 2330     val_2byt(opr_data[15], opr_data[16]); /* Ib */
        MOV       X, N:_opr_data+16  ;; 1 cycle
        MOV       A, N:_opr_data+15  ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 2331   }
// 2332   
// 2333   if(sel_obj[4] == 1)
??dlms_reset_data_142:
        CMP       N:_sel_obj+4, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_143  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2334   {
// 2335     val_2byt(opr_data[5], opr_data[6]); /* Vr */
        MOV       X, N:_opr_data+6   ;; 1 cycle
        MOV       A, N:_opr_data+5   ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 2336   }
// 2337   
// 2338   if(sel_obj[5] == 1)
??dlms_reset_data_143:
        CMP       N:_sel_obj+5, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_144  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2339   {
// 2340     val_2byt(opr_data[7], opr_data[8]); /* Vy */
        MOV       X, N:_opr_data+8   ;; 1 cycle
        MOV       A, N:_opr_data+7   ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 2341   }
// 2342   
// 2343   if(sel_obj[6] == 1)
??dlms_reset_data_144:
        CMP       N:_sel_obj+6, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_145  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2344   {
// 2345     val_2byt(opr_data[9], opr_data[10]); /* Vb */
        MOV       X, N:_opr_data+10  ;; 1 cycle
        MOV       A, N:_opr_data+9   ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 2346   }
// 2347   
// 2348   if(sel_obj[7] == 1)
??dlms_reset_data_145:
        CMP       N:_sel_obj+7, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_146  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2349   {
// 2350     val_2byt(opr_data[17], opr_data[18]);  /* kWh */
        MOV       X, N:_opr_data+18  ;; 1 cycle
        MOV       A, N:_opr_data+17  ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 2351   }
// 2352   
// 2353   if(sel_obj[8] == 1)
??dlms_reset_data_146:
        CMP       N:_sel_obj+8, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_147  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2354   {
// 2355     val_2byt(opr_data[21], opr_data[22]); /* kvarh lag*/
        MOV       X, N:_opr_data+22  ;; 1 cycle
        MOV       A, N:_opr_data+21  ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 2356   }
// 2357   
// 2358   if(sel_obj[9] == 1)
??dlms_reset_data_147:
        CMP       N:_sel_obj+9, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_148  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2359   {
// 2360     val_2byt(opr_data[23], opr_data[24]);  /*kvarh lead  */
        MOV       X, N:_opr_data+24  ;; 1 cycle
        MOV       A, N:_opr_data+23  ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 2361   }
// 2362   
// 2363   if(sel_obj[10] == 1)
??dlms_reset_data_148:
        CMP       N:_sel_obj+10, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_149  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2364   {
// 2365     val_2byt(opr_data[19], opr_data[20]); /* kVAh  */
        MOV       X, N:_opr_data+20  ;; 1 cycle
        MOV       A, N:_opr_data+19  ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 2366   }
// 2367   
// 2368 }
??dlms_reset_data_149:
        ADDW      SP, #0x10          ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock32
        ; ------------------------------------- Block: 7 cycles
        ; ------------------------------------- Total: 201 cycles
// 2369 
// 2370 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock33 Using cfiCommon2
          CFI Function _current_bill_fill
        CODE
// 2371 void current_bill_fill(uint32_t bill_loop)
// 2372 {
_current_bill_fill:
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+8
        ; Auto size: 20
        SUBW      SP, #0x10          ;; 1 cycle
          CFI CFA SP+24
// 2373   uint8_t bill_LoopIndex;
// 2374   uint16_t address;
// 2375   uint32_t bill_zone_apparent_energy;
// 2376   static uint16_t current_bill_tpr_cnt;
// 2377   
// 2378   switch(bill_loop)
        MOVW      AX, [SP+0x12]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP+0x10]      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_150  ;; 4 cycles
        ; ------------------------------------- Block: 13 cycles
        CMPW      AX, #0x0           ;; 1 cycle
        BZ        ??dlms_reset_data_151  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMPW      AX, #0x1           ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_152  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        BR        N:??dlms_reset_data_150  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 2379   {
// 2380   case 0:
// 2381     if(bill_profile_parameter_cap_obj[0] >= 128)
??dlms_reset_data_151:
        MOV       A, N:_bill_profile_parameter_cap_obj  ;; 1 cycle
        CMP       A, #0x80           ;; 1 cycle
        BC        ??dlms_reset_data_153  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2382     {
// 2383       structure(0x82);
        MOV       A, #0x82           ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 2384       info[k++]= (bill_profile_parameter_cap_obj[0] - FUENERGY_REQ - BILLTPR_CNT - MDRESET_TYPE_CONFIG) / 256;
        MOVW      BC, #0x100         ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       A, N:_FUENERGY_REQ  ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       X, N:_bill_profile_parameter_cap_obj  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       A, N:_BILLTPR_CNT  ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       A, N:_MDRESET_TYPE_CONFIG  ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
          CFI FunCall ?SI_DIV_L02
        CALL      N:?SI_DIV_L02      ;; 3 cycles
        MOV       A, X               ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 2385       info[k++]= (bill_profile_parameter_cap_obj[0] - FUENERGY_REQ - BILLTPR_CNT - MDRESET_TYPE_CONFIG) % 256;
        MOVW      BC, #0x100         ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       A, N:_FUENERGY_REQ  ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       X, N:_bill_profile_parameter_cap_obj  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       A, N:_BILLTPR_CNT  ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       A, N:_MDRESET_TYPE_CONFIG  ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
          CFI FunCall ?SI_MOD_L02
        CALL      N:?SI_MOD_L02      ;; 3 cycles
        MOVW      HL, AX             ;; 1 cycle
        MOV       A, L               ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        BR        S:??dlms_reset_data_154  ;; 3 cycles
        ; ------------------------------------- Block: 66 cycles
// 2386     }
// 2387     else
// 2388     {
// 2389       
// 2390       if(TOD_energy_config == 2 || TOD_energy_config == 3)
??dlms_reset_data_153:
        CMP       N:_TOD_energy_config, #0x2  ;; 1 cycle
        BZ        ??dlms_reset_data_155  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_TOD_energy_config, #0x3  ;; 1 cycle
        BNZ       ??dlms_reset_data_156  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2391       {
// 2392         structure(bill_profile_parameter_cap_obj[0] - FUENERGY_REQ - BILLTPR_CNT - MDRESET_TYPE_CONFIG - 8);
??dlms_reset_data_155:
        MOV       A, N:_bill_profile_parameter_cap_obj  ;; 1 cycle
        SUB       A, N:_FUENERGY_REQ  ;; 1 cycle
        SUB       A, N:_BILLTPR_CNT  ;; 1 cycle
        SUB       A, N:_MDRESET_TYPE_CONFIG  ;; 1 cycle
        ADD       A, #0xF8           ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
        BR        S:??dlms_reset_data_154  ;; 3 cycles
        ; ------------------------------------- Block: 11 cycles
// 2393       }
// 2394       else if(TOD_energy_config == 1)
??dlms_reset_data_156:
        CMP       N:_TOD_energy_config, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_157  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2395       {
// 2396         structure(bill_profile_parameter_cap_obj[0] - FUENERGY_REQ - BILLTPR_CNT - MDRESET_TYPE_CONFIG - 16);
        MOV       A, N:_bill_profile_parameter_cap_obj  ;; 1 cycle
        SUB       A, N:_FUENERGY_REQ  ;; 1 cycle
        SUB       A, N:_BILLTPR_CNT  ;; 1 cycle
        SUB       A, N:_MDRESET_TYPE_CONFIG  ;; 1 cycle
        ADD       A, #0xF0           ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
        BR        S:??dlms_reset_data_154  ;; 3 cycles
        ; ------------------------------------- Block: 11 cycles
// 2397       }
// 2398       else
// 2399       {
// 2400         structure(bill_profile_parameter_cap_obj[0] - FUENERGY_REQ - BILLTPR_CNT - MDRESET_TYPE_CONFIG - 24);
??dlms_reset_data_157:
        MOV       A, N:_bill_profile_parameter_cap_obj  ;; 1 cycle
        SUB       A, N:_FUENERGY_REQ  ;; 1 cycle
        SUB       A, N:_BILLTPR_CNT  ;; 1 cycle
        SUB       A, N:_MDRESET_TYPE_CONFIG  ;; 1 cycle
        ADD       A, #0xE8           ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 2401       }
// 2402     }
// 2403     
// 2404     date_time(Now.day, Now.month, Now.year, Now.hour, Now.min, 0, 0); /* current billing date */
??dlms_reset_data_154:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       D, #0x0            ;; 1 cycle
        MOV       A, N:_Now+1        ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_Now+2        ;; 1 cycle
        MOV       C, N:_Now+6        ;; 1 cycle
        MOV       X, N:_Now+5        ;; 1 cycle
        MOV       A, N:_Now+3        ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
// 2405     
// 2406     val_2byt(current_bill_pf / 256, current_bill_pf % 256); /* avg pf */
        MOVW      AX, N:_current_bill_pf  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOVW      AX, N:_current_bill_pf  ;; 1 cycle
        CLRB      X                  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
// 2407     
// 2408     long_into_char_array4(energy.Allph.active_imp,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, N:_energy+54   ;; 1 cycle
        MOVW      AX, N:_energy+52   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 2409     val_4byt(char_array[0], char_array[1], char_array[2], char_array[3]); /* kwh */
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2410     
// 2411     for(bill_LoopIndex= 0; bill_LoopIndex < 8; bill_LoopIndex++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+24
        ; ------------------------------------- Block: 42 cycles
??current_bill_fill_0:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNC       ??dlms_reset_data_158  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2412     {
// 2413       if((bill_LoopIndex + 1) == tariff_no)
        MOV       C, N:_tariff_no    ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        CMPW      AX, BC             ;; 1 cycle
        BNZ       ??dlms_reset_data_159  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
// 2414       {
// 2415         long_into_char_array4(energy.Allph.zkwh_imp,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, N:_energy+94   ;; 1 cycle
        MOVW      AX, N:_energy+92   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 2416         val_4byt(char_array[0], char_array[1], char_array[2], char_array[3]); /* zkwh */
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
        BR        S:??dlms_reset_data_160  ;; 3 cycles
        ; ------------------------------------- Block: 16 cycles
// 2417       }
// 2418       else
// 2419       {
// 2420         eprom_read(TOD_CUR_BILL_BLK1+(bill_LoopIndex * 0x10),0,PAGE_1,AUTO_CALC);
??dlms_reset_data_159:
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       H, A               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x10          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x1600        ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2421         val_4byt(opr_data[0], opr_data[1], opr_data[2], opr_data[3]);
        MOV       B, N:_opr_data+3   ;; 1 cycle
        MOV       C, N:_opr_data+2   ;; 1 cycle
        MOV       X, N:_opr_data+1   ;; 1 cycle
        MOV       A, N:_opr_data     ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 2422       }
// 2423     }
??dlms_reset_data_160:
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??current_bill_fill_0  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 2424     long_into_char_array4(energy.Allph.reactive_q1,char_array);
??dlms_reset_data_158:
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, N:_energy+78   ;; 1 cycle
        MOVW      AX, N:_energy+76   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 2425     val_4byt(char_array[0], char_array[1], char_array[2], char_array[3]); /* kvarh lag */
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2426     
// 2427     
// 2428     long_into_char_array4(energy.Allph.reactive_q4,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, N:_energy+90   ;; 1 cycle
        MOVW      AX, N:_energy+88   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 2429     val_4byt(char_array[0], char_array[1], char_array[2], char_array[3]); /* kvarh lead */
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2430     
// 2431     
// 2432     long_into_char_array4(energy.Allph.apparent_imp,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, N:_energy+70   ;; 1 cycle
        MOVW      AX, N:_energy+68   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 2433     val_4byt(char_array[0], char_array[1], char_array[2], char_array[3]); /* kvah */
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2434     
// 2435     for(bill_LoopIndex= 0; bill_LoopIndex < 8; bill_LoopIndex++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 41 cycles
??current_bill_fill_1:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNC       ??dlms_reset_data_161  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2436     {
// 2437       if((bill_LoopIndex + 1) == tariff_no)
        MOV       C, N:_tariff_no    ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        CMPW      AX, BC             ;; 1 cycle
        BNZ       ??dlms_reset_data_162  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
// 2438       {
// 2439         long_into_char_array4(energy.Allph.zkvah_imp,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, N:_energy+102  ;; 1 cycle
        MOVW      AX, N:_energy+100  ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 2440         val_4byt(char_array[0], char_array[1], char_array[2], char_array[3]); /* zkvah */
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
        BR        S:??dlms_reset_data_163  ;; 3 cycles
        ; ------------------------------------- Block: 16 cycles
// 2441       }
// 2442       else
// 2443       {
// 2444         
// 2445         eprom_read(TOD_CUR_BILL_BLK3+(bill_LoopIndex * 0x10),0,PAGE_1,AUTO_CALC);
??dlms_reset_data_162:
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       H, A               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x10          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x1700        ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2446         val_4byt(opr_data[0], opr_data[1], opr_data[2], opr_data[3]); /* zkvah */
        MOV       B, N:_opr_data+3   ;; 1 cycle
        MOV       C, N:_opr_data+2   ;; 1 cycle
        MOV       X, N:_opr_data+1   ;; 1 cycle
        MOV       A, N:_opr_data     ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 2447       }
// 2448     }
??dlms_reset_data_163:
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??current_bill_fill_1  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 2449     
// 2450     eprom_read(0x03E0,0,PAGE_1,AUTO_CALC);
??dlms_reset_data_161:
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x3E0         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2451     
// 2452     val_4byt(0, opr_data[0], opr_data[1], opr_data[2]); /* md kw */
        MOV       B, N:_opr_data+2   ;; 1 cycle
        MOV       C, N:_opr_data+1   ;; 1 cycle
        MOV       X, N:_opr_data     ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2453     
// 2454     TempTime = char_array_into_time4(&opr_data[3]);
        MOVW      BC, #LWRD(_opr_data+3)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
          CFI FunCall _char_array_into_time4
        CALL      _char_array_into_time4  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
// 2455     date_time(TempTime.day,TempTime.month,TempTime.year,TempTime.hour,TempTime.min,TempTime.sec,0); /* md kw with d & t*/
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       A, N:_TempTime     ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_TempTime+1   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_TempTime+2   ;; 1 cycle
        MOV       C, N:_TempTime+6   ;; 1 cycle
        MOV       X, N:_TempTime+5   ;; 1 cycle
        MOV       A, N:_TempTime+3   ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
// 2456     
// 2457     
// 2458     for(bill_LoopIndex= 0; bill_LoopIndex < 8; bill_LoopIndex++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+24
        ; ------------------------------------- Block: 54 cycles
??current_bill_fill_2:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNC       ??dlms_reset_data_164  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2459     {
// 2460       address= 0x0400 + (bill_LoopIndex * 0x20);
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x20          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x400         ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 2461       
// 2462       eprom_read(address,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2463       
// 2464       val_4byt(0, opr_data[0], opr_data[1], opr_data[2]); /* zone md kw */
        MOV       B, N:_opr_data+2   ;; 1 cycle
        MOV       C, N:_opr_data+1   ;; 1 cycle
        MOV       X, N:_opr_data     ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2465       TempTime = char_array_into_time4(&opr_data[3]);
        MOVW      BC, #LWRD(_opr_data+3)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
          CFI FunCall _char_array_into_time4
        CALL      _char_array_into_time4  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
// 2466       date_time(TempTime.day,TempTime.month,TempTime.year,TempTime.hour,TempTime.min,TempTime.sec,0); /*zone md kw with d & t*/
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       A, N:_TempTime     ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_TempTime+1   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_TempTime+2   ;; 1 cycle
        MOV       C, N:_TempTime+6   ;; 1 cycle
        MOV       X, N:_TempTime+5   ;; 1 cycle
        MOV       A, N:_TempTime+3   ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
// 2467     }
        MOV       A, [SP+0x02]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+24
        BR        S:??current_bill_fill_2  ;; 3 cycles
        ; ------------------------------------- Block: 66 cycles
// 2468     
// 2469     eprom_read(0x03F0,0,PAGE_1,AUTO_CALC);
??dlms_reset_data_164:
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x3F0         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2470     
// 2471     val_4byt(0, opr_data[0], opr_data[1], opr_data[2]); /* md kva */
        MOV       B, N:_opr_data+2   ;; 1 cycle
        MOV       C, N:_opr_data+1   ;; 1 cycle
        MOV       X, N:_opr_data     ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2472     
// 2473     TempTime = char_array_into_time4(&opr_data[3]);
        MOVW      BC, #LWRD(_opr_data+3)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
          CFI FunCall _char_array_into_time4
        CALL      _char_array_into_time4  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
// 2474     date_time(TempTime.day,TempTime.month,TempTime.year,TempTime.hour,TempTime.min,TempTime.sec,0); /* md kVA with d & t*/
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       A, N:_TempTime     ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_TempTime+1   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_TempTime+2   ;; 1 cycle
        MOV       C, N:_TempTime+6   ;; 1 cycle
        MOV       X, N:_TempTime+5   ;; 1 cycle
        MOV       A, N:_TempTime+3   ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
// 2475     
// 2476     for(bill_LoopIndex= 0; bill_LoopIndex < 8; bill_LoopIndex++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+24
        ; ------------------------------------- Block: 54 cycles
??current_bill_fill_3:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNC       ??dlms_reset_data_165  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2477     {
// 2478       address= 0x0410 + (bill_LoopIndex * 0x20);
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x20          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x410         ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 2479       
// 2480       eprom_read(address,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2481       
// 2482       val_4byt(0, opr_data[0], opr_data[1], opr_data[2]); /* zone md kva */
        MOV       B, N:_opr_data+2   ;; 1 cycle
        MOV       C, N:_opr_data+1   ;; 1 cycle
        MOV       X, N:_opr_data     ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2483       TempTime = char_array_into_time4(&opr_data[3]);
        MOVW      BC, #LWRD(_opr_data+3)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
          CFI FunCall _char_array_into_time4
        CALL      _char_array_into_time4  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
// 2484       date_time(TempTime.day,TempTime.month,TempTime.year,TempTime.hour,TempTime.min,TempTime.sec,0); /*zone md kva with d & t*/
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       A, N:_TempTime     ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_TempTime+1   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_TempTime+2   ;; 1 cycle
        MOV       C, N:_TempTime+6   ;; 1 cycle
        MOV       X, N:_TempTime+5   ;; 1 cycle
        MOV       A, N:_TempTime+3   ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
// 2485     }
        MOV       A, [SP+0x02]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+24
        BR        S:??current_bill_fill_3  ;; 3 cycles
        ; ------------------------------------- Block: 66 cycles
// 2486     
// 2487     eprom_read(0x07E0,0,PAGE_1,AUTO_CALC);
??dlms_reset_data_165:
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x7E0         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2488     
// 2489     current_bill_tpr_cnt= (opr_data[0] * 256) + opr_data[1];       
        MOV       X, N:_opr_data     ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOV       C, N:_opr_data+1   ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        ADDW      AX, BC             ;; 1 cycle
        MOVW      N:`current_bill_fill::current_bill_tpr_cnt`, AX  ;; 1 cycle
// 2490     
// 2491     temp_us32 = char_array_to_long3(&opr_data[12]); //bill power on read
        MOVW      AX, #LWRD(_opr_data+12)  ;; 1 cycle
          CFI FunCall _char_array_to_long3
        CALL      _char_array_to_long3  ;; 3 cycles
        MOVW      S:_temp_us32, AX   ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_us32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 2492     long_int=power_on_min-temp_us32;//cum power on-bill power on
        MOVW      BC, N:_power_on_min+2  ;; 1 cycle
        MOVW      AX, N:_power_on_min  ;; 1 cycle
        SUBW      AX, S:_temp_us32   ;; 1 cycle
        SKNC
        DECW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        SUBW      AX, S:_temp_us32+2  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_long_int, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_long_int+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 2493     long_into_char_array4(long_int,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, S:_long_int+2  ;; 1 cycle
        MOVW      AX, S:_long_int    ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 2494     val_4byt(char_array[0],char_array[1],char_array[2],char_array[3]); /*delta  bill Power on duration  */
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2495     
// 2496     //    val_4byt(0, pow_off[0], pow_off[1], pow_off[2]); /* md kva */
// 2497     // val_4byt(0, pow_on[0], pow_on[1], pow_on[2]); /* md kva */
// 2498     // val_4byt(0, pow_off[0], pow_off[1], pow_off[2]); /* md kva */
// 2499     //	u1.s1.c1=0;
// 2500     //	u1.s1.c2=OPR11[11]; u1.s1.c3=OPR11[12]; u1.s1.c4=OPR11[13];
// 2501     //	long_int=long1-u1.lb;
// 2502     //	int_to_char_array((uint16_t)long_int);
// 2503     //
// 2504     //	val_2byt(char_array[0],char_array[1]); /* bill Power on duration  */
// 2505     
// 2506     /* char_array_ptr = cum_tamper_count; */
// 2507     break;
        BR        N:??dlms_reset_data_150  ;; 3 cycles
        ; ------------------------------------- Block: 55 cycles
// 2508   case 1:
// 2509     
// 2510     eprom_read(0x0380,0,PAGE_1,AUTO_CALC);
??dlms_reset_data_152:
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x380         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2511     val_4byt(0, opr_data[0], opr_data[1], opr_data[2]); /*r phase md kw */
        MOV       B, N:_opr_data+2   ;; 1 cycle
        MOV       C, N:_opr_data+1   ;; 1 cycle
        MOV       X, N:_opr_data     ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2512     TempTime = char_array_into_time4(&opr_data[3]);
        MOVW      BC, #LWRD(_opr_data+3)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
          CFI FunCall _char_array_into_time4
        CALL      _char_array_into_time4  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
// 2513     date_time(TempTime.day,TempTime.month,TempTime.year,TempTime.hour,TempTime.min,TempTime.sec,0); /* md kw with d & t*/
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       A, N:_TempTime     ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_TempTime+1   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_TempTime+2   ;; 1 cycle
        MOV       C, N:_TempTime+6   ;; 1 cycle
        MOV       X, N:_TempTime+5   ;; 1 cycle
        MOV       A, N:_TempTime+3   ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
// 2514     
// 2515     
// 2516     eprom_read(0x0390,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x390         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2517     val_4byt(0, opr_data[0], opr_data[1], opr_data[2]); /*y phase md kw */
        MOV       B, N:_opr_data+2   ;; 1 cycle
        MOV       C, N:_opr_data+1   ;; 1 cycle
        MOV       X, N:_opr_data     ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2518     TempTime = char_array_into_time4(&opr_data[3]);
        MOVW      BC, #LWRD(_opr_data+3)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0xA           ;; 1 cycle
          CFI FunCall _char_array_into_time4
        CALL      _char_array_into_time4  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+24
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
// 2519     date_time(TempTime.day,TempTime.month,TempTime.year,TempTime.hour,TempTime.min,TempTime.sec,0); /* md kw with d & t*/
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       A, N:_TempTime     ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_TempTime+1   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_TempTime+2   ;; 1 cycle
        MOV       C, N:_TempTime+6   ;; 1 cycle
        MOV       X, N:_TempTime+5   ;; 1 cycle
        MOV       A, N:_TempTime+3   ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
// 2520     
// 2521     eprom_read(0x03a0,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x3A0         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2522     val_4byt(0, opr_data[0], opr_data[1], opr_data[2]); /*b phase md kw */
        MOV       B, N:_opr_data+2   ;; 1 cycle
        MOV       C, N:_opr_data+1   ;; 1 cycle
        MOV       X, N:_opr_data     ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2523     TempTime = char_array_into_time4(&opr_data[3]);
        MOVW      BC, #LWRD(_opr_data+3)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0xA           ;; 1 cycle
          CFI FunCall _char_array_into_time4
        CALL      _char_array_into_time4  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+24
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
// 2524     date_time(TempTime.day,TempTime.month,TempTime.year,TempTime.hour,TempTime.min,TempTime.sec,0); /* md kw with d & t*/
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       A, N:_TempTime     ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_TempTime+1   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_TempTime+2   ;; 1 cycle
        MOV       C, N:_TempTime+6   ;; 1 cycle
        MOV       X, N:_TempTime+5   ;; 1 cycle
        MOV       A, N:_TempTime+3   ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
// 2525     
// 2526     if(FUENERGY_REQ == 0)
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+24
        CMP0      N:_FUENERGY_REQ    ;; 1 cycle
        BNZ       ??dlms_reset_data_166  ;; 4 cycles
        ; ------------------------------------- Block: 161 cycles
// 2527     {
// 2528       long_into_char_array4(energy.Allph.fundamental,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, N:_energy+66   ;; 1 cycle
        MOVW      AX, N:_energy+64   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 2529       val_4byt(char_array[0], char_array[1], char_array[2], char_array[3]); /* kvah */
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
        ; ------------------------------------- Block: 13 cycles
// 2530     }
// 2531     
// 2532     if(BILLTPR_CNT == 0)
??dlms_reset_data_166:
        CMP0      N:_BILLTPR_CNT     ;; 1 cycle
        BNZ       ??dlms_reset_data_167  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2533     {
// 2534       current_bill_tpr_cnt= tpr.cum_tpr_count - current_bill_tpr_cnt;
        MOVW      AX, N:_tpr+30      ;; 1 cycle
        SUBW      AX, N:`current_bill_fill::current_bill_tpr_cnt`  ;; 1 cycle
        MOVW      N:`current_bill_fill::current_bill_tpr_cnt`, AX  ;; 1 cycle
// 2535       
// 2536       info[k]= 0x11;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x11           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
// 2537       info[k + 1]= current_bill_tpr_cnt; /* Current bill tamper count */
        MOVW      AX, N:`current_bill_fill::current_bill_tpr_cnt`  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+1)[BC], A   ;; 1 cycle
// 2538       k= k + 2;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x2           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
        ; ------------------------------------- Block: 13 cycles
// 2539     }
// 2540     
// 2541     if(MDRESET_TYPE_CONFIG == 0)
??dlms_reset_data_167:
        CMP0      N:_MDRESET_TYPE_CONFIG  ;; 1 cycle
        BNZ       ??dlms_reset_data_168  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2542     {
// 2543       info[k]= 0x11;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x11           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
// 2544       info[k + 1]= 0;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info+1)[BC], A   ;; 1 cycle
// 2545       k= k + 2;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x2           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
        ; ------------------------------------- Block: 9 cycles
// 2546     }
// 2547     
// 2548     
// 2549     if(TOD_energy_config != 0)
??dlms_reset_data_168:
        CMP0      N:_TOD_energy_config  ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_150  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2550     {
// 2551       for(bill_LoopIndex= 0; bill_LoopIndex < 8; bill_LoopIndex++) //zkvarh lag
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??current_bill_fill_4:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNC       ??dlms_reset_data_169  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2552       {
// 2553         if((bill_LoopIndex + 1) == tariff_no)
        MOV       C, N:_tariff_no    ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        CMPW      AX, BC             ;; 1 cycle
        BNZ       ??dlms_reset_data_170  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
// 2554         {
// 2555           long_into_char_array4(energy.Allph.zkvarh_q1,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, N:_energy+110  ;; 1 cycle
        MOVW      AX, N:_energy+108  ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 2556           val_4byt(char_array[0], char_array[1], char_array[2], char_array[3]);
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
        BR        S:??dlms_reset_data_171  ;; 3 cycles
        ; ------------------------------------- Block: 16 cycles
// 2557         }
// 2558         else
// 2559         {
// 2560           eprom_read(TOD_CUR_BILL_BLK2+(bill_LoopIndex * 0x10),0,PAGE_1,AUTO_CALC);
??dlms_reset_data_170:
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       H, A               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x10          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x1680        ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2561           val_4byt(opr_data[0], opr_data[1], opr_data[2], opr_data[3]); 
        MOV       B, N:_opr_data+3   ;; 1 cycle
        MOV       C, N:_opr_data+2   ;; 1 cycle
        MOV       X, N:_opr_data+1   ;; 1 cycle
        MOV       A, N:_opr_data     ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 2562         }
// 2563       }
??dlms_reset_data_171:
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??current_bill_fill_4  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 2564       
// 2565       if(2 == TOD_energy_config)
??dlms_reset_data_169:
        CMP       N:_TOD_energy_config, #0x2  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_172  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2566       {
// 2567         for(bill_LoopIndex= 0; bill_LoopIndex < 8; bill_LoopIndex++) //zkvarh lead
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??current_bill_fill_5:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_150  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2568         {
// 2569           if((bill_LoopIndex + 1) == tariff_no)
        MOV       C, N:_tariff_no    ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        CMPW      AX, BC             ;; 1 cycle
        BNZ       ??dlms_reset_data_173  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
// 2570           {
// 2571             long_into_char_array4(energy.Allph.zkvarh_q4,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, N:_energy+122  ;; 1 cycle
        MOVW      AX, N:_energy+120  ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 2572             val_4byt(char_array[0], char_array[1], char_array[2], char_array[3]);
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
        BR        S:??dlms_reset_data_174  ;; 3 cycles
        ; ------------------------------------- Block: 16 cycles
// 2573           }
// 2574           else
// 2575           {
// 2576             eprom_read(TOD_CUR_BILL_BLK2+(bill_LoopIndex * 0x10),0,PAGE_1,AUTO_CALC);
??dlms_reset_data_173:
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       H, A               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x10          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x1680        ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2577             val_4byt(opr_data[8], opr_data[9], opr_data[10], opr_data[11]); 
        MOV       B, N:_opr_data+11  ;; 1 cycle
        MOV       C, N:_opr_data+10  ;; 1 cycle
        MOV       X, N:_opr_data+9   ;; 1 cycle
        MOV       A, N:_opr_data+8   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 2578           }
// 2579         }
??dlms_reset_data_174:
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??current_bill_fill_5  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 2580       }
// 2581       else if(3 == TOD_energy_config)
??dlms_reset_data_172:
        CMP       N:_TOD_energy_config, #0x3  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_150  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2582       {
// 2583         for(bill_LoopIndex= 0; bill_LoopIndex < 8; bill_LoopIndex++) //zone pf
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??current_bill_fill_6:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_150  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2584         {
// 2585           if((bill_LoopIndex + 1) == tariff_no)
        MOV       C, N:_tariff_no    ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        CMPW      AX, BC             ;; 1 cycle
        BNZ       ??dlms_reset_data_175  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
// 2586           {
// 2587             int_into_char_array(zone_pf,char_array);
        MOVW      BC, #LWRD(_char_array)  ;; 1 cycle
        MOVW      AX, N:_zone_pf     ;; 1 cycle
          CFI FunCall _int_into_char_array
        CALL      _int_into_char_array  ;; 3 cycles
// 2588             val_2byt(char_array[0], char_array[1]);
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
        BR        S:??dlms_reset_data_176  ;; 3 cycles
        ; ------------------------------------- Block: 13 cycles
// 2589           }
// 2590           else
// 2591           {
// 2592               eprom_read(TOD_CUR_BILL_BLK3+(bill_LoopIndex * 0x10),0,PAGE_1,AUTO_CALC);
??dlms_reset_data_175:
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       H, A               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x10          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x1700        ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2593               bill_zone_apparent_energy=char_array_to_long4(&opr_data[0]);
        MOVW      AX, #LWRD(_opr_data)  ;; 1 cycle
          CFI FunCall _char_array_to_long4
        CALL      _char_array_to_long4  ;; 3 cycles
        MOVW      [SP+0x04], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      [SP+0x06], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 2594               if(bill_zone_apparent_energy !=0)
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        OR        A, X               ;; 1 cycle
        OR        A, C               ;; 1 cycle
        OR        A, B               ;; 1 cycle
        BZ        ??dlms_reset_data_177  ;; 4 cycles
        ; ------------------------------------- Block: 49 cycles
// 2595               {
// 2596                 val_2byt(opr_data[8], opr_data[9]);
        MOV       X, N:_opr_data+9   ;; 1 cycle
        MOV       A, N:_opr_data+8   ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
        BR        S:??dlms_reset_data_176  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 2597               }
// 2598               else
// 2599               {
// 2600                 opr_data[8]=0x03;
??dlms_reset_data_177:
        MOV       N:_opr_data+8, #0x3  ;; 1 cycle
// 2601                 opr_data[9]=0xE8;
        MOV       N:_opr_data+9, #0xE8  ;; 1 cycle
// 2602                 val_2byt(opr_data[8], opr_data[9]);
        MOV       X, N:_opr_data+9   ;; 1 cycle
        MOV       A, N:_opr_data+8   ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 2603               }
// 2604           }
// 2605         }
??dlms_reset_data_176:
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        N:??current_bill_fill_6  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 2606       } 
// 2607     }
// 2608     break;
// 2609   default:
// 2610     break;
// 2611   }
// 2612   
// 2613   
// 2614   
// 2615   
// 2616 }
??dlms_reset_data_150:
        ADDW      SP, #0x14          ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock33
        ; ------------------------------------- Block: 7 cycles
        ; ------------------------------------- Total: 1175 cycles

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
`current_bill_fill::current_bill_tpr_cnt`:
        DS 2

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock34 Using cfiCommon0
          CFI Function _Uart_BillFill
        CODE
// 2617 void Uart_BillFill(unsigned char bill_cnt, uint32_t bill_loop)
// 2618 {
_Uart_BillFill:
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+10
        ; Auto size: 32
        SUBW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+36
// 2619   uint32_t bill_reactive_lag,bill_reactive_lead,bill_zone_apparent_energy;
// 2620   uint16_t todbill_add, addressbill;
// 2621   uint8_t bill_LoopIndex1;
// 2622   signed char month;
// 2623   month= bill_count - bill_cnt;
        MOV       A, [SP+0x1B]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, N:_bill_count   ;; 1 cycle
        SUB       A, X               ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
// 2624   if(month < 0)
        MOV       A, [SP+0x01]       ;; 1 cycle
        SHL       A, 0x1             ;; 1 cycle
        BNC       ??dlms_reset_data_178  ;; 4 cycles
        ; ------------------------------------- Block: 15 cycles
// 2625   {
// 2626     month= month + MAX_BILL;
        MOV       A, [SP+0x01]       ;; 1 cycle
        ADD       A, N:_MAX_BILL     ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 2627   }
// 2628   
// 2629   switch(bill_loop)
??dlms_reset_data_178:
        MOVW      AX, [SP+0x1E]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP+0x1C]      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_179  ;; 4 cycles
        ; ------------------------------------- Block: 10 cycles
        CMPW      AX, #0x0           ;; 1 cycle
        BZ        ??dlms_reset_data_180  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMPW      AX, #0x1           ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_181  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        BR        N:??dlms_reset_data_179  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 2630   {
// 2631   case 0:
// 2632     
// 2633     // 	structure(bill_profile_parameter_cap_obj[0]);           /* 58 */
// 2634     if(bill_profile_parameter_cap_obj[0] >= 128)
??dlms_reset_data_180:
        MOV       A, N:_bill_profile_parameter_cap_obj  ;; 1 cycle
        CMP       A, #0x80           ;; 1 cycle
        BC        ??dlms_reset_data_182  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2635     {
// 2636       structure(0x82);
        MOV       A, #0x82           ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 2637       info[k++]= (bill_profile_parameter_cap_obj[0] - FUENERGY_REQ - BILLTPR_CNT - MDRESET_TYPE_CONFIG) / 256;
        MOVW      BC, #0x100         ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       A, N:_FUENERGY_REQ  ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       X, N:_bill_profile_parameter_cap_obj  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       A, N:_BILLTPR_CNT  ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       A, N:_MDRESET_TYPE_CONFIG  ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
          CFI FunCall ?SI_DIV_L02
        CALL      N:?SI_DIV_L02      ;; 3 cycles
        MOV       A, X               ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 2638       info[k++]= (bill_profile_parameter_cap_obj[0] - FUENERGY_REQ - BILLTPR_CNT - MDRESET_TYPE_CONFIG) % 256;
        MOVW      BC, #0x100         ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       A, N:_FUENERGY_REQ  ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       X, N:_bill_profile_parameter_cap_obj  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       A, N:_BILLTPR_CNT  ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       A, N:_MDRESET_TYPE_CONFIG  ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
          CFI FunCall ?SI_MOD_L02
        CALL      N:?SI_MOD_L02      ;; 3 cycles
        MOVW      HL, AX             ;; 1 cycle
        MOV       A, L               ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        BR        S:??dlms_reset_data_183  ;; 3 cycles
        ; ------------------------------------- Block: 66 cycles
// 2639     }
// 2640     else
// 2641     {
// 2642       if(TOD_energy_config == 2 || TOD_energy_config == 3)
??dlms_reset_data_182:
        CMP       N:_TOD_energy_config, #0x2  ;; 1 cycle
        BZ        ??dlms_reset_data_184  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_TOD_energy_config, #0x3  ;; 1 cycle
        BNZ       ??dlms_reset_data_185  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2643       {
// 2644         structure(bill_profile_parameter_cap_obj[0] - FUENERGY_REQ - BILLTPR_CNT - MDRESET_TYPE_CONFIG - 8);
??dlms_reset_data_184:
        MOV       A, N:_bill_profile_parameter_cap_obj  ;; 1 cycle
        SUB       A, N:_FUENERGY_REQ  ;; 1 cycle
        SUB       A, N:_BILLTPR_CNT  ;; 1 cycle
        SUB       A, N:_MDRESET_TYPE_CONFIG  ;; 1 cycle
        ADD       A, #0xF8           ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
        BR        S:??dlms_reset_data_183  ;; 3 cycles
        ; ------------------------------------- Block: 11 cycles
// 2645       }
// 2646       else if(TOD_energy_config == 1)
??dlms_reset_data_185:
        CMP       N:_TOD_energy_config, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_186  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2647       {
// 2648         structure(bill_profile_parameter_cap_obj[0] - FUENERGY_REQ - BILLTPR_CNT - MDRESET_TYPE_CONFIG - 16);
        MOV       A, N:_bill_profile_parameter_cap_obj  ;; 1 cycle
        SUB       A, N:_FUENERGY_REQ  ;; 1 cycle
        SUB       A, N:_BILLTPR_CNT  ;; 1 cycle
        SUB       A, N:_MDRESET_TYPE_CONFIG  ;; 1 cycle
        ADD       A, #0xF0           ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
        BR        S:??dlms_reset_data_183  ;; 3 cycles
        ; ------------------------------------- Block: 11 cycles
// 2649       }
// 2650       else
// 2651       {
// 2652         structure(bill_profile_parameter_cap_obj[0] - FUENERGY_REQ - BILLTPR_CNT - MDRESET_TYPE_CONFIG - 24);
??dlms_reset_data_186:
        MOV       A, N:_bill_profile_parameter_cap_obj  ;; 1 cycle
        SUB       A, N:_FUENERGY_REQ  ;; 1 cycle
        SUB       A, N:_BILLTPR_CNT  ;; 1 cycle
        SUB       A, N:_MDRESET_TYPE_CONFIG  ;; 1 cycle
        ADD       A, #0xE8           ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 2653       }
// 2654     }
// 2655     
// 2656     addressbill= BILL_START_ADD + (uint16_t)(month * BILL_JUMP_PG); 
??dlms_reset_data_183:
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        SAR       A, 0x7             ;; 1 cycle
        MOVW      BC, #0xA0          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x1800        ;; 1 cycle
        MOVW      [SP+0x04], AX      ;; 1 cycle
// 2657     
// 2658     eprom_read(addressbill,0,PAGE_5,AUTO_CALC);      //page1-5 read
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x4            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x04]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2659     bill_reactive_lag=char_array_to_long4(&opr_data[10]);
        MOVW      AX, #LWRD(_opr_data+10)  ;; 1 cycle
          CFI FunCall _char_array_to_long4
        CALL      _char_array_to_long4  ;; 3 cycles
        MOVW      [SP+0x0E], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      [SP+0x10], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 2660     bill_reactive_lead=char_array_to_long4(&opr_data[14]);
        MOVW      AX, #LWRD(_opr_data+14)  ;; 1 cycle
          CFI FunCall _char_array_to_long4
        CALL      _char_array_to_long4  ;; 3 cycles
        MOVW      [SP+0x0A], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      [SP+0x0C], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 2661     
// 2662     TempTime = char_array_into_time4(&opr_data[0]);
        MOVW      BC, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x12          ;; 1 cycle
          CFI FunCall _char_array_into_time4
        CALL      _char_array_into_time4  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x12          ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
// 2663     date_time(TempTime.day,TempTime.month,TempTime.year,TempTime.hour,TempTime.min,TempTime.sec,0); 
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       A, N:_TempTime     ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_TempTime+1   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_TempTime+2   ;; 1 cycle
        MOV       C, N:_TempTime+6   ;; 1 cycle
        MOV       X, N:_TempTime+5   ;; 1 cycle
        MOV       A, N:_TempTime+3   ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
// 2664     
// 2665     val_2byt(opr_data[4], opr_data[5]); /* pf */
        MOV       X, N:_opr_data+5   ;; 1 cycle
        MOV       A, N:_opr_data+4   ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
// 2666     
// 2667     val_4byt(opr_data[6], opr_data[7], opr_data[8], opr_data[9]); /* kwh */
        MOV       B, N:_opr_data+9   ;; 1 cycle
        MOV       C, N:_opr_data+8   ;; 1 cycle
        MOV       X, N:_opr_data+7   ;; 1 cycle
        MOV       A, N:_opr_data+6   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2668     
// 2669     todbill_add= BILL_TOD_CUR_BILL_BLK1 + (uint16_t)(month * 0x80);
        MOV       A, [SP+0x03]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        SAR       A, 0x7             ;; 1 cycle
        MOVW      BC, #0x80          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x2000        ;; 1 cycle
        MOVW      [SP+0x04], AX      ;; 1 cycle
// 2670     for(bill_LoopIndex1= 0; bill_LoopIndex1 < 8; bill_LoopIndex1++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        ; ------------------------------------- Block: 91 cycles
??Uart_BillFill_0:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNC       ??dlms_reset_data_187  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2671     {
// 2672       eprom_read(todbill_add,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2673       val_4byt(opr_data[0], opr_data[1], opr_data[2], opr_data[3]); /* zkwh */
        MOV       B, N:_opr_data+3   ;; 1 cycle
        MOV       C, N:_opr_data+2   ;; 1 cycle
        MOV       X, N:_opr_data+1   ;; 1 cycle
        MOV       A, N:_opr_data     ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2674       todbill_add+= 0x10;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 2675     }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??Uart_BillFill_0  ;; 3 cycles
        ; ------------------------------------- Block: 23 cycles
// 2676     
// 2677     long_into_char_array4(bill_reactive_lag,char_array);
??dlms_reset_data_187:
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      AX, [SP+0x10]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP+0x0E]      ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 2678     val_4byt(char_array[0], char_array[1], char_array[2], char_array[3]); /* kvarh lag */
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2679     
// 2680     long_into_char_array4(bill_reactive_lead,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      AX, [SP+0x0C]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP+0x0A]      ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 2681     val_4byt(char_array[0], char_array[1], char_array[2], char_array[3]); /* kvarh lead */
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2682     
// 2683     
// 2684     eprom_read(addressbill,0,PAGE_5,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x4            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x04]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2685     
// 2686     val_4byt(opr_data[18], opr_data[19], opr_data[20], opr_data[21]); /* kvah */
        MOV       B, N:_opr_data+21  ;; 1 cycle
        MOV       C, N:_opr_data+20  ;; 1 cycle
        MOV       X, N:_opr_data+19  ;; 1 cycle
        MOV       A, N:_opr_data+18  ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2687     
// 2688     todbill_add= BILL_TOD_CUR_BILL_BLK3 + (uint16_t)(month * 0x80);
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        SAR       A, 0x7             ;; 1 cycle
        MOVW      BC, #0x80          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x2C00        ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 2689     for(bill_LoopIndex1= 0; bill_LoopIndex1 < 8; bill_LoopIndex1++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 52 cycles
??Uart_BillFill_1:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNC       ??dlms_reset_data_188  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2690     {
// 2691       eprom_read(todbill_add,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2692       val_4byt(opr_data[0], opr_data[1], opr_data[2], opr_data[3]); /* zkvah */
        MOV       B, N:_opr_data+3   ;; 1 cycle
        MOV       C, N:_opr_data+2   ;; 1 cycle
        MOV       X, N:_opr_data+1   ;; 1 cycle
        MOV       A, N:_opr_data     ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2693       todbill_add+= 0x10;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 2694     }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??Uart_BillFill_1  ;; 3 cycles
        ; ------------------------------------- Block: 23 cycles
// 2695     
// 2696     eprom_read(addressbill,0,PAGE_5,AUTO_CALC);
??dlms_reset_data_188:
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x4            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x04]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2697     val_4byt(0, opr_data[22], opr_data[23], opr_data[24]); /* md kw */
        MOV       B, N:_opr_data+24  ;; 1 cycle
        MOV       C, N:_opr_data+23  ;; 1 cycle
        MOV       X, N:_opr_data+22  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2698     
// 2699     TempTime = char_array_into_time4(&opr_data[25]); /*md kw with d & t*/
        MOVW      BC, #LWRD(_opr_data+25)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x12          ;; 1 cycle
          CFI FunCall _char_array_into_time4
        CALL      _char_array_into_time4  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x12          ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
// 2700     date_time(TempTime.day,TempTime.month,TempTime.year,TempTime.hour,TempTime.min,TempTime.sec,0); 
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       A, N:_TempTime     ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_TempTime+1   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_TempTime+2   ;; 1 cycle
        MOV       C, N:_TempTime+6   ;; 1 cycle
        MOV       X, N:_TempTime+5   ;; 1 cycle
        MOV       A, N:_TempTime+3   ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
// 2701     
// 2702     
// 2703     todbill_add= BILL_TOD_MD_KW_ADDR + (uint16_t)(month * 0x80);
        MOV       A, [SP+0x03]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        SAR       A, 0x7             ;; 1 cycle
        MOVW      BC, #0x80          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x3200        ;; 1 cycle
        MOVW      [SP+0x04], AX      ;; 1 cycle
// 2704     for(bill_LoopIndex1= 0; bill_LoopIndex1 < 8; bill_LoopIndex1++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        ; ------------------------------------- Block: 62 cycles
??Uart_BillFill_2:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNC       ??dlms_reset_data_189  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2705     {
// 2706       eprom_read(todbill_add,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2707       val_4byt(0, opr_data[0], opr_data[1], opr_data[2]); /* zone md kw */
        MOV       B, N:_opr_data+2   ;; 1 cycle
        MOV       C, N:_opr_data+1   ;; 1 cycle
        MOV       X, N:_opr_data     ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2708       TempTime = char_array_into_time4(&opr_data[3]); /*zone md kw with d & t*/
        MOVW      BC, #LWRD(_opr_data+3)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x12          ;; 1 cycle
          CFI FunCall _char_array_into_time4
        CALL      _char_array_into_time4  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x12          ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
// 2709       date_time(TempTime.day,TempTime.month,TempTime.year,TempTime.hour,TempTime.min,TempTime.sec,0);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       A, N:_TempTime     ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_TempTime+1   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_TempTime+2   ;; 1 cycle
        MOV       C, N:_TempTime+6   ;; 1 cycle
        MOV       X, N:_TempTime+5   ;; 1 cycle
        MOV       A, N:_TempTime+3   ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
// 2710       todbill_add+= 0x10;
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      [SP+0x04], AX      ;; 1 cycle
// 2711     }
        MOV       A, [SP+0x02]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        BR        S:??Uart_BillFill_2  ;; 3 cycles
        ; ------------------------------------- Block: 61 cycles
// 2712     
// 2713     eprom_read(addressbill,0,PAGE_5,AUTO_CALC);
??dlms_reset_data_189:
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x4            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x04]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2714     
// 2715     val_4byt(0, opr_data[29], opr_data[30], opr_data[31]); /* MD kva*/
        MOV       B, N:_opr_data+31  ;; 1 cycle
        MOV       C, N:_opr_data+30  ;; 1 cycle
        MOV       X, N:_opr_data+29  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2716     
// 2717     TempTime = char_array_into_time4(&opr_data[32]); /*md kva with d & t*/
        MOVW      BC, #LWRD(_opr_data+32)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x12          ;; 1 cycle
          CFI FunCall _char_array_into_time4
        CALL      _char_array_into_time4  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x12          ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
// 2718     date_time(TempTime.day,TempTime.month,TempTime.year,TempTime.hour,TempTime.min,TempTime.sec,0); 
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       A, N:_TempTime     ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_TempTime+1   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_TempTime+2   ;; 1 cycle
        MOV       C, N:_TempTime+6   ;; 1 cycle
        MOV       X, N:_TempTime+5   ;; 1 cycle
        MOV       A, N:_TempTime+3   ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
// 2719     
// 2720     
// 2721     todbill_add= BILL_TOD_MD_KVA_ADDR + (uint16_t)(month * 0x80);
        MOV       A, [SP+0x03]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        SAR       A, 0x7             ;; 1 cycle
        MOVW      BC, #0x80          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x3800        ;; 1 cycle
        MOVW      [SP+0x04], AX      ;; 1 cycle
// 2722     for(bill_LoopIndex1= 0; bill_LoopIndex1 < 8; bill_LoopIndex1++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        ; ------------------------------------- Block: 62 cycles
??Uart_BillFill_3:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNC       ??dlms_reset_data_190  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2723     {
// 2724       eprom_read(todbill_add,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2725       val_4byt(0, opr_data[0], opr_data[1], opr_data[2]); /*zone md kva */
        MOV       B, N:_opr_data+2   ;; 1 cycle
        MOV       C, N:_opr_data+1   ;; 1 cycle
        MOV       X, N:_opr_data     ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2726       TempTime = char_array_into_time4(&opr_data[3]); /*zone md kva with d & t*/
        MOVW      BC, #LWRD(_opr_data+3)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x12          ;; 1 cycle
          CFI FunCall _char_array_into_time4
        CALL      _char_array_into_time4  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x12          ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
// 2727       date_time(TempTime.day,TempTime.month,TempTime.year,TempTime.hour,TempTime.min,TempTime.sec,0);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       A, N:_TempTime     ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_TempTime+1   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_TempTime+2   ;; 1 cycle
        MOV       C, N:_TempTime+6   ;; 1 cycle
        MOV       X, N:_TempTime+5   ;; 1 cycle
        MOV       A, N:_TempTime+3   ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
// 2728       todbill_add+= 0x10;
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      [SP+0x04], AX      ;; 1 cycle
// 2729     }
        MOV       A, [SP+0x02]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        BR        S:??Uart_BillFill_3  ;; 3 cycles
        ; ------------------------------------- Block: 61 cycles
// 2730     
// 2731     val_4byt(0, opr_data[36], opr_data[37], opr_data[38]); /* delta bill Pow on duration */
??dlms_reset_data_190:
        MOV       B, N:_opr_data+38  ;; 1 cycle
        MOV       C, N:_opr_data+37  ;; 1 cycle
        MOV       X, N:_opr_data+36  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2732     
// 2733     
// 2734     break;
        BR        N:??dlms_reset_data_179  ;; 3 cycles
        ; ------------------------------------- Block: 10 cycles
// 2735   case 1:
// 2736     
// 2737     addressbill= (BILL_START_ADD) + (uint16_t)(month * BILL_JUMP_PG);
??dlms_reset_data_181:
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        SAR       A, 0x7             ;; 1 cycle
        MOVW      BC, #0xA0          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x1800        ;; 1 cycle
        MOVW      [SP+0x04], AX      ;; 1 cycle
// 2738     eprom_read(addressbill,0,PAGE_5,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x4            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x04]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2739     
// 2740     
// 2741     val_4byt(0, opr_data[46], opr_data[47], opr_data[48]); /*r-phase  md kw */
        MOV       B, N:_opr_data+48  ;; 1 cycle
        MOV       C, N:_opr_data+47  ;; 1 cycle
        MOV       X, N:_opr_data+46  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2742     TempTime = char_array_into_time4(&opr_data[49]); /*r phase md kw with d & t*/
        MOVW      BC, #LWRD(_opr_data+49)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x12          ;; 1 cycle
          CFI FunCall _char_array_into_time4
        CALL      _char_array_into_time4  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x12          ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
// 2743     date_time(TempTime.day,TempTime.month,TempTime.year,TempTime.hour,TempTime.min,TempTime.sec,0); 
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       A, N:_TempTime     ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_TempTime+1   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_TempTime+2   ;; 1 cycle
        MOV       C, N:_TempTime+6   ;; 1 cycle
        MOV       X, N:_TempTime+5   ;; 1 cycle
        MOV       A, N:_TempTime+3   ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
// 2744     
// 2745     
// 2746     val_4byt(0, opr_data[53], opr_data[54], opr_data[55]); /*y phase md kw */
        MOV       B, N:_opr_data+55  ;; 1 cycle
        MOV       C, N:_opr_data+54  ;; 1 cycle
        MOV       X, N:_opr_data+53  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2747     TempTime = char_array_into_time4(&opr_data[56]); /*md kw with d & t*/
        MOVW      BC, #LWRD(_opr_data+56)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x14          ;; 1 cycle
          CFI FunCall _char_array_into_time4
        CALL      _char_array_into_time4  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x12          ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
// 2748     date_time(TempTime.day,TempTime.month,TempTime.year,TempTime.hour,TempTime.min,TempTime.sec,0); 
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       A, N:_TempTime     ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_TempTime+1   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_TempTime+2   ;; 1 cycle
        MOV       C, N:_TempTime+6   ;; 1 cycle
        MOV       X, N:_TempTime+5   ;; 1 cycle
        MOV       A, N:_TempTime+3   ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
// 2749     
// 2750     
// 2751     val_4byt(0, opr_data[60], opr_data[61], opr_data[62]); /* b phase md kw */
        MOV       B, N:_opr_data+62  ;; 1 cycle
        MOV       C, N:_opr_data+61  ;; 1 cycle
        MOV       X, N:_opr_data+60  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2752     TempTime = char_array_into_time4(&opr_data[63]); /*b phase md kw with d & t*/
        MOVW      BC, #LWRD(_opr_data+63)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x14          ;; 1 cycle
          CFI FunCall _char_array_into_time4
        CALL      _char_array_into_time4  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x12          ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
// 2753     date_time(TempTime.day,TempTime.month,TempTime.year,TempTime.hour,TempTime.min,TempTime.sec,0); 
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       A, N:_TempTime     ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_TempTime+1   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_TempTime+2   ;; 1 cycle
        MOV       C, N:_TempTime+6   ;; 1 cycle
        MOV       X, N:_TempTime+5   ;; 1 cycle
        MOV       A, N:_TempTime+3   ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
// 2754     
// 2755     
// 2756     if(FUENERGY_REQ == 0) //zero means required
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        CMP0      N:_FUENERGY_REQ    ;; 1 cycle
        BNZ       ??dlms_reset_data_191  ;; 4 cycles
        ; ------------------------------------- Block: 155 cycles
// 2757     {
// 2758       val_4byt(opr_data[39], opr_data[40], opr_data[41], opr_data[42]); /*fundamantal*/
        MOV       B, N:_opr_data+42  ;; 1 cycle
        MOV       C, N:_opr_data+41  ;; 1 cycle
        MOV       X, N:_opr_data+40  ;; 1 cycle
        MOV       A, N:_opr_data+39  ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 2759     }
// 2760     
// 2761     if(BILLTPR_CNT == 0)
??dlms_reset_data_191:
        CMP0      N:_BILLTPR_CNT     ;; 1 cycle
        BNZ       ??dlms_reset_data_192  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2762     {
// 2763       info[k]= 0x11;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x11           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
// 2764       info[k + 1]= opr_data[43]; /* bill tamper count */
        MOV       A, N:_opr_data+43  ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+1)[BC], A   ;; 1 cycle
// 2765       k= k + 2;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x2           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
        ; ------------------------------------- Block: 9 cycles
// 2766     }
// 2767     if(MDRESET_TYPE_CONFIG == 0)
??dlms_reset_data_192:
        CMP0      N:_MDRESET_TYPE_CONFIG  ;; 1 cycle
        BNZ       ??dlms_reset_data_193  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2768     {
// 2769       info[k]= 0x11;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x11           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
// 2770       info[k + 1]= opr_data[44]; /* bill tamper count */
        MOV       A, N:_opr_data+44  ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+1)[BC], A   ;; 1 cycle
// 2771       k= k + 2;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x2           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
        ; ------------------------------------- Block: 9 cycles
// 2772     }
// 2773     
// 2774     if(TOD_energy_config != 0) /*zkvarh lag*/
??dlms_reset_data_193:
        CMP0      N:_TOD_energy_config  ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_179  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2775     {
// 2776       todbill_add= BILL_TOD_CUR_BILL_BLK2 + (uint16_t)(month * 0x80);
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        SAR       A, 0x7             ;; 1 cycle
        MOVW      BC, #0x80          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x2600        ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 2777       for(bill_LoopIndex1= 0; bill_LoopIndex1 < 8; bill_LoopIndex1++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 10 cycles
??Uart_BillFill_4:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNC       ??dlms_reset_data_194  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2778       {
// 2779         eprom_read(todbill_add,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2780         val_4byt(opr_data[0], opr_data[1], opr_data[2], opr_data[3]); 
        MOV       B, N:_opr_data+3   ;; 1 cycle
        MOV       C, N:_opr_data+2   ;; 1 cycle
        MOV       X, N:_opr_data+1   ;; 1 cycle
        MOV       A, N:_opr_data     ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2781         todbill_add+= 0x10;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 2782       }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??Uart_BillFill_4  ;; 3 cycles
        ; ------------------------------------- Block: 23 cycles
// 2783       if(2 == TOD_energy_config) /*zkvarh lead*/
??dlms_reset_data_194:
        CMP       N:_TOD_energy_config, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_195  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2784       {
// 2785         todbill_add= BILL_TOD_CUR_BILL_BLK2 + (uint16_t)(month * 0x80);
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        SAR       A, 0x7             ;; 1 cycle
        MOVW      BC, #0x80          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x2600        ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 2786         for(bill_LoopIndex1= 0; bill_LoopIndex1 < 8; bill_LoopIndex1++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 10 cycles
??Uart_BillFill_5:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_179  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2787         {
// 2788           eprom_read(todbill_add,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2789           val_4byt(opr_data[8], opr_data[9], opr_data[10], opr_data[11]); 
        MOV       B, N:_opr_data+11  ;; 1 cycle
        MOV       C, N:_opr_data+10  ;; 1 cycle
        MOV       X, N:_opr_data+9   ;; 1 cycle
        MOV       A, N:_opr_data+8   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 2790           todbill_add+= 0x10;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 2791         }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??Uart_BillFill_5  ;; 3 cycles
        ; ------------------------------------- Block: 23 cycles
// 2792       }
// 2793       else if(3 == TOD_energy_config) /*zone pf*/
??dlms_reset_data_195:
        CMP       N:_TOD_energy_config, #0x3  ;; 1 cycle
        BNZ       ??dlms_reset_data_179  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2794       {
// 2795         todbill_add= BILL_TOD_CUR_BILL_BLK3 + (uint16_t)(month * 0x80);
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        SAR       A, 0x7             ;; 1 cycle
        MOVW      BC, #0x80          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x2C00        ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 2796         for(bill_LoopIndex1= 0; bill_LoopIndex1 < 8; bill_LoopIndex1++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 10 cycles
??Uart_BillFill_6:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNC       ??dlms_reset_data_179  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2797         {
// 2798           eprom_read(todbill_add,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 2799           bill_zone_apparent_energy=char_array_to_long4(&opr_data[0]);
        MOVW      AX, #LWRD(_opr_data)  ;; 1 cycle
          CFI FunCall _char_array_to_long4
        CALL      _char_array_to_long4  ;; 3 cycles
        MOVW      [SP+0x06], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      [SP+0x08], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 2800           if(bill_zone_apparent_energy!=0)
        MOVW      AX, [SP+0x08]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        OR        A, X               ;; 1 cycle
        OR        A, C               ;; 1 cycle
        OR        A, B               ;; 1 cycle
        BZ        ??dlms_reset_data_196  ;; 4 cycles
        ; ------------------------------------- Block: 25 cycles
// 2801           {
// 2802             val_2byt(opr_data[8], opr_data[9]); 
        MOV       X, N:_opr_data+9   ;; 1 cycle
        MOV       A, N:_opr_data+8   ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
        BR        S:??dlms_reset_data_197  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 2803           }
// 2804           else
// 2805           {
// 2806             opr_data[8]=0x03;
??dlms_reset_data_196:
        MOV       N:_opr_data+8, #0x3  ;; 1 cycle
// 2807             opr_data[9]=0xE8;
        MOV       N:_opr_data+9, #0xE8  ;; 1 cycle
// 2808             val_2byt(opr_data[8], opr_data[9]); 
        MOV       X, N:_opr_data+9   ;; 1 cycle
        MOV       A, N:_opr_data+8   ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 2809           }
// 2810           todbill_add+= 0x10;
??dlms_reset_data_197:
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 2811         }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??Uart_BillFill_6  ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 2812       }
// 2813     }
// 2814     break;
// 2815   default:
// 2816     break;
// 2817   }
// 2818 }
??dlms_reset_data_179:
        ADDW      SP, #0x20          ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock34
        ; ------------------------------------- Block: 7 cycles
        ; ------------------------------------- Total: 982 cycles
// 2819 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock35 Using cfiCommon0
          CFI Function _bill_buffer
        CODE
// 2820 void bill_buffer(void)
// 2821 {
_bill_buffer:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 14
        SUBW      SP, #0xE           ;; 1 cycle
          CFI CFA SP+18
// 2822   uint16_t buffer_filled_u16= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 2823   static uint8_t no_bills; /* bill_LoopIndex */
// 2824   uint8_t u8temp= 0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
// 2825   uint8_t u8tempbill;
// 2826   uint16_t buffer_value_u16[3]= {490, 408, 235};
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      DE, #LWRD(?_0)     ;; 1 cycle
        MOVW      AX, [DE]           ;; 1 cycle
        MOVW      [HL], AX           ;; 1 cycle
        MOVW      AX, [DE+0x02]      ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
        MOVW      AX, [DE+0x04]      ;; 1 cycle
        MOVW      [HL+0x04], AX      ;; 1 cycle
// 2827   uint16_t tempbuffer;
// 2828   uint8_t ctt_pass_f= 0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x04], A       ;; 1 cycle
// 2829   
// 2830   k= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 2831   Start_Info2();
          CFI FunCall _Start_Info2
        CALL      _Start_Info2       ;; 3 cycles
// 2832   k= 15;
        MOVW      AX, #0xF           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 2833   
// 2834   buffer_filled_u16= k;
        MOVW      AX, N:_k           ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 2835   if(buffer_first_not_fill_f == 0)
        CMP0      N:_buffer_first_not_fill_f  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_198  ;; 4 cycles
        ; ------------------------------------- Block: 31 cycles
// 2836   {
// 2837     if(sel_access_flag == 0)
        CMP0      N:_sel_access_flag  ;; 1 cycle
        BNZ       ??dlms_reset_data_199  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2838     {
// 2839       dlms_address= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_dlms_address, AX  ;; 1 cycle
// 2840       if(md_reset_count > MAX_BILL)
        MOV       A, N:_MAX_BILL     ;; 1 cycle
        CMP       A, N:_md_reset_count  ;; 1 cycle
        BNC       ??dlms_reset_data_200  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 2841       {
// 2842         no_bills= MAX_BILL + 1; /* initially 1 max. 13 */
        MOV       A, N:_MAX_BILL     ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       N:`bill_buffer::no_bills`, A  ;; 1 cycle
        BR        S:??dlms_reset_data_201  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 2843       }
// 2844       else
// 2845       {
// 2846         no_bills= bill_count + 1;
??dlms_reset_data_200:
        MOV       A, N:_bill_count   ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       N:`bill_buffer::no_bills`, A  ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 2847       }
// 2848       
// 2849       to_ptr= no_bills;
??dlms_reset_data_201:
        MOV       X, N:`bill_buffer::no_bills`  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      N:_to_ptr, AX      ;; 1 cycle
        BR        N:??dlms_reset_data_202  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 2850     }
// 2851     else
// 2852     {
// 2853       u8tempbill= md_reset_count + 1;
??dlms_reset_data_199:
        MOV       A, N:_md_reset_count  ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 2854       if(u8tempbill > (MAX_BILL + 1))
        MOV       A, [SP]            ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       X, N:_MAX_BILL     ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        INCW      AX                 ;; 1 cycle
          CFI FunCall ?SI_CMP_L02
        CALL      N:?SI_CMP_L02      ;; 3 cycles
        BNC       ??dlms_reset_data_203  ;; 4 cycles
        ; ------------------------------------- Block: 16 cycles
// 2855       {
// 2856         u8tempbill= MAX_BILL + 1;
        MOV       A, N:_MAX_BILL     ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 2857       }
// 2858       
// 2859       if((u8tempbill < to_ptr) || (u8tempbill < from_ptr) || ((from_ptr > to_ptr) && (to_ptr != 0)) || (to_ptr > (MAX_BILL + 1)) || (from_ptr == 0) || (access_selector == 1))
??dlms_reset_data_203:
        MOVW      HL, N:_to_ptr      ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BC        ??dlms_reset_data_204  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
        MOVW      HL, N:_from_ptr    ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BC        ??dlms_reset_data_204  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
        MOVW      HL, N:_from_ptr    ;; 1 cycle
        MOVW      AX, N:_to_ptr      ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNC       ??dlms_reset_data_205  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        CLRW      AX                 ;; 1 cycle
        CMPW      AX, N:_to_ptr      ;; 1 cycle
        BNZ       ??dlms_reset_data_204  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
??dlms_reset_data_205:
        MOVW      HL, N:_to_ptr      ;; 1 cycle
        MOV       X, N:_MAX_BILL     ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BC        ??dlms_reset_data_204  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
        CLRW      AX                 ;; 1 cycle
        CMPW      AX, N:_from_ptr    ;; 1 cycle
        BZ        ??dlms_reset_data_204  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        CMP       N:_access_selector, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_206  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2860       {
// 2861         no_bills= 0;
??dlms_reset_data_204:
        MOV       N:`bill_buffer::no_bills`, #0x0  ;; 1 cycle
        BR        S:??dlms_reset_data_202  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 2862       }
// 2863       else
// 2864       {
// 2865         if(0 == from_ptr)
??dlms_reset_data_206:
        CLRW      AX                 ;; 1 cycle
        CMPW      AX, N:_from_ptr    ;; 1 cycle
        BNZ       ??dlms_reset_data_207  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2866         {
// 2867           from_ptr= 1;
        MOVW      AX, #0x1           ;; 1 cycle
        MOVW      N:_from_ptr, AX    ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 2868         }
// 2869         dlms_address= (from_ptr - 1);
??dlms_reset_data_207:
        MOVW      AX, N:_from_ptr    ;; 1 cycle
        DECW      AX                 ;; 1 cycle
        MOVW      N:_dlms_address, AX  ;; 1 cycle
// 2870         
// 2871         if((to_ptr == 0) || (to_ptr > MAX_BILL + 1))
        CLRW      AX                 ;; 1 cycle
        CMPW      AX, N:_to_ptr      ;; 1 cycle
        BZ        ??dlms_reset_data_208  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
        MOVW      HL, N:_to_ptr      ;; 1 cycle
        MOV       X, N:_MAX_BILL     ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNC       ??dlms_reset_data_209  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 2872         {
// 2873           to_ptr= MAX_BILL + 1;
??dlms_reset_data_208:
        MOV       X, N:_MAX_BILL     ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        MOVW      N:_to_ptr, AX      ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
// 2874         }
// 2875         
// 2876         if(to_ptr > (md_reset_count + 1))
??dlms_reset_data_209:
        MOVW      HL, N:_to_ptr      ;; 1 cycle
        MOV       X, N:_md_reset_count  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNC       ??dlms_reset_data_210  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 2877         {
// 2878           to_ptr= md_reset_count + 1;
        MOV       X, N:_md_reset_count  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        MOVW      N:_to_ptr, AX      ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
// 2879         }
// 2880         no_bills= to_ptr - from_ptr + 1;
??dlms_reset_data_210:
        MOVW      AX, N:_from_ptr    ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOVW      AX, N:_to_ptr      ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        SUB       A, B               ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       N:`bill_buffer::no_bills`, A  ;; 1 cycle
// 2881         if((no_obj == 1))
        CMP       N:_no_obj, #0x1    ;; 1 cycle
        BNZ       ??dlms_reset_data_202  ;; 4 cycles
        ; ------------------------------------- Block: 14 cycles
// 2882         {
// 2883           ctt_pass_f= 1;
        MOV       A, #0x1            ;; 1 cycle
        MOV       [SP+0x04], A       ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 2884         }
// 2885       }
// 2886     }
// 2887     
// 2888     array(no_bills, 0);
??dlms_reset_data_202:
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, N:`bill_buffer::no_bills`  ;; 1 cycle
          CFI FunCall _array
        CALL      _array             ;; 3 cycles
// 2889     block_no= 1;
        MOVW      AX, #0x1           ;; 1 cycle
        MOVW      N:_block_no, AX    ;; 1 cycle
// 2890     if(0 == no_bills)
        CMP0      N:`bill_buffer::no_bills`  ;; 1 cycle
        BNZ       ??dlms_reset_data_211  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 2891     {
// 2892       multi_filling_f= 0;
        MOV       N:_multi_filling_f, #0x0  ;; 1 cycle
// 2893       buffer_first_not_fill_f= 0;
        MOV       N:_buffer_first_not_fill_f, #0x0  ;; 1 cycle
// 2894       u8temp= 1;
        MOV       A, #0x1            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        BR        S:??dlms_reset_data_212  ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 2895     }
// 2896     else
// 2897     {
// 2898       buffer_first_not_fill_f= 1;
??dlms_reset_data_211:
        MOV       N:_buffer_first_not_fill_f, #0x1  ;; 1 cycle
// 2899       multi_filling_f= 1;
        MOV       N:_multi_filling_f, #0x1  ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 2900     }
// 2901     element_filled= 0;
??dlms_reset_data_212:
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_element_filled, AX  ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 2902   }
// 2903   
// 2904   if(ctt_pass_f == 0)
??dlms_reset_data_198:
        MOV       A, [SP+0x04]       ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_213  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2905   {
// 2906     for(; element_filled < (no_bills); element_filled++, sub_element_filled= 0)
??bill_buffer_0:
        MOV       X, N:`bill_buffer::no_bills`  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      HL, N:_element_filled  ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        SKH                          ;; 4 cycles
        BR        N:??dlms_reset_data_214  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 2907     {
// 2908       while(sub_element_filled < 2)
??bill_buffer_1:
        MOV       A, N:_sub_element_filled  ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_215  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2909       {
// 2910         buffer_filled_u16+= buffer_value_u16[sub_element_filled]; //420;//286;
        MOV       X, N:_sub_element_filled  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, [DE]           ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        ADDW      AX, HL             ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 2911         switch(dlms_address)
        MOVW      AX, N:_dlms_address  ;; 1 cycle
        SUBW      AX, #0x0           ;; 1 cycle
        BZ        ??dlms_reset_data_216  ;; 4 cycles
        ; ------------------------------------- Block: 21 cycles
        SUBW      AX, #0x1           ;; 1 cycle
        CMPW      AX, #0xC           ;; 1 cycle
        BC        ??dlms_reset_data_217  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        BR        N:??dlms_reset_data_218  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 2912         {
// 2913         case 0:
// 2914           if(0 == bill_count)
??dlms_reset_data_216:
        CMP0      N:_bill_count      ;; 1 cycle
        BNZ       ??dlms_reset_data_219  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 2915           {
// 2916             current_bill_fill(sub_element_filled);
        MOV       X, N:_sub_element_filled  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
          CFI FunCall _current_bill_fill
        CALL      _current_bill_fill  ;; 3 cycles
        BR        S:??dlms_reset_data_220  ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 2917           }
// 2918           else
// 2919           {
// 2920             if(md_reset_count > MAX_BILL)
??dlms_reset_data_219:
        MOV       A, N:_MAX_BILL     ;; 1 cycle
        CMP       A, N:_md_reset_count  ;; 1 cycle
        BNC       ??dlms_reset_data_221  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2921             {
// 2922               Uart_BillFill(MAX_BILL, sub_element_filled);
        MOV       X, N:_sub_element_filled  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+20
        POP       DE                 ;; 1 cycle
          CFI CFA SP+18
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, N:_MAX_BILL     ;; 1 cycle
          CFI FunCall _Uart_BillFill
        CALL      _Uart_BillFill     ;; 3 cycles
        BR        S:??dlms_reset_data_218  ;; 3 cycles
        ; ------------------------------------- Block: 13 cycles
// 2923             }
// 2924             else
// 2925             {
// 2926               Uart_BillFill(bill_count, sub_element_filled);
??dlms_reset_data_221:
        MOV       X, N:_sub_element_filled  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+20
        POP       DE                 ;; 1 cycle
          CFI CFA SP+18
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, N:_bill_count   ;; 1 cycle
          CFI FunCall _Uart_BillFill
        CALL      _Uart_BillFill     ;; 3 cycles
        ; ------------------------------------- Block: 10 cycles
// 2927             }
// 2928           }
// 2929           
// 2930           break;
??dlms_reset_data_220:
        BR        S:??dlms_reset_data_218  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 2931           
// 2932         case 1:
// 2933         case 2:
// 2934         case 3:
// 2935         case 4:
// 2936         case 5:
// 2937         case 6:
// 2938         case 7:
// 2939         case 8:
// 2940         case 9:
// 2941         case 10:
// 2942         case 11:
// 2943         case 12:
// 2944           if(dlms_address >= MAX_BILL)
??dlms_reset_data_217:
        MOV       X, N:_MAX_BILL     ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      HL, N:_dlms_address  ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BH        ??dlms_reset_data_222  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 2945           {
// 2946             current_bill_fill(sub_element_filled);
        MOV       X, N:_sub_element_filled  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
          CFI FunCall _current_bill_fill
        CALL      _current_bill_fill  ;; 3 cycles
        BR        S:??dlms_reset_data_218  ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 2947           }
// 2948           else if(md_reset_count > MAX_BILL)
??dlms_reset_data_222:
        MOV       A, N:_MAX_BILL     ;; 1 cycle
        CMP       A, N:_md_reset_count  ;; 1 cycle
        BNC       ??dlms_reset_data_223  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2949           {
// 2950             Uart_BillFill((MAX_BILL - dlms_address), sub_element_filled);
        MOV       X, N:_sub_element_filled  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+20
        POP       DE                 ;; 1 cycle
          CFI CFA SP+18
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, N:_dlms_address  ;; 1 cycle
        MOV       A, N:_MAX_BILL     ;; 1 cycle
        SUB       A, X               ;; 1 cycle
          CFI FunCall _Uart_BillFill
        CALL      _Uart_BillFill     ;; 3 cycles
        BR        S:??dlms_reset_data_218  ;; 3 cycles
        ; ------------------------------------- Block: 15 cycles
// 2951           }
// 2952           else if(md_reset_count > dlms_address)
??dlms_reset_data_223:
        MOV       X, N:_md_reset_count  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      HL, N:_dlms_address  ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNH       ??dlms_reset_data_224  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 2953           {
// 2954             Uart_BillFill((md_reset_count - dlms_address), sub_element_filled);
        MOV       X, N:_sub_element_filled  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+20
        POP       DE                 ;; 1 cycle
          CFI CFA SP+18
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, N:_dlms_address  ;; 1 cycle
        MOV       A, N:_md_reset_count  ;; 1 cycle
        SUB       A, X               ;; 1 cycle
          CFI FunCall _Uart_BillFill
        CALL      _Uart_BillFill     ;; 3 cycles
        BR        S:??dlms_reset_data_218  ;; 3 cycles
        ; ------------------------------------- Block: 15 cycles
// 2955           }
// 2956           else
// 2957           {
// 2958             current_bill_fill(sub_element_filled);
??dlms_reset_data_224:
        MOV       X, N:_sub_element_filled  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
          CFI FunCall _current_bill_fill
        CALL      _current_bill_fill  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 2959           }
// 2960           break;
// 2961         default:
// 2962           break;
// 2963         }
// 2964         tempbuffer= buffer_filled_u16 + buffer_value_u16[sub_element_filled + 1];
??dlms_reset_data_218:
        MOV       X, N:_sub_element_filled  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
        ADDW      AX, HL             ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        ADDW      AX, [HL+0x02]      ;; 1 cycle
        MOVW      [SP+0x06], AX      ;; 1 cycle
// 2965         sub_element_filled++;
        INC       N:_sub_element_filled  ;; 2 cycles
// 2966         if(sub_element_filled >= 2)
        MOV       A, N:_sub_element_filled  ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BC        ??dlms_reset_data_225  ;; 4 cycles
        ; ------------------------------------- Block: 21 cycles
// 2967         {
// 2968           dlms_address++;
        INCW      N:_dlms_address    ;; 2 cycles
// 2969           sub_element_filled= 0;
        MOV       N:_sub_element_filled, #0x0  ;; 1 cycle
// 2970           break;
        BR        S:??dlms_reset_data_215  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 2971         }
// 2972         if(DLMS_MAX_BUFF_SIZE < (tempbuffer))
??dlms_reset_data_225:
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        CMPW      AX, #0x201         ;; 1 cycle
        SKNC                         ;; 4 cycles
        BR        N:??bill_buffer_1  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 2973         {
// 2974           break;
// 2975         }
// 2976       }
// 2977       if(DLMS_MAX_BUFF_SIZE < (buffer_filled_u16 + 362))
??dlms_reset_data_215:
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        ADDW      AX, #0x16A         ;; 1 cycle
        CMPW      AX, #0x201         ;; 1 cycle
        BNC       ??dlms_reset_data_214  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 2978       {
// 2979         break;
// 2980       }
// 2981     }
        INCW      N:_element_filled  ;; 2 cycles
        MOV       N:_sub_element_filled, #0x0  ;; 1 cycle
        BR        N:??bill_buffer_0  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 2982   }
// 2983   else
// 2984   {
// 2985     structure(1);
??dlms_reset_data_213:
        MOV       A, #0x1            ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 2986     date_time(Now.day, Now.month, Now.year, Now.hour, Now.min, 0, 0); /* current billing date */
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       D, #0x0            ;; 1 cycle
        MOV       A, N:_Now+1        ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_Now+2        ;; 1 cycle
        MOV       C, N:_Now+6        ;; 1 cycle
        MOV       X, N:_Now+5        ;; 1 cycle
        MOV       A, N:_Now+3        ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
// 2987     dlms_address++;
        INCW      N:_dlms_address    ;; 2 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+18
        ; ------------------------------------- Block: 19 cycles
// 2988   }
// 2989   
// 2990   if(dlms_address >= to_ptr)
??dlms_reset_data_214:
        MOVW      HL, N:_to_ptr      ;; 1 cycle
        MOVW      AX, N:_dlms_address  ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BC        ??dlms_reset_data_226  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 2991   {
// 2992     multi_filling_f= 0;
        MOV       N:_multi_filling_f, #0x0  ;; 1 cycle
// 2993     buffer_first_not_fill_f= 0;
        MOV       N:_buffer_first_not_fill_f, #0x0  ;; 1 cycle
// 2994     u8temp= 1;
        MOV       A, #0x1            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
// 2995   }
// 2996   
// 2997   send_data(u8temp);
??dlms_reset_data_226:
        MOV       A, [SP+0x01]       ;; 1 cycle
          CFI FunCall _send_data
        CALL      _send_data         ;; 3 cycles
// 2998 } /* swlong_data */
        ADDW      SP, #0xE           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock35
        ; ------------------------------------- Block: 11 cycles
        ; ------------------------------------- Total: 465 cycles

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
`bill_buffer::no_bills`:
        DS 1
// 2999 
// 3000 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function _day_profile
        CODE
// 3001 void day_profile(uint8_t passive)
// 3002 {
_day_profile:
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        ; Auto size: 34
        SUBW      SP, #0x20          ;; 1 cycle
          CFI CFA SP+38
// 3003   uint16_t buffer_filled_u16, lu16_addr;
// 3004   uint8_t i_d, u8temp;
// 3005   
// 3006   uint8_t u8dayid1, u8dayid2, u8noofdayid, num_of_zone;
// 3007   uint8_t day_id1[9], day_id2[9], day_id_bytes[2];
// 3008   
// 3009   k = 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 3010   Start_Info2();
          CFI FunCall _Start_Info2
        CALL      _Start_Info2       ;; 3 cycles
// 3011   k = 15;
        MOVW      AX, #0xF           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 3012   
// 3013   buffer_filled_u16 = k;
        MOVW      AX, N:_k           ;; 1 cycle
        MOVW      [SP+0x0A], AX      ;; 1 cycle
// 3014   
// 3015   if (0 == passive)
        MOV       A, [SP+0x21]       ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_227  ;; 4 cycles
        ; ------------------------------------- Block: 17 cycles
// 3016   {
// 3017     lu16_addr = TOU_DAY_ACTIVE_ADD;
        MOVW      AX, #0x1500        ;; 1 cycle
        MOVW      [SP+0x04], AX      ;; 1 cycle
        BR        S:??dlms_reset_data_228  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 3018   }
// 3019   else
// 3020   {
// 3021     lu16_addr = TOU_DAY_ACTIVE_ADD + 0x60;
??dlms_reset_data_227:
        MOVW      AX, #0x1560        ;; 1 cycle
        MOVW      [SP+0x04], AX      ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 3022   }
// 3023   eprom_read(lu16_addr,0,PAGE_1,AUTO_CALC);//season 1
??dlms_reset_data_228:
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x04]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3024   memcpy(day_id1, &opr_data[0], 9);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x16          ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOV       B, #0x9            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
// 3025   u8noofdayid = opr_data[13];
        MOV       A, N:_opr_data+13  ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
// 3026   u8dayid1 = opr_data[14];
        MOV       A, N:_opr_data+14  ;; 1 cycle
        MOV       [SP+0x09], A       ;; 1 cycle
// 3027   
// 3028   temp_us32 = lu16_addr + 0x30;
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        ADDW      AX, #0x30          ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_temp_us32, AX   ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_us32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3029   eprom_read(temp_us32,0,PAGE_1,AUTO_CALC);//season 2
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+40
        MOVW      HL, S:_temp_us32+2  ;; 1 cycle
        MOVW      DE, S:_temp_us32   ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+38
        XCH       A, E               ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3030   memcpy(day_id2, &opr_data[0], 9);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0xC           ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOV       B, #0x9            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
// 3031   u8dayid2 = opr_data[14];
        MOV       A, N:_opr_data+14  ;; 1 cycle
        MOV       [SP+0x08], A       ;; 1 cycle
// 3032   
// 3033   if (buffer_first_not_fill_f == 0)
        CMP0      N:_buffer_first_not_fill_f  ;; 1 cycle
        BNZ       ??dlms_reset_data_229  ;; 4 cycles
        ; ------------------------------------- Block: 55 cycles
// 3034   {
// 3035     buffer_first_not_fill_f = 1;
        MOV       N:_buffer_first_not_fill_f, #0x1  ;; 1 cycle
// 3036     multi_filling_f = 1;
        MOV       N:_multi_filling_f, #0x1  ;; 1 cycle
// 3037     element_filled = 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_element_filled, AX  ;; 1 cycle
// 3038     block_no = 1;
        MOVW      AX, #0x1           ;; 1 cycle
        MOVW      N:_block_no, AX    ;; 1 cycle
// 3039     no_bytes = 2 + (day_id1[0] * 19) + (day_id2[0] * 19);
        MOV       A, [SP+0x0C]       ;; 1 cycle
        MOV       X, #0x13           ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, [SP+0x16]       ;; 1 cycle
        MOV       X, #0x13           ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       A, B               ;; 1 cycle
        ADD       A, #0x2            ;; 1 cycle
        MOV       N:_no_bytes, A     ;; 1 cycle
// 3040     array(u8noofdayid, 0);
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, [SP+0x02]       ;; 1 cycle
          CFI FunCall _array
        CALL      _array             ;; 3 cycles
        ; ------------------------------------- Block: 23 cycles
// 3041   }
// 3042   
// 3043   day_id_bytes[0] = day_id1[0] * 19;
??dlms_reset_data_229:
        MOV       A, [SP+0x16]       ;; 1 cycle
        MOV       X, #0x13           ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       [SP+0x06], A       ;; 1 cycle
// 3044   day_id_bytes[1] = day_id2[0] * 19;
        MOV       A, [SP+0x0C]       ;; 1 cycle
        MOV       X, #0x13           ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       [SP+0x07], A       ;; 1 cycle
        ; ------------------------------------- Block: 10 cycles
// 3045   
// 3046   for (; element_filled < u8noofdayid; element_filled++)
??day_profile_0:
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      HL, N:_element_filled  ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        SKH                          ;; 4 cycles
        BR        N:??dlms_reset_data_230  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 3047   {
// 3048     
// 3049     buffer_filled_u16 += 6 + day_id_bytes[element_filled];
        MOVW      HL, N:_element_filled  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x6           ;; 1 cycle
        ADDW      AX, HL             ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOV       A, [HL]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, #0x6           ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [SP+0x0A]      ;; 1 cycle
        ADDW      AX, HL             ;; 1 cycle
        MOVW      [SP+0x0A], AX      ;; 1 cycle
// 3050     
// 3051     structure(2);
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 3052     info[k++] = 0x11;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x11           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 3053     
// 3054     if (element_filled == 0)
        CLRW      AX                 ;; 1 cycle
        CMPW      AX, N:_element_filled  ;; 1 cycle
        BNZ       ??dlms_reset_data_231  ;; 4 cycles
        ; ------------------------------------- Block: 28 cycles
// 3055     {
// 3056       info[k++] = u8dayid1;
        MOV       A, [SP+0x09]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 3057       num_of_zone = day_id1[0];
        MOV       A, [SP+0x16]       ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        BR        S:??dlms_reset_data_232  ;; 3 cycles
        ; ------------------------------------- Block: 10 cycles
// 3058     }
// 3059     else
// 3060     {
// 3061       info[k++] = u8dayid2;
??dlms_reset_data_231:
        MOV       A, [SP+0x08]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 3062       num_of_zone = day_id2[0];
        MOV       A, [SP+0x0C]       ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        ; ------------------------------------- Block: 7 cycles
// 3063     }
// 3064     
// 3065     if(num_of_zone > 8)
??dlms_reset_data_232:
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BC        ??dlms_reset_data_233  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3066     {
// 3067       num_of_zone=8;
        MOV       A, #0x8            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 3068     }
// 3069     
// 3070     array(num_of_zone, 0);
??dlms_reset_data_233:
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
          CFI FunCall _array
        CALL      _array             ;; 3 cycles
// 3071     
// 3072     temp_us32 = lu16_addr + 0x10 + (element_filled * 0x30);
        MOVW      AX, N:_element_filled  ;; 1 cycle
        MOVW      BC, #0x30          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        ADDW      AX, HL             ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_temp_us32, AX   ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_us32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3073     eprom_read(temp_us32,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+40
        MOVW      HL, S:_temp_us32+2  ;; 1 cycle
        MOVW      DE, S:_temp_us32   ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+38
        XCH       A, E               ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3074     
// 3075     for (i_d = 0; i_d < num_of_zone; i_d++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 34 cycles
??day_profile_1:
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_234  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 3076     {
// 3077       structure(3);
        MOV       A, #0x3            ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 3078       octet_s(4, 0);
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0x4            ;; 1 cycle
          CFI FunCall _octet_s
        CALL      _octet_s           ;; 3 cycles
// 3079       
// 3080       if (7 == i_d)
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x7            ;; 1 cycle
        BNZ       ??dlms_reset_data_235  ;; 4 cycles
        ; ------------------------------------- Block: 15 cycles
// 3081       {
// 3082         load_time(*(&opr_data[0]), *(&opr_data[0] + 1), 0);
        MOV       C, #0x0            ;; 1 cycle
        MOV       X, N:_opr_data+1   ;; 1 cycle
        MOV       A, N:_opr_data     ;; 1 cycle
          CFI FunCall _load_time
        CALL      _load_time         ;; 3 cycles
        BR        S:??dlms_reset_data_236  ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 3083       }
// 3084       else
// 3085       {
// 3086         load_time(*((&opr_data[0]) + (2 * i_d)), (*((&opr_data[0]) + (2 * i_d) + 1)), 0);
??dlms_reset_data_235:
        MOV       C, #0x0            ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_opr_data+1)[BC]  ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_opr_data)[BC]  ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
          CFI FunCall _load_time
        CALL      _load_time         ;; 3 cycles
        ; ------------------------------------- Block: 39 cycles
// 3087       }
// 3088       
// 3089       memcpy(&info[k], obis_fill, 8);
??dlms_reset_data_236:
        MOVW      DE, #LWRD(_obis_fill)  ;; 1 cycle
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #LWRD(_info)   ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOV       B, #0x8            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
// 3090       k += 8;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 3091       long_unsign();
          CFI FunCall _long_unsign
        CALL      _long_unsign       ;; 3 cycles
// 3092       if (element_filled == 0)
        CLRW      AX                 ;; 1 cycle
        CMPW      AX, N:_element_filled  ;; 1 cycle
        BNZ       ??dlms_reset_data_237  ;; 4 cycles
        ; ------------------------------------- Block: 20 cycles
// 3093       {
// 3094         info[k++] = day_id1[i_d + 1];
        MOV       A, [SP]            ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        MOV       H, #0x0            ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x16          ;; 1 cycle
        ADDW      AX, HL             ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        INCW      HL                 ;; 1 cycle
        MOV       A, [HL]            ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        BR        S:??dlms_reset_data_238  ;; 3 cycles
        ; ------------------------------------- Block: 16 cycles
// 3095       }
// 3096       else
// 3097       {
// 3098         info[k++] = day_id2[i_d + 1];
??dlms_reset_data_237:
        MOV       A, [SP]            ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        MOV       H, #0x0            ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0xC           ;; 1 cycle
        ADDW      AX, HL             ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        INCW      HL                 ;; 1 cycle
        MOV       A, [HL]            ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        ; ------------------------------------- Block: 13 cycles
// 3099       }
// 3100       
// 3101       if ((6 == i_d) && (8 == num_of_zone))
??dlms_reset_data_238:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x6            ;; 1 cycle
        BNZ       ??dlms_reset_data_239  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNZ       ??dlms_reset_data_239  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3102       {
// 3103         temp_us32 = lu16_addr + 0x20 + (element_filled * 0x30);
        MOVW      AX, N:_element_filled  ;; 1 cycle
        MOVW      BC, #0x30          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        ADDW      AX, HL             ;; 1 cycle
        ADDW      AX, #0x20          ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_temp_us32, AX   ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_us32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3104         eprom_read(temp_us32,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+40
        MOVW      HL, S:_temp_us32+2  ;; 1 cycle
        MOVW      DE, S:_temp_us32   ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+38
        XCH       A, E               ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
        ; ------------------------------------- Block: 27 cycles
// 3105       }
// 3106     }
??dlms_reset_data_239:
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        N:??day_profile_1  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 3107     
// 3108     //  Comment
// 3109     //    Inside if() loop, (element_filled+1) value is used in day_id_bytes[] array
// 3110     //    when element_filled variable's value is 1,then day_id_bytes[2] is referred, which is not declared
// 3111     //    So now outer if() condition is applied, such that when element_filled value is 1,
// 3112     //    then inner if() condition will not be checked.
// 3113     
// 3114     if ((element_filled + 1) < u8noofdayid)
??dlms_reset_data_234:
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      HL, N:_element_filled  ;; 1 cycle
        INCW      HL                 ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNH       ??dlms_reset_data_240  ;; 4 cycles
        ; ------------------------------------- Block: 10 cycles
// 3115     {
// 3116       if (DLMS_MAX_BUFF_SIZE < (buffer_filled_u16 + 6 + day_id_bytes[element_filled + 1]))
        MOVW      HL, N:_element_filled  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x6           ;; 1 cycle
        ADDW      AX, HL             ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        INCW      HL                 ;; 1 cycle
        MOV       A, [HL]            ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        MOV       H, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x0A]      ;; 1 cycle
        ADDW      AX, HL             ;; 1 cycle
        ADDW      AX, #0x6           ;; 1 cycle
        CMPW      AX, #0x201         ;; 1 cycle
        BNC       ??dlms_reset_data_230  ;; 4 cycles
        ; ------------------------------------- Block: 17 cycles
// 3117       {
// 3118         break;
// 3119       }
// 3120     }
// 3121   }
??dlms_reset_data_240:
        INCW      N:_element_filled  ;; 2 cycles
        BR        N:??day_profile_0  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 3122   
// 3123   element_filled++;
??dlms_reset_data_230:
        INCW      N:_element_filled  ;; 2 cycles
// 3124   if(element_filled >= 2)
        MOVW      AX, N:_element_filled  ;; 1 cycle
        CMPW      AX, #0x2           ;; 1 cycle
        BC        ??dlms_reset_data_241  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 3125   {
// 3126     buffer_first_not_fill_f= 0;
        MOV       N:_buffer_first_not_fill_f, #0x0  ;; 1 cycle
// 3127     multi_filling_f= 0;
        MOV       N:_multi_filling_f, #0x0  ;; 1 cycle
// 3128     u8temp= 1;
        MOV       A, #0x1            ;; 1 cycle
        MOV       [SP+0x03], A       ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
// 3129   }
// 3130   send_data(u8temp);
??dlms_reset_data_241:
        MOV       A, [SP+0x03]       ;; 1 cycle
          CFI FunCall _send_data
        CALL      _send_data         ;; 3 cycles
// 3131 }
        ADDW      SP, #0x22          ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock36
        ; ------------------------------------- Block: 11 cycles
        ; ------------------------------------- Total: 428 cycles
// 3132 
// 3133 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function _deter_season
        CODE
// 3134 void deter_season(void)
// 3135 {
_deter_season:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 4
        SUBW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+8
// 3136   uint8_t number_of_season;
// 3137   uint16_t lu16_addr;
// 3138   
// 3139   if (0 == active_calendar)
        CMP0      N:_active_calendar  ;; 1 cycle
        BNZ       ??dlms_reset_data_242  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3140   {
// 3141     lu16_addr = TOU_CAL_ACTIVE_ADD + 0x10;
        MOVW      AX, #0x1410        ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
        BR        S:??dlms_reset_data_243  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 3142   }
// 3143   else
// 3144   {
// 3145     lu16_addr = TOU_CAL_PASSIVE_ADD + 0x10;
??dlms_reset_data_242:
        MOVW      AX, #0x1450        ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 3146   }
// 3147   
// 3148   eprom_read(lu16_addr,0,PAGE_1,AUTO_CALC);
??dlms_reset_data_243:
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3149   number_of_season = opr_data[0];
        MOV       A, N:_opr_data     ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
// 3150   
// 3151   lu16_addr += 0x10;
        MOVW      AX, [SP]           ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
// 3152   eprom_read(lu16_addr,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3153   
// 3154   if (number_of_season != 1)
        MOV       A, [SP+0x02]       ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_244  ;; 4 cycles
        ; ------------------------------------- Block: 25 cycles
// 3155   {
// 3156     if ((opr_data[3] < opr_data[8]) || ((opr_data[3] == opr_data[8]) && (opr_data[4] < opr_data[9])))
        MOV       A, N:_opr_data+3   ;; 1 cycle
        CMP       A, N:_opr_data+8   ;; 1 cycle
        BC        ??dlms_reset_data_245  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_opr_data+3   ;; 1 cycle
        CMP       A, N:_opr_data+8   ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_246  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_opr_data+4   ;; 1 cycle
        CMP       A, N:_opr_data+9   ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_246  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3157     {
// 3158       if ((present_month > opr_data[3]) || ((present_month == opr_data[3]) && (present_date >= opr_data[4])))
??dlms_reset_data_245:
        MOV       A, N:_opr_data+3   ;; 1 cycle
        CMP       A, N:_Now+5        ;; 1 cycle
        BC        ??dlms_reset_data_247  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_Now+5        ;; 1 cycle
        CMP       A, N:_opr_data+3   ;; 1 cycle
        BNZ       ??dlms_reset_data_248  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_Now+3        ;; 1 cycle
        CMP       A, N:_opr_data+4   ;; 1 cycle
        BC        ??dlms_reset_data_248  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3159       {
// 3160         if ((present_month > opr_data[8]) || ((present_month == opr_data[8]) && (present_date >= opr_data[9])))
??dlms_reset_data_247:
        MOV       A, N:_opr_data+8   ;; 1 cycle
        CMP       A, N:_Now+5        ;; 1 cycle
        BC        ??dlms_reset_data_249  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_Now+5        ;; 1 cycle
        CMP       A, N:_opr_data+8   ;; 1 cycle
        BNZ       ??dlms_reset_data_250  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_Now+3        ;; 1 cycle
        CMP       A, N:_opr_data+9   ;; 1 cycle
        BC        ??dlms_reset_data_250  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3161         {
// 3162           lu16_addr += 0x10;
??dlms_reset_data_249:
        MOVW      AX, [SP]           ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
// 3163           eprom_read(lu16_addr,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3164           memcpy(&Week_Name, &opr_data[7], 7);
        MOVW      DE, #LWRD(_opr_data+7)  ;; 1 cycle
        MOVW      HL, #LWRD(_Week_Name)  ;; 1 cycle
        MOV       B, #0x7            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
        BR        N:??dlms_reset_data_251  ;; 3 cycles
        ; ------------------------------------- Block: 19 cycles
// 3165         }
// 3166         else
// 3167         {
// 3168           lu16_addr += 0x10;
??dlms_reset_data_250:
        MOVW      AX, [SP]           ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
// 3169           eprom_read(lu16_addr,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3170           memcpy(&Week_Name, &opr_data[0], 7);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      HL, #LWRD(_Week_Name)  ;; 1 cycle
        MOV       B, #0x7            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
        BR        N:??dlms_reset_data_251  ;; 3 cycles
        ; ------------------------------------- Block: 19 cycles
// 3171         }
// 3172       }
// 3173       else
// 3174       {
// 3175         lu16_addr += 0x10;
??dlms_reset_data_248:
        MOVW      AX, [SP]           ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
// 3176         eprom_read(lu16_addr,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3177         memcpy(&Week_Name, &opr_data[7], 7);
        MOVW      DE, #LWRD(_opr_data+7)  ;; 1 cycle
        MOVW      HL, #LWRD(_Week_Name)  ;; 1 cycle
        MOV       B, #0x7            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
        BR        N:??dlms_reset_data_251  ;; 3 cycles
        ; ------------------------------------- Block: 19 cycles
// 3178       }
// 3179     }
// 3180     else if ((opr_data[3] > opr_data[8]) || ((opr_data[3] == opr_data[8]) && (opr_data[4] > opr_data[9])))
??dlms_reset_data_246:
        MOV       A, N:_opr_data+8   ;; 1 cycle
        CMP       A, N:_opr_data+3   ;; 1 cycle
        BC        ??dlms_reset_data_252  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_opr_data+3   ;; 1 cycle
        CMP       A, N:_opr_data+8   ;; 1 cycle
        BNZ       ??dlms_reset_data_253  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_opr_data+9   ;; 1 cycle
        CMP       A, N:_opr_data+4   ;; 1 cycle
        BNC       ??dlms_reset_data_253  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3181     {
// 3182       if (((present_month > opr_data[3]) || ((present_month == opr_data[3]) && (present_date >= opr_data[4]))) 
// 3183           || ((present_month < opr_data[8]) || ((present_month == opr_data[8]) && (present_date < opr_data[9]))))
??dlms_reset_data_252:
        MOV       A, N:_opr_data+3   ;; 1 cycle
        CMP       A, N:_Now+5        ;; 1 cycle
        BC        ??dlms_reset_data_254  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_Now+5        ;; 1 cycle
        CMP       A, N:_opr_data+3   ;; 1 cycle
        BNZ       ??dlms_reset_data_255  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_Now+3        ;; 1 cycle
        CMP       A, N:_opr_data+4   ;; 1 cycle
        BNC       ??dlms_reset_data_254  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
??dlms_reset_data_255:
        MOV       A, N:_Now+5        ;; 1 cycle
        CMP       A, N:_opr_data+8   ;; 1 cycle
        BC        ??dlms_reset_data_254  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_Now+5        ;; 1 cycle
        CMP       A, N:_opr_data+8   ;; 1 cycle
        BNZ       ??dlms_reset_data_256  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_Now+3        ;; 1 cycle
        CMP       A, N:_opr_data+9   ;; 1 cycle
        BNC       ??dlms_reset_data_256  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3184       {
// 3185         lu16_addr += 0x10;
??dlms_reset_data_254:
        MOVW      AX, [SP]           ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
// 3186         eprom_read(lu16_addr,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3187         memcpy(&Week_Name, &opr_data[0], 7);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      HL, #LWRD(_Week_Name)  ;; 1 cycle
        MOV       B, #0x7            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
        BR        S:??dlms_reset_data_251  ;; 3 cycles
        ; ------------------------------------- Block: 19 cycles
// 3188       }
// 3189       else
// 3190       {
// 3191         lu16_addr += 0x10;
??dlms_reset_data_256:
        MOVW      AX, [SP]           ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
// 3192         eprom_read(lu16_addr,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3193         memcpy(&Week_Name, &opr_data[7], 7);
        MOVW      DE, #LWRD(_opr_data+7)  ;; 1 cycle
        MOVW      HL, #LWRD(_Week_Name)  ;; 1 cycle
        MOV       B, #0x7            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
        BR        S:??dlms_reset_data_251  ;; 3 cycles
        ; ------------------------------------- Block: 19 cycles
// 3194       }
// 3195     }
// 3196     else
// 3197     {
// 3198       lu16_addr += 0x10;
??dlms_reset_data_253:
        MOVW      AX, [SP]           ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
// 3199       eprom_read(lu16_addr,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3200       memcpy(&Week_Name, &opr_data[0], 7);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      HL, #LWRD(_Week_Name)  ;; 1 cycle
        MOV       B, #0x7            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
        BR        S:??dlms_reset_data_251  ;; 3 cycles
        ; ------------------------------------- Block: 19 cycles
// 3201     }
// 3202   }
// 3203   else
// 3204   {
// 3205     lu16_addr += 0x10;
??dlms_reset_data_244:
        MOVW      AX, [SP]           ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
// 3206     eprom_read(lu16_addr,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3207     memcpy(&Week_Name, &opr_data[0], 7);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      HL, #LWRD(_Week_Name)  ;; 1 cycle
        MOV       B, #0x7            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
          CFI FunCall _deter_week
        ; ------------------------------------- Block: 16 cycles
// 3208   }
// 3209   
// 3210   deter_week();
??dlms_reset_data_251:
        CALL      _deter_week        ;; 3 cycles
// 3211 }
        ADDW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock37
        ; ------------------------------------- Block: 10 cycles
        ; ------------------------------------- Total: 286 cycles
// 3212 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function _deter_week
        CODE
// 3213 void deter_week(void)
// 3214 {
_deter_week:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 6
        SUBW      SP, #0x6           ;; 1 cycle
          CFI CFA SP+10
// 3215   uint8_t u8day_id, pointer;
// 3216   uint16_t lu16_addr, lu16_addr1;
// 3217   
// 3218   lu16_addr = (TOU_WEEK_ACTIVE_ADD + (0x40 * active_calendar));
        MOV       X, N:_active_calendar  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x40          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x1480        ;; 1 cycle
        MOVW      [SP+0x04], AX      ;; 1 cycle
// 3219   lu16_addr1 = (TOU_DAY_ACTIVE_ADD + (0x60 * active_calendar));
        MOV       X, N:_active_calendar  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x60          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x1500        ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 3220   
// 3221   eprom_read(lu16_addr,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x04]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3222   
// 3223   for (pointer = 0; pointer < 7; ++pointer)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 24 cycles
??deter_week_0:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x7            ;; 1 cycle
        BNC       ??dlms_reset_data_257  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3224   {
// 3225     if (opr_data[pointer] != Week_Name[pointer])
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_opr_data)[B]  ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_Week_Name)[B]  ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BNZ       ??dlms_reset_data_257  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 3226     {
// 3227       break;
// 3228     }
// 3229   }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??deter_week_0   ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 3230   
// 3231   if (pointer == 7)
??dlms_reset_data_257:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x7            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_258  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3232   {
// 3233     temp_s32 = lu16_addr + 0x10;
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3234     eprom_read(temp_s32,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+12
        MOVW      HL, S:_temp_s32+2  ;; 1 cycle
        MOVW      DE, S:_temp_s32    ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+10
        XCH       A, E               ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3235     
// 3236     u8day_id = opr_data[Now.week];
        MOV       B, N:_Now+4        ;; 1 cycle
        MOV       A, (_opr_data)[B]  ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
// 3237     
// 3238     eprom_read(lu16_addr1,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3239     if (opr_data[14] == u8day_id)
        MOV       X, N:_opr_data+14  ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BNZ       ??dlms_reset_data_259  ;; 4 cycles
        ; ------------------------------------- Block: 38 cycles
// 3240     {
// 3241       memcpy(&tou_a8traiff, &opr_data[0], 9);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      HL, #LWRD(_tou_a8traiff)  ;; 1 cycle
        MOV       B, #0x9            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
// 3242       
// 3243       temp_s32 = lu16_addr1 + 0x10;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3244       eprom_read(temp_s32,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+12
        MOVW      HL, S:_temp_s32+2  ;; 1 cycle
        MOVW      DE, S:_temp_s32    ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+10
        XCH       A, E               ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3245       memcpy(&tou_a8zone_time[0], &opr_data[0], 14);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      HL, #LWRD(_tou_a8zone_time)  ;; 1 cycle
        MOV       B, #0xE            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
// 3246       
// 3247       temp_s32 = lu16_addr1 + 0x20;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        ADDW      AX, #0x20          ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3248       eprom_read(temp_s32,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+12
        MOVW      HL, S:_temp_s32+2  ;; 1 cycle
        MOVW      DE, S:_temp_s32    ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+10
        XCH       A, E               ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3249       memcpy(&tou_a8zone_time[14], &opr_data[0], 2);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      HL, #LWRD(_tou_a8zone_time+14)  ;; 1 cycle
        MOV       B, #0x2            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
        BR        N:??dlms_reset_data_260  ;; 3 cycles
        ; ------------------------------------- Block: 63 cycles
// 3250     }
// 3251     else
// 3252     {
// 3253       
// 3254       temp_s32 = lu16_addr1 + 0x30;
??dlms_reset_data_259:
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        ADDW      AX, #0x30          ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3255       eprom_read(temp_s32,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+12
        MOVW      HL, S:_temp_s32+2  ;; 1 cycle
        MOVW      DE, S:_temp_s32    ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+10
        XCH       A, E               ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3256       if (opr_data[14] == u8day_id)
        MOV       X, N:_opr_data+14  ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_260  ;; 4 cycles
        ; ------------------------------------- Block: 28 cycles
// 3257       {
// 3258         memcpy(&tou_a8traiff, &opr_data[0], 9);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      HL, #LWRD(_tou_a8traiff)  ;; 1 cycle
        MOV       B, #0x9            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
// 3259         
// 3260         temp_s32 = lu16_addr1 + 0x40;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        ADDW      AX, #0x40          ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3261         eprom_read(temp_s32,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+12
        MOVW      HL, S:_temp_s32+2  ;; 1 cycle
        MOVW      DE, S:_temp_s32    ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+10
        XCH       A, E               ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3262         memcpy(&tou_a8zone_time[0], &opr_data[0], 14);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      HL, #LWRD(_tou_a8zone_time)  ;; 1 cycle
        MOV       B, #0xE            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
// 3263         
// 3264         temp_s32 = lu16_addr1 + 0x50;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        ADDW      AX, #0x50          ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3265         eprom_read(temp_s32,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+12
        MOVW      HL, S:_temp_s32+2  ;; 1 cycle
        MOVW      DE, S:_temp_s32    ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+10
        XCH       A, E               ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3266         memcpy(&tou_a8zone_time[14], &opr_data[0], 2);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      HL, #LWRD(_tou_a8zone_time+14)  ;; 1 cycle
        MOV       B, #0x2            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
        BR        N:??dlms_reset_data_260  ;; 3 cycles
        ; ------------------------------------- Block: 63 cycles
// 3267       }
// 3268     }
// 3269   }
// 3270   else
// 3271   {
// 3272     temp_s32 = lu16_addr + 0x20;
??dlms_reset_data_258:
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        ADDW      AX, #0x20          ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3273     eprom_read(temp_s32,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+12
        MOVW      HL, S:_temp_s32+2  ;; 1 cycle
        MOVW      DE, S:_temp_s32    ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+10
        XCH       A, E               ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3274     
// 3275     for (pointer = 0; pointer < 7; ++pointer)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 23 cycles
??deter_week_1:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x7            ;; 1 cycle
        BNC       ??dlms_reset_data_261  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3276     {
// 3277       if (opr_data[pointer] != Week_Name[pointer])
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_opr_data)[B]  ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_Week_Name)[B]  ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BNZ       ??dlms_reset_data_261  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 3278       {
// 3279         break;
// 3280       } 
// 3281     }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??deter_week_1   ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 3282     
// 3283     if (pointer == 7)
??dlms_reset_data_261:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x7            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_260  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3284     {
// 3285       temp_s32 = lu16_addr + 0x30;
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        ADDW      AX, #0x30          ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3286       eprom_read(temp_s32,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+12
        MOVW      HL, S:_temp_s32+2  ;; 1 cycle
        MOVW      DE, S:_temp_s32    ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+10
        XCH       A, E               ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3287       
// 3288       u8day_id=opr_data[Now.week];
        MOV       B, N:_Now+4        ;; 1 cycle
        MOV       A, (_opr_data)[B]  ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
// 3289       
// 3290       eprom_read(lu16_addr1,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3291       if (opr_data[14] == u8day_id)
        MOV       X, N:_opr_data+14  ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BNZ       ??dlms_reset_data_262  ;; 4 cycles
        ; ------------------------------------- Block: 38 cycles
// 3292       {
// 3293         memcpy(&tou_a8traiff, &opr_data[0], 9);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      HL, #LWRD(_tou_a8traiff)  ;; 1 cycle
        MOV       B, #0x9            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
// 3294         
// 3295         temp_s32 = lu16_addr1 + 0x10;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3296         eprom_read(temp_s32,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+12
        MOVW      HL, S:_temp_s32+2  ;; 1 cycle
        MOVW      DE, S:_temp_s32    ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+10
        XCH       A, E               ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3297         memcpy(&tou_a8zone_time[0], &opr_data[0], 14);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      HL, #LWRD(_tou_a8zone_time)  ;; 1 cycle
        MOV       B, #0xE            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
// 3298         
// 3299         temp_s32 = lu16_addr1 + 0x20;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        ADDW      AX, #0x20          ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3300         eprom_read(temp_s32,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+12
        MOVW      HL, S:_temp_s32+2  ;; 1 cycle
        MOVW      DE, S:_temp_s32    ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+10
        XCH       A, E               ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3301         memcpy(&tou_a8zone_time[14], &opr_data[0], 2);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      HL, #LWRD(_tou_a8zone_time+14)  ;; 1 cycle
        MOV       B, #0x2            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
        BR        N:??dlms_reset_data_260  ;; 3 cycles
        ; ------------------------------------- Block: 63 cycles
// 3302       }
// 3303       else
// 3304       {
// 3305         temp_s32 = lu16_addr1 + 0x30;
??dlms_reset_data_262:
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        ADDW      AX, #0x30          ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3306         eprom_read(temp_s32,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+12
        MOVW      HL, S:_temp_s32+2  ;; 1 cycle
        MOVW      DE, S:_temp_s32    ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+10
        XCH       A, E               ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3307         
// 3308         if (opr_data[14] == u8day_id)
        MOV       X, N:_opr_data+14  ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BNZ       ??dlms_reset_data_260  ;; 4 cycles
        ; ------------------------------------- Block: 28 cycles
// 3309         {
// 3310           memcpy(&tou_a8traiff, &opr_data[0], 9);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      HL, #LWRD(_tou_a8traiff)  ;; 1 cycle
        MOV       B, #0x9            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
// 3311           
// 3312           temp_s32 = lu16_addr1 + 0x40;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        ADDW      AX, #0x40          ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3313           eprom_read(temp_s32,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+12
        MOVW      HL, S:_temp_s32+2  ;; 1 cycle
        MOVW      DE, S:_temp_s32    ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+10
        XCH       A, E               ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3314           memcpy(&tou_a8zone_time[0], &opr_data[0], 14);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      HL, #LWRD(_tou_a8zone_time)  ;; 1 cycle
        MOV       B, #0xE            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
// 3315           
// 3316           temp_s32 = lu16_addr1 + 0x50;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        ADDW      AX, #0x50          ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3317           eprom_read(temp_s32,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+12
        MOVW      HL, S:_temp_s32+2  ;; 1 cycle
        MOVW      DE, S:_temp_s32    ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+10
        XCH       A, E               ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3318           memcpy(&tou_a8zone_time[14], &opr_data[0], 2);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      HL, #LWRD(_tou_a8zone_time+14)  ;; 1 cycle
        MOV       B, #0x2            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
        ; ------------------------------------- Block: 60 cycles
// 3319         }
// 3320       }
// 3321     }
// 3322   }
// 3323   
// 3324   no_of_tod_in_season = tou_a8traiff[0];
??dlms_reset_data_260:
        MOV       A, N:_tou_a8traiff  ;; 1 cycle
        MOV       N:_no_of_tod_in_season, A  ;; 1 cycle
// 3325   no_of_tod = no_of_tod_in_season;
        MOV       A, N:_no_of_tod_in_season  ;; 1 cycle
        MOV       N:_no_of_tod, A    ;; 1 cycle
// 3326   
// 3327   if (no_of_tod_in_season > 8)
        MOV       A, N:_no_of_tod_in_season  ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        SKC                          ;; 1 cycle
        ; ------------------------------------- Block: 7 cycles
// 3328   {
// 3329     no_of_tod_in_season = 8;
        MOV       N:_no_of_tod_in_season, #0x8  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 3330   }
// 3331   
// 3332   if (no_of_tod > 8)
??deter_week_2:
        MOV       A, N:_no_of_tod    ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        SKC                          ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 3333   {
// 3334     no_of_tod = 8;
        MOV       N:_no_of_tod, #0x8  ;; 1 cycle
          CFI FunCall _deter_zone
        ; ------------------------------------- Block: 1 cycles
// 3335   }
// 3336   
// 3337   deter_zone();
??deter_week_3:
        CALL      _deter_zone        ;; 3 cycles
// 3338 }
        ADDW      SP, #0x6           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock38
        ; ------------------------------------- Block: 10 cycles
        ; ------------------------------------- Total: 510 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function _deter_zone
        CODE
// 3339 void deter_zone(void)
// 3340 {
_deter_zone:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 4
        SUBW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+8
// 3341   unsigned char vmain1, i, j; //,addpg1;
// 3342   uint8_t vmain0;
// 3343   vmain0= zone_index;
        MOV       A, N:_zone_index   ;; 1 cycle
        MOV       [SP+0x03], A       ;; 1 cycle
// 3344   zone_index= 1;
        MOV       N:_zone_index, #0x1  ;; 1 cycle
// 3345   
// 3346   if((tou_a8traiff[0] != 0)) //no of tod config(exa: 5,1,2,3,4,5,0,0,0)
        CMP0      N:_tou_a8traiff    ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_263  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 3347   {
// 3348     vmain1= tou_a8traiff[0]; //total no of tod(exa:5)
        MOV       A, N:_tou_a8traiff  ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
// 3349     j= 0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 3350     for(i= 0; i < vmain1; i++)//this for loop is to calculate current zone index
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
??deter_zone_0:
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_264  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 3351     {
// 3352       
// 3353       if(*(tou_a8zone_time + j) > (Now.hour))//tod timings(exa:5,0,6,0,9,0,0x18,0,0x23,0)
        MOV       X, N:_Now+2        ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_tou_a8zone_time)[B]  ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BNC       ??dlms_reset_data_265  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 3354       {
// 3355         if(zone_index == 0x01)
        CMP       N:_zone_index, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_266  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 3356           zone_index= vmain1;
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       N:_zone_index, A   ;; 1 cycle
        BR        S:??dlms_reset_data_264  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 3357         else
// 3358           zone_index--;
??dlms_reset_data_266:
        DEC       N:_zone_index      ;; 2 cycles
// 3359         break;
        BR        S:??dlms_reset_data_264  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 3360       }
// 3361       if(*(tou_a8zone_time + j) < (Now.hour))
??dlms_reset_data_265:
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_tou_a8zone_time)[B]  ;; 1 cycle
        CMP       A, N:_Now+2        ;; 1 cycle
        BNC       ??dlms_reset_data_267  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 3362       {
// 3363         if(zone_index != vmain1) //zone_index=current zone
        MOV       X, N:_zone_index   ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BZ        ??dlms_reset_data_268  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 3364         {
// 3365           j+= 2;
        MOV       A, [SP]            ;; 1 cycle
        ADD       A, #0x2            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 3366           zone_index++;
        INC       N:_zone_index      ;; 2 cycles
        BR        S:??dlms_reset_data_268  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 3367         }
// 3368       }
// 3369       else if(*(tou_a8zone_time + j) == (Now.hour))
??dlms_reset_data_267:
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_tou_a8zone_time)[B]  ;; 1 cycle
        CMP       A, N:_Now+2        ;; 1 cycle
        BNZ       ??dlms_reset_data_268  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 3370       {
// 3371         j++;
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 3372         if(*(tou_a8zone_time + j) > (Now.min))
        MOV       X, N:_Now+1        ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_tou_a8zone_time)[B]  ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BNC       ??dlms_reset_data_269  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 3373         {
// 3374           if(zone_index == 0x01)
        CMP       N:_zone_index, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_270  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 3375           {
// 3376             zone_index= vmain1;
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       N:_zone_index, A   ;; 1 cycle
        BR        S:??dlms_reset_data_264  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 3377           }
// 3378           else
// 3379             zone_index--;
??dlms_reset_data_270:
        DEC       N:_zone_index      ;; 2 cycles
// 3380           break;
        BR        S:??dlms_reset_data_264  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 3381         }
// 3382         else
// 3383         {
// 3384           if(zone_index != vmain1)
??dlms_reset_data_269:
        MOV       X, N:_zone_index   ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BZ        ??dlms_reset_data_268  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 3385           {
// 3386             j++;
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 3387             zone_index++;
        INC       N:_zone_index      ;; 2 cycles
        ; ------------------------------------- Block: 5 cycles
// 3388           }
// 3389         }
// 3390       }
// 3391     }
??dlms_reset_data_268:
        MOV       A, [SP+0x02]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
        BR        N:??deter_zone_0   ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 3392     zone_index= *(tou_a8traiff + zone_index);
??dlms_reset_data_264:
        MOV       B, N:_zone_index   ;; 1 cycle
        MOV       A, (_tou_a8traiff)[B]  ;; 1 cycle
        MOV       N:_zone_index, A   ;; 1 cycle
// 3393     
// 3394     if(zone_index != vmain0)
        MOV       X, N:_zone_index   ;; 1 cycle
        MOV       A, [SP+0x03]       ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BZ        ??dlms_reset_data_271  ;; 4 cycles
        ; ------------------------------------- Block: 10 cycles
// 3395     {
// 3396       zone_change_f= 1;
        MOV       N:_zone_change_f, #0x1  ;; 1 cycle
// 3397       save_tod_flag= 1;
        MOV       N:_save_tod_flag, #0x1  ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 3398     }
// 3399     
// 3400     max_tariff_no= 1;
??dlms_reset_data_271:
        MOV       N:_max_tariff_no, #0x1  ;; 1 cycle
// 3401     for(temp_s16= 0; temp_s16 < tou_a8traiff[0]; temp_s16++)//this is to find max tariff
        MOVW      S:_temp_s16, #0x0  ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??deter_zone_1:
        MOV       C, N:_tou_a8traiff  ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOVW      AX, S:_temp_s16    ;; 1 cycle
          CFI FunCall ?SI_CMP_L02
        CALL      N:?SI_CMP_L02      ;; 3 cycles
        BNC       ??dlms_reset_data_272  ;; 4 cycles
        ; ------------------------------------- Block: 10 cycles
// 3402     {
// 3403       if(max_tariff_no < tou_a8traiff[temp_s16 + 1])
        MOV       X, N:_max_tariff_no  ;; 1 cycle
        MOVW      BC, S:_temp_s16    ;; 1 cycle
        MOV       A, (_tou_a8traiff+1)[BC]  ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BNC       ??dlms_reset_data_273  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 3404       {
// 3405         max_tariff_no= tou_a8traiff[temp_s16 + 1];
        MOVW      BC, S:_temp_s16    ;; 1 cycle
        MOV       A, (_tou_a8traiff+1)[BC]  ;; 1 cycle
        MOV       N:_max_tariff_no, A  ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 3406       }
// 3407     }
??dlms_reset_data_273:
        INCW      S:_temp_s16        ;; 2 cycles
        BR        S:??deter_zone_1   ;; 3 cycles
          CFI FunCall _zone_default
        ; ------------------------------------- Block: 5 cycles
// 3408   }
// 3409   else
// 3410     zone_default();
??dlms_reset_data_263:
        CALL      _zone_default      ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 3411   
// 3412   if((zone_index > no_of_tod_in_season) || (zone_index == 0))
??dlms_reset_data_272:
        MOV       A, N:_no_of_tod_in_season  ;; 1 cycle
        CMP       A, N:_zone_index   ;; 1 cycle
        BC        ??dlms_reset_data_274  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        CMP0      N:_zone_index      ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 3413     zone_index= 1;
??dlms_reset_data_274:
        MOV       N:_zone_index, #0x1  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 3414   tariff_index= zone_index;
??deter_zone_2:
        MOV       A, N:_zone_index   ;; 1 cycle
        MOV       N:_tariff_index, A  ;; 1 cycle
// 3415 }
        ADDW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock39
        ; ------------------------------------- Block: 9 cycles
        ; ------------------------------------- Total: 184 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function _zone_default
          CFI NoCalls
        CODE
// 3416 void zone_default(void)
// 3417 {
_zone_default:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 3418   uint8_t vmain0;
// 3419   vmain0= zone_index;
        MOV       X, N:_zone_index   ;; 1 cycle
// 3420   zone_index= 0x01;
        MOV       N:_zone_index, #0x1  ;; 1 cycle
// 3421   if(zone_index != vmain0)
        MOV       A, N:_zone_index   ;; 1 cycle
        CMP       A, X               ;; 1 cycle
        BZ        ??dlms_reset_data_275  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 3422   {
// 3423     zone_change_f= 1;
        MOV       N:_zone_change_f, #0x1  ;; 1 cycle
// 3424     save_tod_flag= 1;
        MOV       N:_save_tod_flag, #0x1  ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 3425   }
// 3426 }
??dlms_reset_data_275:
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock40
        ; ------------------------------------- Block: 6 cycles
        ; ------------------------------------- Total: 16 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function _load_tod_data
        CODE
// 3427 void load_tod_data(void)
// 3428 {     
_load_tod_data:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 4
        SUBW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+8
// 3429   /*here only calculated registers are to be initialized from last TOD locations as 
// 3430   deriver registers do not require to be initialized and can be calculated at the time
// 3431   of saving*/
// 3432   uint32_t temp_diff;
// 3433   /*current bill TOD block 2*/
// 3434   eeblk=TOD_CUR_BILL_BLK1/256; 
        MOV       N:_eeblk, #0x16    ;; 1 cycle
// 3435   eepg=(tariff_index-1)*16;
        MOV       A, N:_tariff_index  ;; 1 cycle
        DEC       A                  ;; 1 cycle
        MOV       X, #0x10           ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       N:_eepg, A         ;; 1 cycle
// 3436   eprom_read((eeblk*0x100)+eepg,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       H, A               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOV       X, N:_eeblk        ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOV       C, N:_eepg         ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        ADDW      AX, BC             ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3437   
// 3438   //zkwh import
// 3439   temp_s32= char_array_to_long4(&opr_data[0]);
        MOVW      AX, #LWRD(_opr_data)  ;; 1 cycle
          CFI FunCall _char_array_to_long4
        CALL      _char_array_to_long4  ;; 3 cycles
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3440   temp_diff=energy.Allph.zkwh_imp-last_zkwh1;
        MOVW      BC, N:_energy+94   ;; 1 cycle
        MOVW      AX, N:_energy+92   ;; 1 cycle
        SUBW      AX, N:_last_zkwh1  ;; 1 cycle
        SKNC
        DECW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        SUBW      AX, N:_last_zkwh1+2  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      HL, SP             ;; 1 cycle
        MOVW      [HL], AX           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3441   if(temp_diff<(QUANTA*3))
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 71 cycles
        CMPW      AX, #0xF           ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??load_tod_data_0:
        BNC       ??dlms_reset_data_276  ;; 4 cycles
        ; ------------------------------------- Block: 4 cycles
// 3442   {
// 3443     energy.Allph.zkwh_imp=temp_s32+temp_diff;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        MOVW      HL, S:_temp_s32+2  ;; 1 cycle
        MOVW      DE, S:_temp_s32    ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        SKNC
        INCW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        ADDW      AX, HL             ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+92, AX   ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+94, AX   ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        BR        S:??dlms_reset_data_277  ;; 3 cycles
        ; ------------------------------------- Block: 21 cycles
// 3444   }
// 3445   else
// 3446   {
// 3447     energy.Allph.zkwh_imp=temp_s32;
??dlms_reset_data_276:
        MOVW      BC, S:_temp_s32+2  ;; 1 cycle
        MOVW      AX, S:_temp_s32    ;; 1 cycle
        MOVW      N:_energy+92, AX   ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+94, AX   ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
// 3448   }
// 3449   
// 3450   //zkwh export
// 3451   temp_s32= char_array_to_long4(&opr_data[4]);
??dlms_reset_data_277:
        MOVW      AX, #LWRD(_opr_data+4)  ;; 1 cycle
          CFI FunCall _char_array_to_long4
        CALL      _char_array_to_long4  ;; 3 cycles
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3452   temp_diff=energy.Allph.zkwh_exp-last_zkwh2;
        MOVW      BC, N:_energy+98   ;; 1 cycle
        MOVW      AX, N:_energy+96   ;; 1 cycle
        SUBW      AX, N:_last_zkwh2  ;; 1 cycle
        SKNC
        DECW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        SUBW      AX, N:_last_zkwh2+2  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      HL, SP             ;; 1 cycle
        MOVW      [HL], AX           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3453   if(temp_diff<(QUANTA*3))
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 31 cycles
        CMPW      AX, #0xF           ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??load_tod_data_1:
        BNC       ??dlms_reset_data_278  ;; 4 cycles
        ; ------------------------------------- Block: 4 cycles
// 3454   {
// 3455     energy.Allph.zkwh_exp=temp_s32+temp_diff;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        MOVW      HL, S:_temp_s32+2  ;; 1 cycle
        MOVW      DE, S:_temp_s32    ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        SKNC
        INCW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        ADDW      AX, HL             ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+96, AX   ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+98, AX   ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        BR        S:??dlms_reset_data_279  ;; 3 cycles
        ; ------------------------------------- Block: 21 cycles
// 3456   }
// 3457   else
// 3458   {
// 3459     energy.Allph.zkwh_exp=temp_s32;
??dlms_reset_data_278:
        MOVW      BC, S:_temp_s32+2  ;; 1 cycle
        MOVW      AX, S:_temp_s32    ;; 1 cycle
        MOVW      N:_energy+96, AX   ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+98, AX   ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
// 3460   }
// 3461   
// 3462   //zkvarh_q3
// 3463   temp_s32= char_array_to_long4(&opr_data[8]);
??dlms_reset_data_279:
        MOVW      AX, #LWRD(_opr_data+8)  ;; 1 cycle
          CFI FunCall _char_array_to_long4
        CALL      _char_array_to_long4  ;; 3 cycles
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3464   temp_diff=energy.Allph.zkvarh_q3-last_zkvarh3;
        MOVW      BC, N:_energy+118  ;; 1 cycle
        MOVW      AX, N:_energy+116  ;; 1 cycle
        SUBW      AX, N:_last_zkvarh3  ;; 1 cycle
        SKNC
        DECW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        SUBW      AX, N:_last_zkvarh3+2  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      HL, SP             ;; 1 cycle
        MOVW      [HL], AX           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3465   if(temp_diff<(QUANTA*3))
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 31 cycles
        CMPW      AX, #0xF           ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??load_tod_data_2:
        BNC       ??dlms_reset_data_280  ;; 4 cycles
        ; ------------------------------------- Block: 4 cycles
// 3466   {
// 3467     energy.Allph.zkvarh_q3=temp_s32+temp_diff;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        MOVW      HL, S:_temp_s32+2  ;; 1 cycle
        MOVW      DE, S:_temp_s32    ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        SKNC
        INCW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        ADDW      AX, HL             ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+116, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+118, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        BR        S:??dlms_reset_data_281  ;; 3 cycles
        ; ------------------------------------- Block: 21 cycles
// 3468   }
// 3469   else
// 3470   {
// 3471     energy.Allph.zkvarh_q3=temp_s32;
??dlms_reset_data_280:
        MOVW      BC, S:_temp_s32+2  ;; 1 cycle
        MOVW      AX, S:_temp_s32    ;; 1 cycle
        MOVW      N:_energy+116, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+118, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
// 3472   }
// 3473   
// 3474   /*current bill TOD block 2*/
// 3475   
// 3476   eepg=(tariff_index-1)*16;
??dlms_reset_data_281:
        MOV       A, N:_tariff_index  ;; 1 cycle
        DEC       A                  ;; 1 cycle
        MOV       X, #0x10           ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       N:_eepg, A         ;; 1 cycle
// 3477   eprom_read(TOD_CUR_BILL_BLK2+eepg,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOV       X, N:_eepg         ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, #0x1680        ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3478   
// 3479   //zkvarh_q1
// 3480   temp_s32= char_array_to_long4(&opr_data[0]);
        MOVW      AX, #LWRD(_opr_data)  ;; 1 cycle
          CFI FunCall _char_array_to_long4
        CALL      _char_array_to_long4  ;; 3 cycles
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3481   temp_diff=energy.Allph.zkvarh_q1-last_zkvarh1;
        MOVW      BC, N:_energy+110  ;; 1 cycle
        MOVW      AX, N:_energy+108  ;; 1 cycle
        SUBW      AX, N:_last_zkvarh1  ;; 1 cycle
        SKNC
        DECW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        SUBW      AX, N:_last_zkvarh1+2  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      HL, SP             ;; 1 cycle
        MOVW      [HL], AX           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3482   if(temp_diff<(QUANTA*3))
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 46 cycles
        CMPW      AX, #0xF           ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??load_tod_data_3:
        BNC       ??dlms_reset_data_282  ;; 4 cycles
        ; ------------------------------------- Block: 4 cycles
// 3483   {
// 3484     energy.Allph.zkvarh_q1=temp_s32+temp_diff;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        MOVW      HL, S:_temp_s32+2  ;; 1 cycle
        MOVW      DE, S:_temp_s32    ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        SKNC
        INCW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        ADDW      AX, HL             ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+108, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+110, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        BR        S:??dlms_reset_data_283  ;; 3 cycles
        ; ------------------------------------- Block: 21 cycles
// 3485   }
// 3486   else
// 3487   {
// 3488     energy.Allph.zkvarh_q1=temp_s32;
??dlms_reset_data_282:
        MOVW      BC, S:_temp_s32+2  ;; 1 cycle
        MOVW      AX, S:_temp_s32    ;; 1 cycle
        MOVW      N:_energy+108, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+110, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
// 3489   }
// 3490   //zkvarh_q2
// 3491   temp_s32= char_array_to_long4(&opr_data[4]);
??dlms_reset_data_283:
        MOVW      AX, #LWRD(_opr_data+4)  ;; 1 cycle
          CFI FunCall _char_array_to_long4
        CALL      _char_array_to_long4  ;; 3 cycles
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3492   temp_diff=energy.Allph.zkvarh_q2-last_zkvarh2;
        MOVW      BC, N:_energy+114  ;; 1 cycle
        MOVW      AX, N:_energy+112  ;; 1 cycle
        SUBW      AX, N:_last_zkvarh2  ;; 1 cycle
        SKNC
        DECW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        SUBW      AX, N:_last_zkvarh2+2  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      HL, SP             ;; 1 cycle
        MOVW      [HL], AX           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3493   if(temp_diff<(QUANTA*3))
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 31 cycles
        CMPW      AX, #0xF           ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??load_tod_data_4:
        BNC       ??dlms_reset_data_284  ;; 4 cycles
        ; ------------------------------------- Block: 4 cycles
// 3494   {
// 3495     energy.Allph.zkvarh_q2=temp_s32+temp_diff;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        MOVW      HL, S:_temp_s32+2  ;; 1 cycle
        MOVW      DE, S:_temp_s32    ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        SKNC
        INCW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        ADDW      AX, HL             ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+112, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+114, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        BR        S:??dlms_reset_data_285  ;; 3 cycles
        ; ------------------------------------- Block: 21 cycles
// 3496   }
// 3497   else
// 3498   {
// 3499     energy.Allph.zkvarh_q2=temp_s32;
??dlms_reset_data_284:
        MOVW      BC, S:_temp_s32+2  ;; 1 cycle
        MOVW      AX, S:_temp_s32    ;; 1 cycle
        MOVW      N:_energy+112, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+114, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
// 3500   }
// 3501   
// 3502   //zkvarh_q4
// 3503   temp_s32= char_array_to_long4(&opr_data[8]);
??dlms_reset_data_285:
        MOVW      AX, #LWRD(_opr_data+8)  ;; 1 cycle
          CFI FunCall _char_array_to_long4
        CALL      _char_array_to_long4  ;; 3 cycles
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3504   temp_diff=energy.Allph.zkvarh_q4-last_zkvarh4;
        MOVW      BC, N:_energy+122  ;; 1 cycle
        MOVW      AX, N:_energy+120  ;; 1 cycle
        SUBW      AX, N:_last_zkvarh4  ;; 1 cycle
        SKNC
        DECW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        SUBW      AX, N:_last_zkvarh4+2  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      HL, SP             ;; 1 cycle
        MOVW      [HL], AX           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3505   if(temp_diff<(QUANTA*3))
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 31 cycles
        CMPW      AX, #0xF           ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??load_tod_data_5:
        BNC       ??dlms_reset_data_286  ;; 4 cycles
        ; ------------------------------------- Block: 4 cycles
// 3506   {
// 3507     energy.Allph.zkvarh_q4=temp_s32+temp_diff;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        MOVW      HL, S:_temp_s32+2  ;; 1 cycle
        MOVW      DE, S:_temp_s32    ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        SKNC
        INCW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        ADDW      AX, HL             ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+120, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+122, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        BR        S:??dlms_reset_data_287  ;; 3 cycles
        ; ------------------------------------- Block: 21 cycles
// 3508   }
// 3509   else
// 3510   {
// 3511     energy.Allph.zkvarh_q4=temp_s32;
??dlms_reset_data_286:
        MOVW      BC, S:_temp_s32+2  ;; 1 cycle
        MOVW      AX, S:_temp_s32    ;; 1 cycle
        MOVW      N:_energy+120, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+122, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
// 3512   }
// 3513   
// 3514   /*current bill TOD block 3*/
// 3515   eeblk=TOD_CUR_BILL_BLK3/256; 
??dlms_reset_data_287:
        MOV       N:_eeblk, #0x17    ;; 1 cycle
// 3516   eepg=(tariff_index-1)*16;
        MOV       A, N:_tariff_index  ;; 1 cycle
        DEC       A                  ;; 1 cycle
        MOV       X, #0x10           ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       N:_eepg, A         ;; 1 cycle
// 3517   eprom_read((eeblk*0x100)+eepg,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       H, A               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOV       X, N:_eeblk        ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOV       C, N:_eepg         ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        ADDW      AX, BC             ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3518   
// 3519   //ZKVAH import
// 3520   temp_s32= char_array_to_long4(&opr_data[0]);
        MOVW      AX, #LWRD(_opr_data)  ;; 1 cycle
          CFI FunCall _char_array_to_long4
        CALL      _char_array_to_long4  ;; 3 cycles
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3521   temp_diff=energy.Allph.zkvah_imp-last_zkvah1;
        MOVW      BC, N:_energy+102  ;; 1 cycle
        MOVW      AX, N:_energy+100  ;; 1 cycle
        SUBW      AX, N:_last_zkvah1  ;; 1 cycle
        SKNC
        DECW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        SUBW      AX, N:_last_zkvah1+2  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      HL, SP             ;; 1 cycle
        MOVW      [HL], AX           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3522   if(temp_diff<(QUANTA*3))
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 70 cycles
        CMPW      AX, #0xF           ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??load_tod_data_6:
        BNC       ??dlms_reset_data_288  ;; 4 cycles
        ; ------------------------------------- Block: 4 cycles
// 3523   {
// 3524     energy.Allph.zkvah_imp=temp_s32+temp_diff;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        MOVW      HL, S:_temp_s32+2  ;; 1 cycle
        MOVW      DE, S:_temp_s32    ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        SKNC
        INCW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        ADDW      AX, HL             ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+100, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+102, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        BR        S:??dlms_reset_data_289  ;; 3 cycles
        ; ------------------------------------- Block: 21 cycles
// 3525   }
// 3526   else
// 3527   {
// 3528     energy.Allph.zkvah_imp=temp_s32;
??dlms_reset_data_288:
        MOVW      BC, S:_temp_s32+2  ;; 1 cycle
        MOVW      AX, S:_temp_s32    ;; 1 cycle
        MOVW      N:_energy+100, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+102, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
// 3529   }
// 3530   
// 3531   //ZKVAH export
// 3532   temp_s32= char_array_to_long4(&opr_data[4]);
??dlms_reset_data_289:
        MOVW      AX, #LWRD(_opr_data+4)  ;; 1 cycle
          CFI FunCall _char_array_to_long4
        CALL      _char_array_to_long4  ;; 3 cycles
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3533   temp_diff=energy.Allph.zkvah_exp-last_zkvah2;
        MOVW      BC, N:_energy+106  ;; 1 cycle
        MOVW      AX, N:_energy+104  ;; 1 cycle
        SUBW      AX, N:_last_zkvah2  ;; 1 cycle
        SKNC
        DECW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        SUBW      AX, N:_last_zkvah2+2  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      HL, SP             ;; 1 cycle
        MOVW      [HL], AX           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3534   if(temp_diff<(QUANTA*3))
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 31 cycles
        CMPW      AX, #0xF           ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??load_tod_data_7:
        BNC       ??dlms_reset_data_290  ;; 4 cycles
        ; ------------------------------------- Block: 4 cycles
// 3535   {
// 3536     energy.Allph.zkvah_exp=temp_s32+temp_diff;
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        MOVW      HL, S:_temp_s32+2  ;; 1 cycle
        MOVW      DE, S:_temp_s32    ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        SKNC
        INCW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        ADDW      AX, HL             ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+104, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+106, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        BR        S:??dlms_reset_data_291  ;; 3 cycles
        ; ------------------------------------- Block: 21 cycles
// 3537   }
// 3538   else
// 3539   {
// 3540     energy.Allph.zkvah_exp=temp_s32;
??dlms_reset_data_290:
        MOVW      BC, S:_temp_s32+2  ;; 1 cycle
        MOVW      AX, S:_temp_s32    ;; 1 cycle
        MOVW      N:_energy+104, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+106, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
// 3541   }
// 3542   
// 3543   zone_pf = char_array_to_int(&opr_data[8]);
??dlms_reset_data_291:
        MOVW      AX, #LWRD(_opr_data+8)  ;; 1 cycle
          CFI FunCall _char_array_to_int
        CALL      _char_array_to_int  ;; 3 cycles
        MOVW      N:_zone_pf, AX     ;; 1 cycle
// 3544   
// 3545   metrology_save_energy();
          CFI FunCall _metrology_save_energy
        CALL      _metrology_save_energy  ;; 3 cycles
// 3546   /* ************************************ */
// 3547   
// 3548   slot_no=zone_index;
        MOV       A, N:_zone_index   ;; 1 cycle
        MOV       N:_slot_no, A      ;; 1 cycle
// 3549   tariff_no=tariff_index;
        MOV       A, N:_tariff_index  ;; 1 cycle
        MOV       N:_tariff_no, A    ;; 1 cycle
// 3550   
// 3551   eprom_read(TOU_VAR_SAVE,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x7F0         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3552   opr_data[0]=slot_no;
        MOV       A, N:_slot_no      ;; 1 cycle
        MOV       N:_opr_data, A     ;; 1 cycle
// 3553   opr_data[1]=tariff_index;
        MOV       A, N:_tariff_index  ;; 1 cycle
        MOV       N:_opr_data+1, A   ;; 1 cycle
// 3554   eprom_write(TOU_VAR_SAVE,0,16,PAGE_1,AUTO_CALC); //0x0840
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+10
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x7F0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 3555   
// 3556 }
        ADDW      SP, #0x6           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock41
        ; ------------------------------------- Block: 39 cycles
        ; ------------------------------------- Total: 637 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock42 Using cfiCommon0
          CFI Function _read_last_bill_zone_energy
        CODE
// 3557 void read_last_bill_zone_energy(void) 
// 3558 {
_read_last_bill_zone_energy:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 2
        SUBW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+6
// 3559   uint16_t lu16_addr;
// 3560   
// 3561   //last bill zkwh import
// 3562   if (bill_count != 0) 
        CMP0      N:_bill_count      ;; 1 cycle
        BZ        ??dlms_reset_data_292  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3563   {
// 3564     lu16_addr = BILL_TOD_CUR_BILL_BLK1 + (bill_count - 1) * 0x80; /* previous bill tod energy kWh */
        MOV       X, N:_bill_count   ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x80          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x1F80        ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        BR        S:??dlms_reset_data_293  ;; 3 cycles
        ; ------------------------------------- Block: 10 cycles
// 3565   } 
// 3566   else 
// 3567   {
// 3568     lu16_addr = BILL_TOD_CUR_BILL_BLK1; /* if no bill generated */
??dlms_reset_data_292:
        MOVW      HL, #0x2000        ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 3569   }
// 3570   
// 3571   lu16_addr += (tariff_no - 1) * 0x10;
??dlms_reset_data_293:
        MOV       X, N:_tariff_no    ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        DECW      AX                 ;; 1 cycle
        MOVW      BC, #0x10          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
// 3572   eprom_read(lu16_addr,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3573   Last_Bill_Zone_Kwh=char_array_to_long4(&opr_data[0]);
        MOVW      AX, #LWRD(_opr_data)  ;; 1 cycle
          CFI FunCall _char_array_to_long4
        CALL      _char_array_to_long4  ;; 3 cycles
        MOVW      N:_Last_Bill_Zone_Kwh, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_Last_Bill_Zone_Kwh+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3574   
// 3575   //last bill zkvah import
// 3576   if (bill_count != 0) 
        CMP0      N:_bill_count      ;; 1 cycle
        BZ        ??dlms_reset_data_294  ;; 4 cycles
        ; ------------------------------------- Block: 30 cycles
// 3577   {
// 3578     lu16_addr = BILL_TOD_CUR_BILL_BLK3 + (bill_count - 1) * 0x80; /* previous bill tod energy kWh */
        MOV       X, N:_bill_count   ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x80          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x2B80        ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        BR        S:??dlms_reset_data_295  ;; 3 cycles
        ; ------------------------------------- Block: 10 cycles
// 3579   } 
// 3580   else 
// 3581   {
// 3582     lu16_addr = BILL_TOD_CUR_BILL_BLK3; /* if no bill generated */
??dlms_reset_data_294:
        MOVW      HL, #0x2C00        ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 3583   }
// 3584   
// 3585   lu16_addr += (tariff_no - 1) * 0x10;
??dlms_reset_data_295:
        MOV       X, N:_tariff_no    ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        DECW      AX                 ;; 1 cycle
        MOVW      BC, #0x10          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
// 3586   eprom_read(lu16_addr,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3587   Last_Bill_Zone_Kvah=char_array_to_long4(&opr_data[0]);
        MOVW      AX, #LWRD(_opr_data)  ;; 1 cycle
          CFI FunCall _char_array_to_long4
        CALL      _char_array_to_long4  ;; 3 cycles
        MOVW      N:_Last_Bill_Zone_Kvah, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_Last_Bill_Zone_Kvah+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3588 }
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock42
        ; ------------------------------------- Block: 32 cycles
        ; ------------------------------------- Total: 90 cycles
// 3589 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock43 Using cfiCommon0
          CFI Function _calculate_zone_pf
        CODE
// 3590 void calculate_zone_pf(void) 
// 3591 {
_calculate_zone_pf:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 24
        SUBW      SP, #0x18          ;; 1 cycle
          CFI CFA SP+28
// 3592   uint64_t consumed_zkwh, consumed_zkvah;
// 3593   
// 3594   read_last_bill_zone_energy();
          CFI FunCall _read_last_bill_zone_energy
        CALL      _read_last_bill_zone_energy  ;; 3 cycles
// 3595   
// 3596   consumed_zkwh = (uint32_t)(energy.Allph.zkwh_imp - Last_Bill_Zone_Kwh);
        MOVW      BC, N:_energy+94   ;; 1 cycle
        MOVW      AX, N:_energy+92   ;; 1 cycle
        SUBW      AX, N:_Last_Bill_Zone_Kwh  ;; 1 cycle
        SKNC
        DECW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        SUBW      AX, N:_Last_Bill_Zone_Kwh+2  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+30
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x4           ;; 1 cycle
          CFI FunCall __L2LLU
        CALL      __L2LLU            ;; 3 cycles
// 3597   consumed_zkwh *= 1000;
        MOVW      DE, #LWRD(__Constant_3e8_0)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x4           ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x4           ;; 1 cycle
          CFI FunCall __Mul64
        CALL      __Mul64            ;; 3 cycles
// 3598   
// 3599   consumed_zkvah = (uint32_t)(energy.Allph.zkvah_imp - Last_Bill_Zone_Kvah);
        MOVW      BC, N:_energy+102  ;; 1 cycle
        MOVW      AX, N:_energy+100  ;; 1 cycle
        SUBW      AX, N:_Last_Bill_Zone_Kvah  ;; 1 cycle
        SKNC
        DECW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        SUBW      AX, N:_Last_Bill_Zone_Kvah+2  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+34
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
          CFI FunCall __L2LLU
        CALL      __L2LLU            ;; 3 cycles
// 3600   
// 3601   if (consumed_zkvah != 0 && consumed_zkwh != 0) 
        MOVW      BC, #LWRD(__Constant_0_0)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
          CFI FunCall __CmpNe64
        CALL      __CmpNe64          ;; 3 cycles
        ADDW      SP, #0x8           ;; 1 cycle
          CFI CFA SP+28
        CMP0      A                  ;; 1 cycle
        BZ        ??dlms_reset_data_296  ;; 4 cycles
        ; ------------------------------------- Block: 61 cycles
        MOVW      BC, #LWRD(__Constant_0_0)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
          CFI FunCall __CmpNe64
        CALL      __CmpNe64          ;; 3 cycles
        CMP0      A                  ;; 1 cycle
        BZ        ??dlms_reset_data_296  ;; 4 cycles
        ; ------------------------------------- Block: 10 cycles
// 3602   {
// 3603     zone_pf = (uint16_t)((consumed_zkwh) / consumed_zkvah);
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
          CFI FunCall __Divu64
        CALL      __Divu64           ;; 3 cycles
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [HL]           ;; 1 cycle
        MOVW      N:_zone_pf, AX     ;; 1 cycle
        BR        S:??dlms_reset_data_297  ;; 3 cycles
        ; ------------------------------------- Block: 18 cycles
// 3604   }
// 3605   else 
// 3606   {
// 3607     zone_pf = 1000;
??dlms_reset_data_296:
        MOVW      AX, #0x3E8         ;; 1 cycle
        MOVW      N:_zone_pf, AX     ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 3608   }
// 3609   
// 3610   if (zone_pf > 1000)
??dlms_reset_data_297:
        MOVW      AX, N:_zone_pf     ;; 1 cycle
        CMPW      AX, #0x3E9         ;; 1 cycle
        BC        ??dlms_reset_data_298  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3611   {
// 3612     zone_pf = 999; /* 1000; */
        MOVW      AX, #0x3E7         ;; 1 cycle
        MOVW      N:_zone_pf, AX     ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 3613   }
// 3614 }
??dlms_reset_data_298:
        ADDW      SP, #0x18          ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock43
        ; ------------------------------------- Block: 7 cycles
        ; ------------------------------------- Total: 106 cycles
// 3615 
// 3616 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock44 Using cfiCommon0
          CFI Function _save_tod_data
        CODE
// 3617 void save_tod_data(void)
// 3618 {  
_save_tod_data:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 42
        SUBW      SP, #0x2A          ;; 1 cycle
          CFI CFA SP+46
// 3619   
// 3620   unsigned char m2;
// 3621   uint64_t sum_t_zkwh1=0,sum_t_zkwh2=0,sum_t_zkvah1=0,sum_t_zkvah2=0;
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x22          ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [HL], AX           ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [HL+0x04], AX      ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [HL+0x06], AX      ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x1A          ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [HL], AX           ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [HL+0x04], AX      ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [HL+0x06], AX      ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x12          ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [HL], AX           ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [HL+0x04], AX      ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [HL+0x06], AX      ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0xA           ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [HL], AX           ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [HL+0x04], AX      ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [HL+0x06], AX      ;; 1 cycle
// 3622   
// 3623   t_zone_update();
          CFI FunCall _t_zone_update
        CALL      _t_zone_update     ;; 3 cycles
// 3624   
// 3625   
// 3626   for(m2=0;  m2<8; m2++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 50 cycles
??save_tod_data_0:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_299  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3627   {
// 3628     sum_t_zkwh1 += t_zkwh1[m2];
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x4           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_t_zkwh1)  ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [HL+0x02]      ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+48
        MOVW      AX, [HL]           ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+50
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x6           ;; 1 cycle
          CFI FunCall __L2LLU
        CALL      __L2LLU            ;; 3 cycles
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x6           ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x26          ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x26          ;; 1 cycle
          CFI FunCall __Add64
        CALL      __Add64            ;; 3 cycles
// 3629     sum_t_zkwh2 += t_zkwh2[m2];
        MOV       A, [SP+0x04]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x4           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_t_zkwh2)  ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [HL+0x02]      ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+52
        MOVW      AX, [HL]           ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+54
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0xA           ;; 1 cycle
          CFI FunCall __L2LLU
        CALL      __L2LLU            ;; 3 cycles
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0xA           ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x22          ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x22          ;; 1 cycle
          CFI FunCall __Add64
        CALL      __Add64            ;; 3 cycles
// 3630     sum_t_zkvah1 += t_zkvah1[m2];
        MOV       A, [SP+0x08]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x4           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_t_zkvah1)  ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [HL+0x02]      ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+56
        MOVW      AX, [HL]           ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+58
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0xE           ;; 1 cycle
          CFI FunCall __L2LLU
        CALL      __L2LLU            ;; 3 cycles
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0xE           ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x1E          ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x1E          ;; 1 cycle
          CFI FunCall __Add64
        CALL      __Add64            ;; 3 cycles
// 3631     sum_t_zkvah2 += t_zkvah2[m2];
        MOV       A, [SP+0x0C]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x4           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_t_zkvah2)  ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [HL+0x02]      ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+60
        MOVW      AX, [HL]           ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+62
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x12          ;; 1 cycle
          CFI FunCall __L2LLU
        CALL      __L2LLU            ;; 3 cycles
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x12          ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x1A          ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x1A          ;; 1 cycle
          CFI FunCall __Add64
        CALL      __Add64            ;; 3 cycles
// 3632   }
        MOV       A, [SP+0x10]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x10], A       ;; 1 cycle
        ADDW      SP, #0x10          ;; 1 cycle
          CFI CFA SP+46
        BR        N:??save_tod_data_0  ;; 3 cycles
        ; ------------------------------------- Block: 119 cycles
// 3633   
// 3634   
// 3635   energy.Allph.zkwh_imp=zone_energy_update(energy.Allph.active_imp,energy.Allph.zkwh_imp,sum_t_zkwh1);
??dlms_reset_data_299:
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x22          ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        SUBW      SP, #0x8           ;; 1 cycle
          CFI CFA SP+54
        MOVW      DE, SP             ;; 1 cycle
        MOVW      BC, #0x8           ;; 1 cycle
          CFI FunCall ?MOVE_LONG_L06
        CALL      N:?MOVE_LONG_L06   ;; 3 cycles
        MOVW      AX, N:_energy+94   ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+56
        MOVW      AX, N:_energy+92   ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+58
        MOVW      BC, N:_energy+54   ;; 1 cycle
        MOVW      AX, N:_energy+52   ;; 1 cycle
          CFI FunCall _zone_energy_update
        CALL      _zone_energy_update  ;; 3 cycles
        MOVW      N:_energy+92, AX   ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+94, AX   ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3636   energy.Allph.zkwh_exp=zone_energy_update(energy.Allph.active_exp,energy.Allph.zkwh_exp,sum_t_zkwh2);
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x26          ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        SUBW      SP, #0x8           ;; 1 cycle
          CFI CFA SP+66
        MOVW      DE, SP             ;; 1 cycle
        MOVW      BC, #0x8           ;; 1 cycle
          CFI FunCall ?MOVE_LONG_L06
        CALL      N:?MOVE_LONG_L06   ;; 3 cycles
        MOVW      AX, N:_energy+98   ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+68
        MOVW      AX, N:_energy+96   ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+70
        MOVW      BC, N:_energy+58   ;; 1 cycle
        MOVW      AX, N:_energy+56   ;; 1 cycle
          CFI FunCall _zone_energy_update
        CALL      _zone_energy_update  ;; 3 cycles
        MOVW      N:_energy+96, AX   ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+98, AX   ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3637   energy.Allph.zkvah_imp=zone_energy_update(energy.Allph.apparent_imp,energy.Allph.zkvah_imp,sum_t_zkvah1);
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x2A          ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        SUBW      SP, #0x8           ;; 1 cycle
          CFI CFA SP+78
        MOVW      DE, SP             ;; 1 cycle
        MOVW      BC, #0x8           ;; 1 cycle
          CFI FunCall ?MOVE_LONG_L06
        CALL      N:?MOVE_LONG_L06   ;; 3 cycles
        MOVW      AX, N:_energy+102  ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+80
        MOVW      AX, N:_energy+100  ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+82
        MOVW      BC, N:_energy+70   ;; 1 cycle
        MOVW      AX, N:_energy+68   ;; 1 cycle
          CFI FunCall _zone_energy_update
        CALL      _zone_energy_update  ;; 3 cycles
        ADDW      SP, #0x24          ;; 1 cycle
          CFI CFA SP+46
        MOVW      N:_energy+100, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+102, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3638   energy.Allph.zkvah_exp=zone_energy_update(energy.Allph.apparent_exp,energy.Allph.zkvah_exp,sum_t_zkvah2);
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0xA           ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        SUBW      SP, #0x8           ;; 1 cycle
          CFI CFA SP+54
        MOVW      DE, SP             ;; 1 cycle
        MOVW      BC, #0x8           ;; 1 cycle
          CFI FunCall ?MOVE_LONG_L06
        CALL      N:?MOVE_LONG_L06   ;; 3 cycles
        MOVW      AX, N:_energy+106  ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+56
        MOVW      AX, N:_energy+104  ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+58
        MOVW      BC, N:_energy+74   ;; 1 cycle
        MOVW      AX, N:_energy+72   ;; 1 cycle
          CFI FunCall _zone_energy_update
        CALL      _zone_energy_update  ;; 3 cycles
        MOVW      N:_energy+104, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_energy+106, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3639   
// 3640   t_zone_update();
          CFI FunCall _t_zone_update
        CALL      _t_zone_update     ;; 3 cycles
// 3641   
// 3642   calculate_zone_pf();
          CFI FunCall _calculate_zone_pf
        CALL      _calculate_zone_pf  ;; 3 cycles
// 3643   
// 3644   last_zkwh1=energy.Allph.zkwh_imp;  
        MOVW      BC, N:_energy+94   ;; 1 cycle
        MOVW      AX, N:_energy+92   ;; 1 cycle
        MOVW      N:_last_zkwh1, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_last_zkwh1+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3645   last_zkwh2=energy.Allph.zkwh_exp;
        MOVW      BC, N:_energy+98   ;; 1 cycle
        MOVW      AX, N:_energy+96   ;; 1 cycle
        MOVW      N:_last_zkwh2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_last_zkwh2+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3646   last_zkvarh1=energy.Allph.zkvarh_q1;  
        MOVW      BC, N:_energy+110  ;; 1 cycle
        MOVW      AX, N:_energy+108  ;; 1 cycle
        MOVW      N:_last_zkvarh1, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_last_zkvarh1+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3647   last_zkvarh2=energy.Allph.zkvarh_q2;
        MOVW      BC, N:_energy+114  ;; 1 cycle
        MOVW      AX, N:_energy+112  ;; 1 cycle
        MOVW      N:_last_zkvarh2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_last_zkvarh2+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3648   last_zkvarh3=energy.Allph.zkvarh_q3;
        MOVW      BC, N:_energy+118  ;; 1 cycle
        MOVW      AX, N:_energy+116  ;; 1 cycle
        MOVW      N:_last_zkvarh3, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_last_zkvarh3+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3649   last_zkvarh4=energy.Allph.zkvarh_q4;
        MOVW      BC, N:_energy+122  ;; 1 cycle
        MOVW      AX, N:_energy+120  ;; 1 cycle
        MOVW      N:_last_zkvarh4, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_last_zkvarh4+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3650   last_zkvah1=energy.Allph.zkvah_imp;  
        MOVW      BC, N:_energy+102  ;; 1 cycle
        MOVW      AX, N:_energy+100  ;; 1 cycle
        MOVW      N:_last_zkvah1, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_last_zkvah1+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3651   last_zkvah2=energy.Allph.zkvah_exp;
        MOVW      BC, N:_energy+106  ;; 1 cycle
        MOVW      AX, N:_energy+104  ;; 1 cycle
        MOVW      N:_last_zkvah2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_last_zkvah2+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3652   
// 3653   /*Zone active registers saving*/
// 3654   eeblk=TOD_CUR_BILL_BLK1/256; 
        MOV       N:_eeblk, #0x16    ;; 1 cycle
// 3655   eepg=(tariff_no-1)*16;
        MOV       A, N:_tariff_no    ;; 1 cycle
        DEC       A                  ;; 1 cycle
        MOV       X, #0x10           ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       N:_eepg, A         ;; 1 cycle
// 3656   
// 3657   long_into_char_array4(energy.Allph.zkwh_imp,&opr_data[0]);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      BC, N:_energy+94   ;; 1 cycle
        MOVW      AX, N:_energy+92   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 3658   long_into_char_array4(energy.Allph.zkwh_exp,&opr_data[4]);
        MOVW      DE, #LWRD(_opr_data+4)  ;; 1 cycle
        MOVW      BC, N:_energy+98   ;; 1 cycle
        MOVW      AX, N:_energy+96   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 3659   long_into_char_array4(energy.Allph.zkvarh_q3,&opr_data[8]);   
        MOVW      DE, #LWRD(_opr_data+8)  ;; 1 cycle
        MOVW      BC, N:_energy+118  ;; 1 cycle
        MOVW      AX, N:_energy+116  ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 3660   eprom_write(((eeblk*0x100)+eepg),0,16,PAGE_1,AUTO_CALC); //page-1
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+60
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       H, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+62
        XCH       A, C               ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOV       X, N:_eeblk        ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOV       C, N:_eepg         ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        ADDW      AX, BC             ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        POP       DE                 ;; 1 cycle
          CFI CFA SP+60
        XCH       A, H               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 3661   
// 3662   
// 3663   /*Zone reactive registers saving*/
// 3664   eepg=(tariff_no-1)*16;
        MOV       A, N:_tariff_no    ;; 1 cycle
        DEC       A                  ;; 1 cycle
        MOV       X, #0x10           ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       N:_eepg, A         ;; 1 cycle
// 3665   
// 3666   long_into_char_array4(energy.Allph.zkvarh_q1,&opr_data[0]);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      BC, N:_energy+110  ;; 1 cycle
        MOVW      AX, N:_energy+108  ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 3667   long_into_char_array4(energy.Allph.zkvarh_q2,&opr_data[4]);
        MOVW      DE, #LWRD(_opr_data+4)  ;; 1 cycle
        MOVW      BC, N:_energy+114  ;; 1 cycle
        MOVW      AX, N:_energy+112  ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 3668   long_into_char_array4(energy.Allph.zkvarh_q4,&opr_data[8]);  
        MOVW      DE, #LWRD(_opr_data+8)  ;; 1 cycle
        MOVW      BC, N:_energy+122  ;; 1 cycle
        MOVW      AX, N:_energy+120  ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 3669   eprom_write(((TOD_CUR_BILL_BLK2)+eepg),0,16,PAGE_1,AUTO_CALC); //page-2
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+62
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOV       X, N:_eepg         ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, #0x1680        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 3670   
// 3671   
// 3672   /*Zone apparent registers saving*/
// 3673   eeblk=TOD_CUR_BILL_BLK3/256; 
        MOV       N:_eeblk, #0x17    ;; 1 cycle
// 3674   eepg=(tariff_no-1)*16;
        MOV       A, N:_tariff_no    ;; 1 cycle
        DEC       A                  ;; 1 cycle
        MOV       X, #0x10           ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       N:_eepg, A         ;; 1 cycle
// 3675   
// 3676   long_into_char_array4(energy.Allph.zkvah_imp,&opr_data[0]);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      BC, N:_energy+102  ;; 1 cycle
        MOVW      AX, N:_energy+100  ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 3677   long_into_char_array4(energy.Allph.zkvah_exp,&opr_data[4]);
        MOVW      DE, #LWRD(_opr_data+4)  ;; 1 cycle
        MOVW      BC, N:_energy+106  ;; 1 cycle
        MOVW      AX, N:_energy+104  ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 3678   int_into_char_array(zone_pf,&opr_data[8]);
        MOVW      BC, #LWRD(_opr_data+8)  ;; 1 cycle
        MOVW      AX, N:_zone_pf     ;; 1 cycle
          CFI FunCall _int_into_char_array
        CALL      _int_into_char_array  ;; 3 cycles
// 3679   eprom_write(((eeblk*0x100)+eepg),0,16,PAGE_1,AUTO_CALC); //page-3
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+64
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       H, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+66
        XCH       A, C               ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOV       X, N:_eeblk        ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOV       C, N:_eepg         ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        ADDW      AX, BC             ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        POP       DE                 ;; 1 cycle
          CFI CFA SP+64
        XCH       A, H               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 3680 }
        ADDW      SP, #0x3C          ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock44
        ; ------------------------------------- Block: 294 cycles
        ; ------------------------------------- Total: 469 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock45 Using cfiCommon0
          CFI Function _t_zone_update
          CFI NoCalls
        CODE
// 3681 void t_zone_update(void)
// 3682 {
_t_zone_update:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 3683   t_zkwh1[tariff_no-1]=energy.Allph.zkwh_imp;
        MOVW      BC, N:_energy+94   ;; 1 cycle
        MOVW      AX, N:_energy+92   ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+8
        MOV       X, N:_tariff_no    ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x4           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_t_zkwh1-4)  ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        POP       AX                 ;; 1 cycle
          CFI CFA SP+6
        POP       BC                 ;; 1 cycle
          CFI CFA SP+4
        MOVW      [HL], AX           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3684   t_zkwh2[tariff_no-1]=energy.Allph.zkwh_exp;
        MOVW      BC, N:_energy+98   ;; 1 cycle
        MOVW      AX, N:_energy+96   ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+8
        MOV       X, N:_tariff_no    ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x4           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_t_zkwh2-4)  ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        POP       AX                 ;; 1 cycle
          CFI CFA SP+6
        POP       BC                 ;; 1 cycle
          CFI CFA SP+4
        MOVW      [HL], AX           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3685   t_zkvah1[tariff_no-1]=energy.Allph.zkvah_imp;
        MOVW      BC, N:_energy+102  ;; 1 cycle
        MOVW      AX, N:_energy+100  ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+8
        MOV       X, N:_tariff_no    ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x4           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_t_zkvah1-4)  ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        POP       AX                 ;; 1 cycle
          CFI CFA SP+6
        POP       BC                 ;; 1 cycle
          CFI CFA SP+4
        MOVW      [HL], AX           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3686   t_zkvah2[tariff_no-1]=energy.Allph.zkvah_exp;
        MOVW      BC, N:_energy+106  ;; 1 cycle
        MOVW      AX, N:_energy+104  ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+8
        MOV       X, N:_tariff_no    ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x4           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_t_zkvah2-4)  ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        POP       AX                 ;; 1 cycle
          CFI CFA SP+6
        POP       BC                 ;; 1 cycle
          CFI CFA SP+4
        MOVW      [HL], AX           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 3687 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock45
        ; ------------------------------------- Block: 74 cycles
        ; ------------------------------------- Total: 74 cycles
// 3688 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock46 Using cfiCommon2
          CFI Function _zone_energy_update
        CODE
// 3689 uint32_t zone_energy_update(uint32_t total_energy,  uint32_t curr_zone_energy,  uint64_t all_zone_sum)
// 3690 {
_zone_energy_update:
        ; * Stack frame (at entry) *
        ; Param size: 12
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+8
        ; Auto size: 16
        SUBW      SP, #0xC           ;; 1 cycle
          CFI CFA SP+20
// 3691   uint32_t diff_energy;
// 3692   
// 3693   
// 3694   if(all_zone_sum > total_energy)
        MOVW      AX, [SP+0x0E]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP+0x0C]      ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+22
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
          CFI FunCall __L2LLU
        CALL      __L2LLU            ;; 3 cycles
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x1C          ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
          CFI FunCall __CmpGeu64
        CALL      __CmpGeu64         ;; 3 cycles
        ADDW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+20
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_300  ;; 4 cycles
        ; ------------------------------------- Block: 27 cycles
// 3695   {
// 3696     diff_energy=all_zone_sum-total_energy;
        MOVW      AX, [SP+0x0E]      ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [SP+0x0C]      ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        PUSH      HL                 ;; 1 cycle
          CFI CFA SP+22
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+24
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x1C          ;; 1 cycle
          CFI FunCall __LLU2L
        CALL      __LLU2L            ;; 3 cycles
        POP       DE                 ;; 1 cycle
          CFI CFA SP+22
        POP       HL                 ;; 1 cycle
          CFI CFA SP+20
        SUBW      AX, DE             ;; 1 cycle
        SKNC
        DECW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      HL, SP             ;; 1 cycle
        MOVW      [HL], AX           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        BR        S:??dlms_reset_data_301  ;; 3 cycles
        ; ------------------------------------- Block: 30 cycles
// 3697   }
// 3698   else
// 3699   {
// 3700     diff_energy=total_energy-all_zone_sum;
??dlms_reset_data_300:
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x18          ;; 1 cycle
          CFI FunCall __LLU2L
        CALL      __LLU2L            ;; 3 cycles
        MOVW      DE, AX             ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+22
        POP       HL                 ;; 1 cycle
          CFI CFA SP+20
        MOVW      AX, [SP+0x0E]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP+0x0C]      ;; 1 cycle
        SUBW      AX, DE             ;; 1 cycle
        SKNC
        DECW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      HL, SP             ;; 1 cycle
        MOVW      [HL], AX           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        ; ------------------------------------- Block: 25 cycles
// 3701   }
// 3702   
// 3703   if((diff_energy>1000)&&(total_energy!=0))    //1-unit difference 
??dlms_reset_data_301:
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 7 cycles
        CMPW      AX, #0x3E9         ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??zone_energy_update_0:
        SKNC                         ;; 4 cycles
        BR        N:??dlms_reset_data_302  ;; 4 cycles
        ; ------------------------------------- Block: 4 cycles
        MOVW      AX, [SP+0x0E]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP+0x0C]      ;; 1 cycle
        OR        A, X               ;; 1 cycle
        OR        A, C               ;; 1 cycle
        OR        A, B               ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_302  ;; 4 cycles
        ; ------------------------------------- Block: 10 cycles
// 3704   {
// 3705     if(all_zone_sum > total_energy)
        MOVW      AX, [SP+0x0E]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP+0x0C]      ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+22
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
          CFI FunCall __L2LLU
        CALL      __L2LLU            ;; 3 cycles
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x1C          ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
          CFI FunCall __CmpGeu64
        CALL      __CmpGeu64         ;; 3 cycles
        ADDW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+20
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_303  ;; 4 cycles
        ; ------------------------------------- Block: 24 cycles
// 3706     {
// 3707       if(curr_zone_energy>diff_energy) // negative values taken care off
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x14          ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        CMP       A, [HL+0x03]       ;; 1 cycle
        BNZ       ??dlms_reset_data_304  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOV       A, C               ;; 1 cycle
        CMP       A, [HL+0x02]       ;; 1 cycle
        BNZ       ??dlms_reset_data_304  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, B               ;; 1 cycle
        CMP       A, [HL+0x01]       ;; 1 cycle
        BNZ       ??dlms_reset_data_304  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, X               ;; 1 cycle
        CMP       A, [HL]            ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??dlms_reset_data_304:
        BNC       ??dlms_reset_data_305  ;; 4 cycles
        ; ------------------------------------- Block: 4 cycles
// 3708       {
// 3709         diff_energy=curr_zone_energy-diff_energy; //not considered that the difference is more than current zone energy
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, [SP+0x16]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP+0x14]      ;; 1 cycle
        SUBW      AX, DE             ;; 1 cycle
        SKNC
        DECW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        BR        S:??dlms_reset_data_306  ;; 3 cycles
        ; ------------------------------------- Block: 19 cycles
// 3710       }
// 3711       else
// 3712       {
// 3713         diff_energy=curr_zone_energy; //not considered that the difference is more than current zone energy
??dlms_reset_data_305:
        MOVW      AX, [SP+0x16]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP+0x14]      ;; 1 cycle
        BR        S:??dlms_reset_data_306  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 3714       }
// 3715     }
// 3716     else
// 3717     {
// 3718       diff_energy=curr_zone_energy+(total_energy-all_zone_sum);
??dlms_reset_data_303:
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x18          ;; 1 cycle
          CFI FunCall __LLU2L
        CALL      __LLU2L            ;; 3 cycles
        MOVW      DE, AX             ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+22
        POP       HL                 ;; 1 cycle
          CFI CFA SP+20
        PUSH      HL                 ;; 1 cycle
          CFI CFA SP+22
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+24
        MOVW      AX, [SP+0x12]      ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [SP+0x10]      ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, [SP+0x1A]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP+0x18]      ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        SKNC
        INCW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        ADDW      AX, HL             ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        POP       DE                 ;; 1 cycle
          CFI CFA SP+22
        POP       HL                 ;; 1 cycle
          CFI CFA SP+20
        SUBW      AX, DE             ;; 1 cycle
        SKNC
        DECW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        BR        S:??dlms_reset_data_306  ;; 3 cycles
        ; ------------------------------------- Block: 40 cycles
// 3719     }
// 3720   }
// 3721   else
// 3722   {
// 3723     diff_energy=curr_zone_energy;
??dlms_reset_data_302:
        MOVW      AX, [SP+0x16]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP+0x14]      ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 3724   }
// 3725   return(diff_energy);
??dlms_reset_data_306:
        ADDW      SP, #0x10          ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock46
        ; ------------------------------------- Block: 7 cycles
        ; ------------------------------------- Total: 233 cycles
// 3726 }
// 3727 
// 3728 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock47 Using cfiCommon0
          CFI Function _check_active_calendar
        CODE
// 3729 void check_active_calendar(void)
// 3730 {
_check_active_calendar:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 2
        SUBW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+6
// 3731   unsigned int m1;
// 3732   
// 3733   active_f= 0;
        MOV       N:_active_f, #0x0  ;; 1 cycle
// 3734   
// 3735   eprom_read(TOU_PassiveApliDate,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x15C0        ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 3736   
// 3737   active_f= active_calendar;
        MOV       A, N:_active_calendar  ;; 1 cycle
        MOV       N:_active_f, A     ;; 1 cycle
// 3738   
// 3739   m1= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
// 3740   
// 3741   if(Now.year > opr_data[0])
        MOV       A, N:_opr_data     ;; 1 cycle
        CMP       A, N:_Now+6        ;; 1 cycle
        BNC       ??dlms_reset_data_307  ;; 4 cycles
        ; ------------------------------------- Block: 19 cycles
// 3742   {
// 3743     m1= 1;
        MOVW      AX, #0x1           ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
        BR        N:??dlms_reset_data_308  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 3744   }
// 3745   else if(Now.year == opr_data[0] && Now.month > opr_data[1])
??dlms_reset_data_307:
        MOV       A, N:_Now+6        ;; 1 cycle
        CMP       A, N:_opr_data     ;; 1 cycle
        BNZ       ??dlms_reset_data_309  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_opr_data+1   ;; 1 cycle
        CMP       A, N:_Now+5        ;; 1 cycle
        BNC       ??dlms_reset_data_309  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3746   {
// 3747     m1= 1;
        MOVW      AX, #0x1           ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
        BR        S:??dlms_reset_data_308  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 3748   }
// 3749   else if(Now.year == opr_data[0] && Now.month == opr_data[1] && Now.day > opr_data[2])
??dlms_reset_data_309:
        MOV       A, N:_Now+6        ;; 1 cycle
        CMP       A, N:_opr_data     ;; 1 cycle
        BNZ       ??dlms_reset_data_310  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_Now+5        ;; 1 cycle
        CMP       A, N:_opr_data+1   ;; 1 cycle
        BNZ       ??dlms_reset_data_310  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_opr_data+2   ;; 1 cycle
        CMP       A, N:_Now+3        ;; 1 cycle
        BNC       ??dlms_reset_data_310  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3750   {
// 3751     m1= 1;
        MOVW      AX, #0x1           ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
        BR        S:??dlms_reset_data_308  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 3752   }
// 3753   else if(Now.year == opr_data[0] && Now.month == opr_data[1] && Now.day == opr_data[2] && Now.hour > opr_data[3])
??dlms_reset_data_310:
        MOV       A, N:_Now+6        ;; 1 cycle
        CMP       A, N:_opr_data     ;; 1 cycle
        BNZ       ??dlms_reset_data_311  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_Now+5        ;; 1 cycle
        CMP       A, N:_opr_data+1   ;; 1 cycle
        BNZ       ??dlms_reset_data_311  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_Now+3        ;; 1 cycle
        CMP       A, N:_opr_data+2   ;; 1 cycle
        BNZ       ??dlms_reset_data_311  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_opr_data+3   ;; 1 cycle
        CMP       A, N:_Now+2        ;; 1 cycle
        BNC       ??dlms_reset_data_311  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3754   {
// 3755     m1= 1;
        MOVW      AX, #0x1           ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
        BR        S:??dlms_reset_data_308  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 3756   }
// 3757   else if(Now.year == opr_data[0] && Now.month == opr_data[1] && Now.day == opr_data[2] && Now.hour == opr_data[3] && Now.min >= opr_data[4])
??dlms_reset_data_311:
        MOV       A, N:_Now+6        ;; 1 cycle
        CMP       A, N:_opr_data     ;; 1 cycle
        BNZ       ??dlms_reset_data_308  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_Now+5        ;; 1 cycle
        CMP       A, N:_opr_data+1   ;; 1 cycle
        BNZ       ??dlms_reset_data_308  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_Now+3        ;; 1 cycle
        CMP       A, N:_opr_data+2   ;; 1 cycle
        BNZ       ??dlms_reset_data_308  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_Now+2        ;; 1 cycle
        CMP       A, N:_opr_data+3   ;; 1 cycle
        BNZ       ??dlms_reset_data_308  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_Now+1        ;; 1 cycle
        CMP       A, N:_opr_data+4   ;; 1 cycle
        BC        ??dlms_reset_data_308  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3758   {
// 3759     m1= 1;
        MOVW      AX, #0x1           ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 3760   }
// 3761   
// 3762   if((calendar_change_f == 1) && m1 == 1)
??dlms_reset_data_308:
        CMP       N:_calendar_change_f, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_312  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOVW      AX, [SP]           ;; 1 cycle
        CMPW      AX, #0x1           ;; 1 cycle
        BNZ       ??dlms_reset_data_312  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3763   {
// 3764     active_calendar= (~active_calendar & 0x01);
        MOVW      HL, #LWRD(_active_calendar)  ;; 1 cycle
        MOV1      CY, [HL].0         ;; 1 cycle
        NOT1      CY                 ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ROLC      A, 0x1             ;; 1 cycle
        MOV       N:_active_calendar, A  ;; 1 cycle
// 3765     fill_oprzero(16);
        MOV       A, #0x10           ;; 1 cycle
          CFI FunCall _fill_oprzero
        CALL      _fill_oprzero      ;; 3 cycles
// 3766     opr_data[0]= active_calendar;
        MOV       A, N:_active_calendar  ;; 1 cycle
        MOV       N:_opr_data, A     ;; 1 cycle
// 3767     
// 3768     eprom_write(TOU_ActiveCalPtr,0,16,PAGE_1,AUTO_CALC); 
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+8
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x15E0        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 3769     
// 3770     calendar_change_f= 0;
        MOV       N:_calendar_change_f, #0x0  ;; 1 cycle
// 3771     opr_data[0]= 0;
        MOV       N:_opr_data, #0x0  ;; 1 cycle
// 3772     
// 3773     eprom_write(TOU_CheckPassiveApli,0,16,PAGE_1,AUTO_CALC); 
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+10
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x15D0        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
        ADDW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+6
        ; ------------------------------------- Block: 33 cycles
// 3774   }
// 3775 }
??dlms_reset_data_312:
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock47
        ; ------------------------------------- Block: 7 cycles
        ; ------------------------------------- Total: 176 cycles
// 3776 
// 3777 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function _fill_ff
          CFI NoCalls
        CODE
// 3778 void fill_ff(unsigned char count1)
// 3779 {
_fill_ff:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
        MOV       C, A               ;; 1 cycle
// 3780   unsigned char i_f;
// 3781   
// 3782   for(i_f= count1; i_f < 15; i_f++)
        MOV       A, C               ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??fill_ff_0:
        CMP       A, #0xF            ;; 1 cycle
        BNC       ??dlms_reset_data_313  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 3783   {
// 3784     opr_data[i_f]= 0xff;
        MOV       B, A               ;; 1 cycle
        MOV       X, #0xFF           ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_opr_data)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 3785   }
        INC       A                  ;; 1 cycle
        BR        S:??fill_ff_0      ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 3786 }
??dlms_reset_data_313:
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock48
        ; ------------------------------------- Block: 6 cycles
        ; ------------------------------------- Total: 22 cycles
// 3787 
// 3788 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock49 Using cfiCommon0
          CFI Function _sort_object
        CODE
// 3789 void sort_object()
// 3790 {
_sort_object:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 3791   info[k++]= 0x00;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 3792   structure(0x04);
        MOV       A, #0x4            ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 3793   val_2byt(0x00, 0x00);
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
// 3794   obiscode(0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
        MOV       D, #0x0            ;; 1 cycle
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _obiscode
        CALL      _obiscode          ;; 3 cycles
// 3795   info[k++]= 0x0F;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xF            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 3796   info[k++]= 0x00;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 3797   val_2byt(0x00, 0x00);
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
// 3798   info_total= k;
        MOVW      AX, N:_k           ;; 1 cycle
        MOVW      N:_info_total, AX  ;; 1 cycle
// 3799 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock49
        ; ------------------------------------- Block: 46 cycles
        ; ------------------------------------- Total: 46 cycles
// 3800 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock50 Using cfiCommon0
          CFI Function _sort_object1
        CODE
// 3801 void sort_object1()
// 3802 {
_sort_object1:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 3803   info[k++]= 0x00;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 3804   structure(0x04);
        MOV       A, #0x4            ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 3805   val_2byt(0x00, 0x08);
        MOV       X, #0x8            ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
// 3806   obiscode(0x00, 0x00, 0x01, 0x00, 0x00, 0xff);
        MOV       D, #0xFF           ;; 1 cycle
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _obiscode
        CALL      _obiscode          ;; 3 cycles
// 3807   info[k++]= 0x0F;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xF            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 3808   info[k++]= 0x02;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x2            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 3809   val_2byt(0x00, 0x00);
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
// 3810   info_total= k;
        MOVW      AX, N:_k           ;; 1 cycle
        MOVW      N:_info_total, AX  ;; 1 cycle
// 3811 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock50
        ; ------------------------------------- Block: 46 cycles
        ; ------------------------------------- Total: 46 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock51 Using cfiCommon0
          CFI Function _write_tod_data
        CODE
// 3812 void write_tod_data(uint8_t lu8_i)
// 3813 {
_write_tod_data:
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        ; Auto size: 4
        SUBW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+8
// 3814   uint16_t lu16_addr;
// 3815   
// 3816   if(lu8_i==tou_u8pssv_no_zone)
        MOV       A, [SP+0x03]       ;; 1 cycle
        CMP       A, N:_tou_u8pssv_no_zone  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_314  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 3817   {
// 3818     if(active_calendar==1)
        CMP       N:_active_calendar, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_315  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 3819     {
// 3820       lu16_addr=TOU_DAY_ACTIVE_ADD+(tou_u8pssv_day*0x30);
        MOV       X, N:_tou_u8pssv_day  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x30          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x1500        ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
        BR        S:??dlms_reset_data_316  ;; 3 cycles
        ; ------------------------------------- Block: 10 cycles
// 3821     }
// 3822     else
// 3823     {
// 3824       lu16_addr=TOU_DAY_ACTIVE_ADD+0x60+(tou_u8pssv_day*0x30);
??dlms_reset_data_315:
        MOV       X, N:_tou_u8pssv_day  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x30          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x1560        ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
        ; ------------------------------------- Block: 7 cycles
// 3825     }
// 3826     
// 3827     fill_oprzero(16);
??dlms_reset_data_316:
        MOV       A, #0x10           ;; 1 cycle
          CFI FunCall _fill_oprzero
        CALL      _fill_oprzero      ;; 3 cycles
// 3828     opr_data[0]=tou_u8pssv_no_zone;
        MOV       A, N:_tou_u8pssv_no_zone  ;; 1 cycle
        MOV       N:_opr_data, A     ;; 1 cycle
// 3829     memcpy(&opr_data[1],&tou_a8pssv_tariff,tou_u8pssv_no_zone);
        MOV       C, N:_tou_u8pssv_no_zone  ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #LWRD(_tou_a8pssv_tariff)  ;; 1 cycle
        MOVW      HL, #LWRD(_opr_data+1)  ;; 1 cycle
        MOVW      AX, BC             ;; 1 cycle
          CFI FunCall ?MEMCPY_NEAR
        CALL      N:?MEMCPY_NEAR     ;; 3 cycles
// 3830     opr_data[13]=tou_u8pssv_no_days;
        MOV       A, N:_tou_u8pssv_no_days  ;; 1 cycle
        MOV       N:_opr_data+13, A  ;; 1 cycle
// 3831     opr_data[14]=tou_u8pssv_dayid;
        MOV       A, N:_tou_u8pssv_dayid  ;; 1 cycle
        MOV       N:_opr_data+14, A  ;; 1 cycle
// 3832     eprom_write(lu16_addr,0,16,PAGE_1,AUTO_CALC); 
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+10
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 3833     
// 3834     fill_oprzero(16);
        MOV       A, #0x10           ;; 1 cycle
          CFI FunCall _fill_oprzero
        CALL      _fill_oprzero      ;; 3 cycles
// 3835     memcpy(&opr_data[0],&tou_a8pssv_zone_time,(ZTIME-2));
        MOVW      DE, #LWRD(_tou_a8pssv_zone_time)  ;; 1 cycle
        MOVW      HL, #LWRD(_opr_data)  ;; 1 cycle
        MOV       B, #0xE            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
// 3836     eprom_write((lu16_addr+0x10),0,16,PAGE_1,AUTO_CALC); 
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 3837     
// 3838     fill_oprzero(16);
        MOV       A, #0x10           ;; 1 cycle
          CFI FunCall _fill_oprzero
        CALL      _fill_oprzero      ;; 3 cycles
// 3839     memcpy(&opr_data[0],&tou_a8pssv_zone_time[ZTIME-2],2);
        MOVW      DE, #LWRD(_tou_a8pssv_zone_time+14)  ;; 1 cycle
        MOVW      HL, #LWRD(_opr_data)  ;; 1 cycle
        MOV       B, #0x2            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
// 3840     eprom_write((lu16_addr+0x20),0,16,PAGE_1,AUTO_CALC);                        
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        ADDW      AX, #0x20          ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
        ADDW      SP, #0x6           ;; 1 cycle
          CFI CFA SP+8
        ; ------------------------------------- Block: 68 cycles
// 3841   }  
// 3842 }
??dlms_reset_data_314:
        ADDW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock51
        ; ------------------------------------- Block: 7 cycles
        ; ------------------------------------- Total: 105 cycles
// 3843 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock52 Using cfiCommon0
          CFI Function _tou_pssv_store
        CODE
// 3844 uint8_t tou_pssv_store(void)
// 3845 {
_tou_pssv_store:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 10
        SUBW      SP, #0xA           ;; 1 cycle
          CFI CFA SP+14
// 3846   uint8_t  lu8_i,u8index,u8loop,season_tod,UcharTemp=0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x03], A       ;; 1 cycle
// 3847   uint16_t u16addr,updatek;
// 3848   
// 3849   if((info[4]==0x01)&&(info[16]==0x01)&&(info[17]<=0x02)&&(info[18]==0x02)
// 3850      &&(info[19]==0x02)&&(info[20]==0x11)&&(info[21]<=0x02)&&(info[22]==0x01))
        CMP       N:_info+4, #0x1    ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_317  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        CMP       N:_info+16, #0x1   ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_317  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOV       A, N:_info+17      ;; 1 cycle
        CMP       A, #0x3            ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_317  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        CMP       N:_info+18, #0x2   ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_317  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_info+19, #0x2   ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_317  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_info+20, #0x11  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_317  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOV       A, N:_info+21      ;; 1 cycle
        CMP       A, #0x3            ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_317  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        CMP       N:_info+22, #0x1   ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_317  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 3851   {//in normal tod;if no of zone less than equal to 5
// 3852     tou_u8pssv_no_days=info[17];
        MOV       A, N:_info+17      ;; 1 cycle
        MOV       N:_tou_u8pssv_no_days, A  ;; 1 cycle
// 3853     tou_u8pssv_dayid=info[21];
        MOV       A, N:_info+21      ;; 1 cycle
        MOV       N:_tou_u8pssv_dayid, A  ;; 1 cycle
// 3854     tou_u8pssv_no_zone=info[23];
        MOV       A, N:_info+23      ;; 1 cycle
        MOV       N:_tou_u8pssv_no_zone, A  ;; 1 cycle
// 3855     last_block=0x00;
        MOV       N:_last_block, #0x0  ;; 1 cycle
// 3856     
// 3857     for(UcharTemp=28,lu8_i=0;(lu8_i<(info[23]))&&(UcharTemp<161);lu8_i++,UcharTemp+=19)
        MOV       A, #0x1C           ;; 1 cycle
        MOV       [SP+0x03], A       ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        ; ------------------------------------- Block: 11 cycles
??tou_pssv_store_0:
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, N:_info+23      ;; 1 cycle
        BNC       ??dlms_reset_data_318  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x03]       ;; 1 cycle
        CMP       A, #0xA1           ;; 1 cycle
        BNC       ??dlms_reset_data_318  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3858     {
// 3859       if((info[UcharTemp]>23)||(info[UcharTemp+1]>59))
        MOV       A, [SP+0x03]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info)[B]      ;; 1 cycle
        CMP       A, #0x18           ;; 1 cycle
        BNC       ??dlms_reset_data_319  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP+0x03]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+1)[B]    ;; 1 cycle
        CMP       A, #0x3C           ;; 1 cycle
        BC        ??dlms_reset_data_320  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 3860       {
// 3861         conf_err(250);
??dlms_reset_data_319:
        MOV       A, #0xFA           ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 3862         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_321  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 3863       }
// 3864     }
??dlms_reset_data_320:
        MOV       A, [SP+0x01]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        MOV       A, [SP+0x03]       ;; 1 cycle
        ADD       A, #0x13           ;; 1 cycle
        MOV       [SP+0x03], A       ;; 1 cycle
        BR        S:??tou_pssv_store_0  ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 3865     
// 3866     fill_oprzero(16);                              
??dlms_reset_data_318:
        MOV       A, #0x10           ;; 1 cycle
          CFI FunCall _fill_oprzero
        CALL      _fill_oprzero      ;; 3 cycles
// 3867     opr_data[0]=info[23];
        MOV       A, N:_info+23      ;; 1 cycle
        MOV       N:_opr_data, A     ;; 1 cycle
// 3868     k=23+19;
        MOVW      AX, #0x2A          ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 3869     for(lu8_i=0; lu8_i<(info[23]); lu8_i++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        ; ------------------------------------- Block: 10 cycles
??tou_pssv_store_1:
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, N:_info+23      ;; 1 cycle
        BNC       ??dlms_reset_data_322  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3870     {
// 3871       if(info[k]<=tou_u8pssv_no_zone)
        MOV       X, N:_tou_u8pssv_no_zone  ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BC        ??dlms_reset_data_323  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 3872       {
// 3873         opr_data[lu8_i+1]=info[k];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_opr_data+1)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 3874         tou_a8pssv_tariff[lu8_i]=info[k];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_tou_a8pssv_tariff)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 3875         k=k+19;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x13          ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 3876       }
        MOV       A, [SP+0x01]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        BR        S:??tou_pssv_store_1  ;; 3 cycles
        ; ------------------------------------- Block: 25 cycles
// 3877       else
// 3878       {
// 3879         conf_err(250);
??dlms_reset_data_323:
        MOV       A, #0xFA           ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 3880         return 0;
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_321  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 3881       }
// 3882     }
// 3883     opr_data[13]=tou_u8pssv_no_days;
??dlms_reset_data_322:
        MOV       A, N:_tou_u8pssv_no_days  ;; 1 cycle
        MOV       N:_opr_data+13, A  ;; 1 cycle
// 3884     opr_data[14]=tou_u8pssv_dayid;
        MOV       A, N:_tou_u8pssv_dayid  ;; 1 cycle
        MOV       N:_opr_data+14, A  ;; 1 cycle
// 3885     
// 3886     u8index=info[17];
        MOV       A, N:_info+17      ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 3887     
// 3888     if(active_calendar==0) 
        CMP0      N:_active_calendar  ;; 1 cycle
        BNZ       ??dlms_reset_data_324  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
// 3889     {
// 3890       u16addr=TOU_DAY_ACTIVE_ADD+0x60;
        MOVW      AX, #0x1560        ;; 1 cycle
        MOVW      [SP+0x06], AX      ;; 1 cycle
        BR        S:??dlms_reset_data_325  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 3891     }
// 3892     else
// 3893     {
// 3894       u16addr=TOU_DAY_ACTIVE_ADD;
??dlms_reset_data_324:
        MOVW      AX, #0x1500        ;; 1 cycle
        MOVW      [SP+0x06], AX      ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 3895     }
// 3896     eprom_write(u16addr,0,16,PAGE_1,AUTO_CALC);
??dlms_reset_data_325:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x08]      ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 3897     
// 3898     fill_oprzero(16);
        MOV       A, #0x10           ;; 1 cycle
          CFI FunCall _fill_oprzero
        CALL      _fill_oprzero      ;; 3 cycles
// 3899     k=28;
        MOVW      AX, #0x1C          ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 3900     for(lu8_i=0;(lu8_i<(ZTARIFF-1) && lu8_i<info[23]);  lu8_i++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x03], A       ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+14
        ; ------------------------------------- Block: 18 cycles
??tou_pssv_store_2:
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, #0x7            ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_326  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, N:_info+23      ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_326  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3901     {
// 3902       opr_data[(lu8_i*2)]=hex_to_bcd(info[k]);
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       D, A               ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       (_opr_data)[BC], A  ;; 1 cycle
        XCH       A, D               ;; 1 cycle
// 3903       opr_data[(lu8_i*2)+1]=hex_to_bcd(info[k+1]);
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       D, A               ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       (_opr_data+1)[BC], A  ;; 1 cycle
        XCH       A, D               ;; 1 cycle
// 3904       tou_a8pssv_zone_time[(lu8_i*2)]=hex_to_bcd(info[k]);
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       D, A               ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       (_tou_a8pssv_zone_time)[BC], A  ;; 1 cycle
        XCH       A, D               ;; 1 cycle
// 3905       tou_a8pssv_zone_time[(lu8_i*2)+1]=hex_to_bcd(info[k+1]);
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       D, A               ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       (_tou_a8pssv_zone_time+1)[BC], A  ;; 1 cycle
        XCH       A, D               ;; 1 cycle
// 3906       k=k+19;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x13          ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 3907     }
        MOV       A, [SP+0x01]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        BR        N:??tou_pssv_store_2  ;; 3 cycles
        ; ------------------------------------- Block: 73 cycles
// 3908     eprom_write((u16addr+0x10),0,16,PAGE_1,AUTO_CALC);
??dlms_reset_data_326:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x08]      ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 3909     
// 3910     if(info[23]==ZTARIFF)
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+14
        CMP       N:_info+23, #0x8   ;; 1 cycle
        BNZ       ??dlms_reset_data_327  ;; 4 cycles
        ; ------------------------------------- Block: 16 cycles
// 3911     {
// 3912       opr_data[0]=hex_to_bcd(info[k]);
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       N:_opr_data, A     ;; 1 cycle
// 3913       opr_data[1]=hex_to_bcd(info[k+1]);
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       N:_opr_data+1, A   ;; 1 cycle
// 3914       tou_a8pssv_zone_time[14]=opr_data[0];
        MOV       A, N:_opr_data     ;; 1 cycle
        MOV       N:_tou_a8pssv_zone_time+14, A  ;; 1 cycle
// 3915       tou_a8pssv_zone_time[15]=opr_data[1];
        MOV       A, N:_opr_data+1   ;; 1 cycle
        MOV       N:_tou_a8pssv_zone_time+15, A  ;; 1 cycle
// 3916       k=k+19;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x13          ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 3917       eprom_write((u16addr+0x20),0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x08]      ;; 1 cycle
        ADDW      AX, #0x20          ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+14
        ; ------------------------------------- Block: 30 cycles
// 3918     }
// 3919     
// 3920     if(u8index==2)
??dlms_reset_data_327:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_328  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3921     {
// 3922       k=(23+(info[23]*19));
        MOV       X, N:_info+23      ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x13          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x17          ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 3923       updatek=k;
        MOVW      AX, N:_k           ;; 1 cycle
        MOVW      [SP+0x08], AX      ;; 1 cycle
// 3924       tou_u8pssv_dayid=info[k+4];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+4)[BC]   ;; 1 cycle
        MOV       N:_tou_u8pssv_dayid, A  ;; 1 cycle
// 3925       if((info[k+1]==0x02)&&(info[k+2]==0x02)&&(info[k+3]<=0x11)&&(info[k+4]==0x02)&&(info[k+5]==0x01))
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_328  ;; 4 cycles
        ; ------------------------------------- Block: 19 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+2)[BC]   ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_328  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+3)[BC]   ;; 1 cycle
        CMP       A, #0x12           ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_328  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+4)[BC]   ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_328  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+5)[BC]   ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_328  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 3926       {
// 3927         updatek=updatek+11; 
        MOVW      AX, [SP+0x08]      ;; 1 cycle
        ADDW      AX, #0xB           ;; 1 cycle
        MOVW      [SP+0x08], AX      ;; 1 cycle
// 3928         
// 3929         for(UcharTemp=updatek,lu8_i=0;  (lu8_i<(info[k+6]) && lu8_i<ZTARIFF); lu8_i++,UcharTemp+=19)
        MOVW      AX, [SP+0x08]      ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       [SP+0x03], A       ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        ; ------------------------------------- Block: 8 cycles
??tou_pssv_store_3:
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+6)[BC]   ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BNC       ??dlms_reset_data_329  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNC       ??dlms_reset_data_329  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3930         {
// 3931           if((info[UcharTemp]>23)||(info[UcharTemp+1]>59))
        MOV       A, [SP+0x03]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info)[B]      ;; 1 cycle
        CMP       A, #0x18           ;; 1 cycle
        BNC       ??dlms_reset_data_330  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP+0x03]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+1)[B]    ;; 1 cycle
        CMP       A, #0x3C           ;; 1 cycle
        BC        ??dlms_reset_data_331  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 3932           {
// 3933             conf_err(250);
??dlms_reset_data_330:
        MOV       A, #0xFA           ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 3934             return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_321  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 3935           }
// 3936         }
??dlms_reset_data_331:
        MOV       A, [SP+0x01]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        MOV       A, [SP+0x03]       ;; 1 cycle
        ADD       A, #0x13           ;; 1 cycle
        MOV       [SP+0x03], A       ;; 1 cycle
        BR        S:??tou_pssv_store_3  ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 3937         
// 3938         fill_oprzero(16);                              
??dlms_reset_data_329:
        MOV       A, #0x10           ;; 1 cycle
          CFI FunCall _fill_oprzero
        CALL      _fill_oprzero      ;; 3 cycles
// 3939         opr_data[0]=info[k+6];    
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+6)[BC]   ;; 1 cycle
        MOV       N:_opr_data, A     ;; 1 cycle
// 3940         season_tod=opr_data[0];
        MOV       A, N:_opr_data     ;; 1 cycle
        MOV       [SP+0x04], A       ;; 1 cycle
// 3941         k=(k+6+19);
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x19          ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 3942         for(lu8_i=0;lu8_i<season_tod;lu8_i++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        ; ------------------------------------- Block: 14 cycles
??tou_pssv_store_4:
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x04]       ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BNC       ??dlms_reset_data_332  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 3943         {
// 3944           opr_data[lu8_i+1]=info[k];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_opr_data+1)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 3945           tou_a8pssv_tariff[lu8_i]=info[k];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_tou_a8pssv_tariff)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 3946           k=k+19;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x13          ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 3947         }
        MOV       A, [SP+0x01]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        BR        S:??tou_pssv_store_4  ;; 3 cycles
        ; ------------------------------------- Block: 25 cycles
// 3948         opr_data[13]=tou_u8pssv_no_days;
??dlms_reset_data_332:
        MOV       A, N:_tou_u8pssv_no_days  ;; 1 cycle
        MOV       N:_opr_data+13, A  ;; 1 cycle
// 3949         opr_data[14]=tou_u8pssv_dayid;
        MOV       A, N:_tou_u8pssv_dayid  ;; 1 cycle
        MOV       N:_opr_data+14, A  ;; 1 cycle
// 3950         eprom_write((u16addr+0x30),0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x08]      ;; 1 cycle
        ADDW      AX, #0x30          ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 3951         
// 3952         fill_oprzero(16);
        MOV       A, #0x10           ;; 1 cycle
          CFI FunCall _fill_oprzero
        CALL      _fill_oprzero      ;; 3 cycles
// 3953         k=updatek;
        MOVW      AX, [SP+0x0A]      ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 3954         for(lu8_i=0;  (lu8_i<(ZTARIFF-1) &&  lu8_i<season_tod);  lu8_i++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x03], A       ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+14
        ; ------------------------------------- Block: 23 cycles
??tou_pssv_store_5:
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, #0x7            ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_333  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x04]       ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_333  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 3955         {
// 3956           opr_data[(lu8_i*2)]=hex_to_bcd(info[k]);
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       D, A               ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       (_opr_data)[BC], A  ;; 1 cycle
        XCH       A, D               ;; 1 cycle
// 3957           opr_data[(lu8_i*2)+1]=hex_to_bcd(info[k+1]);  
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       D, A               ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       (_opr_data+1)[BC], A  ;; 1 cycle
        XCH       A, D               ;; 1 cycle
// 3958           tou_a8pssv_zone_time[(lu8_i*2)]=hex_to_bcd(info[k]);
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       D, A               ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       (_tou_a8pssv_zone_time)[BC], A  ;; 1 cycle
        XCH       A, D               ;; 1 cycle
// 3959           tou_a8pssv_zone_time[(lu8_i*2)+1]=hex_to_bcd(info[k+1]);
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       D, A               ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       (_tou_a8pssv_zone_time+1)[BC], A  ;; 1 cycle
        XCH       A, D               ;; 1 cycle
// 3960           k=k+19;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x13          ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 3961         }
        MOV       A, [SP+0x01]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        BR        N:??tou_pssv_store_5  ;; 3 cycles
        ; ------------------------------------- Block: 73 cycles
// 3962         eprom_write((u16addr+0x40),0,16,PAGE_1,AUTO_CALC);
??dlms_reset_data_333:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x08]      ;; 1 cycle
        ADDW      AX, #0x40          ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 3963         
// 3964         if(season_tod==ZTARIFF)
        MOV       A, [SP+0x06]       ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+14
        CMP       A, #0x8            ;; 1 cycle
        BNZ       ??dlms_reset_data_328  ;; 4 cycles
        ; ------------------------------------- Block: 17 cycles
// 3965         {
// 3966           opr_data[0]=hex_to_bcd(info[k]);
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       N:_opr_data, A     ;; 1 cycle
// 3967           opr_data[1]=hex_to_bcd(info[k+1]);
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       N:_opr_data+1, A   ;; 1 cycle
// 3968           tou_a8pssv_zone_time[14]=opr_data[0];
        MOV       A, N:_opr_data     ;; 1 cycle
        MOV       N:_tou_a8pssv_zone_time+14, A  ;; 1 cycle
// 3969           tou_a8pssv_zone_time[15]=opr_data[1];
        MOV       A, N:_opr_data+1   ;; 1 cycle
        MOV       N:_tou_a8pssv_zone_time+15, A  ;; 1 cycle
// 3970           k=k+19;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x13          ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 3971           eprom_write((u16addr+0x50),0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x08]      ;; 1 cycle
        ADDW      AX, #0x50          ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+14
        ; ------------------------------------- Block: 30 cycles
// 3972         }
// 3973       }
// 3974     }
// 3975     return (1);
??dlms_reset_data_328:
        MOV       A, #0x1            ;; 1 cycle
        BR        N:??dlms_reset_data_321  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 3976   }
// 3977   
// 3978   else if((info[4]==0x02)&&(info[20]==0x01)&&(info[22]==0x01)&&(info[23]<=0x02)
// 3979           &&(info[24]==0x02)&&(info[25]==0x02)&&(info[26]==0x11)&&(info[28]==0x01)&&(info[29]<=8))
??dlms_reset_data_317:
        CMP       N:_info+4, #0x2    ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_334  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_info+20, #0x1   ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_334  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_info+22, #0x1   ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_334  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOV       A, N:_info+23      ;; 1 cycle
        CMP       A, #0x3            ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_334  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        CMP       N:_info+24, #0x2   ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_334  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_info+25, #0x2   ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_334  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_info+26, #0x11  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_334  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_info+28, #0x1   ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_334  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOV       A, N:_info+29      ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_334  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3980   {//in normal tod;if no of zone more than or equal to 6(1-5 zone entry filled here)
// 3981     //seasonal tod;if no of zone 5
// 3982     block_no=info[20];//1
        MOV       X, N:_info+20      ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      N:_block_no, AX    ;; 1 cycle
// 3983     last_block=info[16];//0
        MOV       A, N:_info+16      ;; 1 cycle
        MOV       N:_last_block, A   ;; 1 cycle
// 3984     tou_u8pssv_dayid=info[27];//1
        MOV       A, N:_info+27      ;; 1 cycle
        MOV       N:_tou_u8pssv_dayid, A  ;; 1 cycle
// 3985     tou_u8pssv_no_zone=info[29];//8
        MOV       A, N:_info+29      ;; 1 cycle
        MOV       N:_tou_u8pssv_no_zone, A  ;; 1 cycle
// 3986     tou_u8pssv_no_days=info[23];//1,if 2 season config then this will be 2.
        MOV       A, N:_info+23      ;; 1 cycle
        MOV       N:_tou_u8pssv_no_days, A  ;; 1 cycle
// 3987     tou_u8pssv_buffer_traced=info[21];//110
        MOV       A, N:_info+21      ;; 1 cycle
        MOV       N:_tou_u8pssv_buffer_traced, A  ;; 1 cycle
// 3988     u8index=30;
        MOV       A, #0x1E           ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 3989     tou_u8pssv_buffer_traced -= 8;//102
        MOVW      HL, #LWRD(_tou_u8pssv_buffer_traced)  ;; 1 cycle
        MOV       A, [HL]            ;; 1 cycle
        ADD       A, #0xF8           ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
// 3990     tou_u8pssv_ptr=0;
        MOV       N:_tou_u8pssv_ptr, #0x0  ;; 1 cycle
// 3991     tou_u8pssv_day=0;
        MOV       N:_tou_u8pssv_day, #0x0  ;; 1 cycle
// 3992     tou_u8pssv_up_zone=0;
        MOV       N:_tou_u8pssv_up_zone, #0x0  ;; 1 cycle
// 3993     
// 3994     for(lu8_i=0;  lu8_i<ZTIME; lu8_i++)
        MOV       B, #0x0            ;; 1 cycle
        ; ------------------------------------- Block: 23 cycles
??tou_pssv_store_6:
        MOV       A, B               ;; 1 cycle
        CMP       A, #0x10           ;; 1 cycle
        BNC       ??dlms_reset_data_335  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 3995     {
// 3996       tou_a8pssv_zone_time[lu8_i]=0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_tou_a8pssv_zone_time)[B], A  ;; 1 cycle
// 3997     }
        INC       B                  ;; 1 cycle
        BR        S:??tou_pssv_store_6  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 3998     
// 3999     for(lu8_i=0;  lu8_i<ZTARIFF;  lu8_i++)
??dlms_reset_data_335:
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??tou_pssv_store_7:
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNC       ??dlms_reset_data_336  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4000     {
// 4001       tou_a8pssv_tariff[lu8_i]=0;
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_tou_a8pssv_tariff)[B], A  ;; 1 cycle
// 4002     }
        MOV       A, [SP+0x01]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        BR        S:??tou_pssv_store_7  ;; 3 cycles
        ; ------------------------------------- Block: 10 cycles
// 4003     //0                           //8(configured)           
// 4004     for(u8loop=tou_u8pssv_up_zone;  ((u8loop<tou_u8pssv_no_zone)&&(tou_u8pssv_buffer_traced));  u8loop++)
??dlms_reset_data_336:
        MOV       A, N:_tou_u8pssv_up_zone  ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??tou_pssv_store_8:
        MOV       A, [SP+0x02]       ;; 1 cycle
        CMP       A, N:_tou_u8pssv_no_zone  ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_337  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        CMP0      N:_tou_u8pssv_buffer_traced  ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_337  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4005     {
// 4006       if((info[u8index]==0x02)&&(info[u8index+1]==0x03)&&(info[u8index+2]==0x09)&&(info[u8index+3]==0x04)
// 4007          &&(info[u8index+4]<=23)&&(info[u8index+5]<=59)&&(info[u8index+6]<=59)
// 4008            &&(info[u8index+8]==0x09)&&(info[u8index+9]==0x06)&&(info[u8index+16]==0x12)&&(info[u8index+18]<=tou_u8pssv_no_zone))
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info)[B]      ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_338  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+1)[B]    ;; 1 cycle
        CMP       A, #0x3            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_338  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+2)[B]    ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_338  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+3)[B]    ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_338  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+4)[B]    ;; 1 cycle
        CMP       A, #0x18           ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_338  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+5)[B]    ;; 1 cycle
        CMP       A, #0x3C           ;; 1 cycle
        BNC       ??dlms_reset_data_338  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+6)[B]    ;; 1 cycle
        CMP       A, #0x3C           ;; 1 cycle
        BNC       ??dlms_reset_data_338  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+8)[B]    ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BNZ       ??dlms_reset_data_338  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+9)[B]    ;; 1 cycle
        CMP       A, #0x6            ;; 1 cycle
        BNZ       ??dlms_reset_data_338  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+16)[B]   ;; 1 cycle
        CMP       A, #0x12           ;; 1 cycle
        BNZ       ??dlms_reset_data_338  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       X, N:_tou_u8pssv_no_zone  ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+18)[B]   ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BC        ??dlms_reset_data_338  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 4009       {
// 4010         tou_a8pssv_zone_time[tou_u8pssv_ptr]=hex_to_bcd(info[u8index+4]);     //hour
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+4)[B]    ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       B, N:_tou_u8pssv_ptr  ;; 1 cycle
        MOV       (_tou_a8pssv_zone_time)[B], A  ;; 1 cycle
// 4011         tou_a8pssv_zone_time[tou_u8pssv_ptr+1]=hex_to_bcd(info[u8index+5]);   //min
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+5)[B]    ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       B, N:_tou_u8pssv_ptr  ;; 1 cycle
        MOV       (_tou_a8pssv_zone_time+1)[B], A  ;; 1 cycle
// 4012         tou_a8pssv_tariff[tou_u8pssv_up_zone]=info[u8index+18];               //tariff
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+18)[B]   ;; 1 cycle
        MOV       B, N:_tou_u8pssv_up_zone  ;; 1 cycle
        MOV       (_tou_a8pssv_tariff)[B], A  ;; 1 cycle
// 4013         tou_u8pssv_buffer_traced-=19;
        MOVW      HL, #LWRD(_tou_u8pssv_buffer_traced)  ;; 1 cycle
        MOV       A, [HL]            ;; 1 cycle
        ADD       A, #0xED           ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
// 4014         u8index+=19;
        MOV       A, [SP]            ;; 1 cycle
        ADD       A, #0x13           ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 4015         tou_u8pssv_ptr+=2;
        MOVW      HL, #LWRD(_tou_u8pssv_ptr)  ;; 1 cycle
        MOV       A, [HL]            ;; 1 cycle
        ADD       A, #0x2            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
// 4016         tou_u8pssv_up_zone++;
        INC       N:_tou_u8pssv_up_zone  ;; 2 cycles
// 4017       }
// 4018       else
// 4019       {
// 4020         conf_err(250);
// 4021         return 0;
// 4022       }
// 4023       
// 4024       if(((tou_u8pssv_buffer_traced<19)||(u8loop==(tou_u8pssv_no_zone-1)))&&(tou_u8pssv_buffer_traced!=0))
        MOV       A, N:_tou_u8pssv_buffer_traced  ;; 1 cycle
        CMP       A, #0x13           ;; 1 cycle
        BC        ??dlms_reset_data_339  ;; 4 cycles
        ; ------------------------------------- Block: 40 cycles
        BR        S:??dlms_reset_data_340  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
??dlms_reset_data_338:
        MOV       A, #0xFA           ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_321  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
??dlms_reset_data_340:
        MOV       C, N:_tou_u8pssv_no_zone  ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        DECW      BC                 ;; 1 cycle
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        CMPW      AX, BC             ;; 1 cycle
        BNZ       ??dlms_reset_data_341  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
??dlms_reset_data_339:
        CMP0      N:_tou_u8pssv_buffer_traced  ;; 1 cycle
        BZ        ??dlms_reset_data_341  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4025       {
// 4026         memcpy(info2,&info[u8index],tou_u8pssv_buffer_traced);
        MOV       C, N:_tou_u8pssv_buffer_traced  ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, #LWRD(_info)   ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      HL, #LWRD(_info2)  ;; 1 cycle
        MOVW      AX, BC             ;; 1 cycle
          CFI FunCall ?MEMCPY_NEAR
        CALL      N:?MEMCPY_NEAR     ;; 3 cycles
// 4027         if(u8loop==(tou_u8pssv_no_zone-1))
        MOV       C, N:_tou_u8pssv_no_zone  ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        DECW      BC                 ;; 1 cycle
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        CMPW      AX, BC             ;; 1 cycle
        BNZ       ??dlms_reset_data_337  ;; 4 cycles
        ; ------------------------------------- Block: 23 cycles
// 4028         {
// 4029           u8loop++;
        MOV       A, [SP+0x02]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
// 4030         }
// 4031         break;
        BR        S:??dlms_reset_data_337  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 4032       }
// 4033     }
??dlms_reset_data_341:
        MOV       A, [SP+0x02]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
        BR        N:??tou_pssv_store_8  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 4034     write_tod_data(u8loop);
??dlms_reset_data_337:
        MOV       A, [SP+0x02]       ;; 1 cycle
          CFI FunCall _write_tod_data
        CALL      _write_tod_data    ;; 3 cycles
// 4035     
// 4036     if((tou_u8pssv_no_days>1)&&(tou_u8pssv_buffer_traced>24))
        MOV       A, N:_tou_u8pssv_no_days  ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        SKNC                         ;; 4 cycles
        BR        N:??dlms_reset_data_342  ;; 4 cycles
        ; ------------------------------------- Block: 10 cycles
        MOV       A, N:_tou_u8pssv_buffer_traced  ;; 1 cycle
        CMP       A, #0x19           ;; 1 cycle
        SKNC                         ;; 4 cycles
        BR        N:??dlms_reset_data_342  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4037     {
// 4038       if((info[u8index]==0x02)&&(info[u8index+1]==0x02)&&(info[u8index+2]==0x11)&&(info[u8index+4]==0x01)&&(info[u8index+5]<=8))
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info)[B]      ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_342  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+1)[B]    ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_342  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+2)[B]    ;; 1 cycle
        CMP       A, #0x11           ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_342  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+4)[B]    ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_342  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+5)[B]    ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_342  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 4039       {
// 4040         tou_u8pssv_dayid=info[u8index+3];
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+3)[B]    ;; 1 cycle
        MOV       N:_tou_u8pssv_dayid, A  ;; 1 cycle
// 4041         tou_u8pssv_no_zone=info[u8index+5];
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+5)[B]    ;; 1 cycle
        MOV       N:_tou_u8pssv_no_zone, A  ;; 1 cycle
// 4042         tou_u8pssv_buffer_traced-=6;
        MOVW      HL, #LWRD(_tou_u8pssv_buffer_traced)  ;; 1 cycle
        MOV       A, [HL]            ;; 1 cycle
        ADD       A, #0xFA           ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
// 4043         u8index+=6;
        MOV       A, [SP]            ;; 1 cycle
        ADD       A, #0x6            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 4044         tou_u8pssv_ptr=0;
        MOV       N:_tou_u8pssv_ptr, #0x0  ;; 1 cycle
// 4045         tou_u8pssv_up_zone=0;
        MOV       N:_tou_u8pssv_up_zone, #0x0  ;; 1 cycle
// 4046         tou_u8pssv_day=1;
        MOV       N:_tou_u8pssv_day, #0x1  ;; 1 cycle
// 4047         
// 4048         for(lu8_i=0;  lu8_i<ZTIME; lu8_i++)
        MOV       B, #0x0            ;; 1 cycle
        ; ------------------------------------- Block: 19 cycles
??tou_pssv_store_9:
        MOV       A, B               ;; 1 cycle
        CMP       A, #0x10           ;; 1 cycle
        BNC       ??dlms_reset_data_343  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4049         {
// 4050           tou_a8pssv_zone_time[lu8_i]=0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_tou_a8pssv_zone_time)[B], A  ;; 1 cycle
// 4051         }
        INC       B                  ;; 1 cycle
        BR        S:??tou_pssv_store_9  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 4052         
// 4053         for(lu8_i=0;  lu8_i<ZTARIFF;  lu8_i++)
??dlms_reset_data_343:
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??tou_pssv_store_10:
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNC       ??dlms_reset_data_344  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4054         {
// 4055           tou_a8pssv_tariff[lu8_i]=0;
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_tou_a8pssv_tariff)[B], A  ;; 1 cycle
// 4056         }
        MOV       A, [SP+0x01]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        BR        S:??tou_pssv_store_10  ;; 3 cycles
        ; ------------------------------------- Block: 10 cycles
// 4057         
// 4058         for(u8loop=0; ((u8loop<tou_u8pssv_no_zone)&&(tou_u8pssv_buffer_traced));  u8loop++)
??dlms_reset_data_344:
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??tou_pssv_store_11:
        MOV       A, [SP+0x02]       ;; 1 cycle
        CMP       A, N:_tou_u8pssv_no_zone  ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_345  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        CMP0      N:_tou_u8pssv_buffer_traced  ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_345  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4059         {
// 4060           if((info[u8index]==0x02)&&(info[u8index+1]==0x03)&&(info[u8index+2]==0x09)&&(info[u8index+3]==0x04)
// 4061              &&(info[u8index+4]<=23)&&(info[u8index+5]<=59)&&(info[u8index+6]<=59)
// 4062                &&(info[u8index+8]==0x09)&&(info[u8index+9]==0x06)&&(info[u8index+16]==0x12)&&(info[u8index+18]<=tou_u8pssv_no_zone))
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info)[B]      ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_346  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+1)[B]    ;; 1 cycle
        CMP       A, #0x3            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_346  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+2)[B]    ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_346  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+3)[B]    ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_346  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+4)[B]    ;; 1 cycle
        CMP       A, #0x18           ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_346  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+5)[B]    ;; 1 cycle
        CMP       A, #0x3C           ;; 1 cycle
        BNC       ??dlms_reset_data_346  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+6)[B]    ;; 1 cycle
        CMP       A, #0x3C           ;; 1 cycle
        BNC       ??dlms_reset_data_346  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+8)[B]    ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BNZ       ??dlms_reset_data_346  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+9)[B]    ;; 1 cycle
        CMP       A, #0x6            ;; 1 cycle
        BNZ       ??dlms_reset_data_346  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+16)[B]   ;; 1 cycle
        CMP       A, #0x12           ;; 1 cycle
        BNZ       ??dlms_reset_data_346  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       X, N:_tou_u8pssv_no_zone  ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+18)[B]   ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BC        ??dlms_reset_data_346  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 4063           {
// 4064             tou_a8pssv_zone_time[tou_u8pssv_ptr]=hex_to_bcd(info[u8index+4]);   //hour
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+4)[B]    ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       B, N:_tou_u8pssv_ptr  ;; 1 cycle
        MOV       (_tou_a8pssv_zone_time)[B], A  ;; 1 cycle
// 4065             tou_a8pssv_zone_time[tou_u8pssv_ptr+1]=hex_to_bcd(info[u8index+5]); //min
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+5)[B]    ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       B, N:_tou_u8pssv_ptr  ;; 1 cycle
        MOV       (_tou_a8pssv_zone_time+1)[B], A  ;; 1 cycle
// 4066             tou_a8pssv_tariff[tou_u8pssv_up_zone]=info[u8index+18];             //tariff
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+18)[B]   ;; 1 cycle
        MOV       B, N:_tou_u8pssv_up_zone  ;; 1 cycle
        MOV       (_tou_a8pssv_tariff)[B], A  ;; 1 cycle
// 4067             tou_u8pssv_buffer_traced-=19;
        MOVW      HL, #LWRD(_tou_u8pssv_buffer_traced)  ;; 1 cycle
        MOV       A, [HL]            ;; 1 cycle
        ADD       A, #0xED           ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
// 4068             u8index+=19;
        MOV       A, [SP]            ;; 1 cycle
        ADD       A, #0x13           ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 4069             tou_u8pssv_ptr+=2;
        MOVW      HL, #LWRD(_tou_u8pssv_ptr)  ;; 1 cycle
        MOV       A, [HL]            ;; 1 cycle
        ADD       A, #0x2            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
// 4070             tou_u8pssv_up_zone++;
        INC       N:_tou_u8pssv_up_zone  ;; 2 cycles
// 4071           }
// 4072           else
// 4073           {
// 4074             conf_err(250);
// 4075             return 0;
// 4076           }
// 4077           
// 4078           if((tou_u8pssv_buffer_traced<19)&&(tou_u8pssv_buffer_traced!=0))
        MOV       A, N:_tou_u8pssv_buffer_traced  ;; 1 cycle
        CMP       A, #0x13           ;; 1 cycle
        BNC       ??dlms_reset_data_347  ;; 4 cycles
        ; ------------------------------------- Block: 40 cycles
        BR        S:??dlms_reset_data_348  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
??dlms_reset_data_346:
        MOV       A, #0xFA           ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_321  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
??dlms_reset_data_348:
        CMP0      N:_tou_u8pssv_buffer_traced  ;; 1 cycle
        BZ        ??dlms_reset_data_347  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4079           {
// 4080             memcpy(&info2,&info[u8index],tou_u8pssv_buffer_traced);
        MOV       C, N:_tou_u8pssv_buffer_traced  ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, #LWRD(_info)   ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      HL, #LWRD(_info2)  ;; 1 cycle
        MOVW      AX, BC             ;; 1 cycle
          CFI FunCall ?MEMCPY_NEAR
        CALL      N:?MEMCPY_NEAR     ;; 3 cycles
// 4081             break;
        BR        S:??dlms_reset_data_345  ;; 3 cycles
        ; ------------------------------------- Block: 15 cycles
// 4082           }
// 4083         }
??dlms_reset_data_347:
        MOV       A, [SP+0x02]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
        BR        N:??tou_pssv_store_11  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 4084         write_tod_data(u8loop);
??dlms_reset_data_345:
        MOV       A, [SP+0x02]       ;; 1 cycle
          CFI FunCall _write_tod_data
        CALL      _write_tod_data    ;; 3 cycles
        BR        N:??dlms_reset_data_342  ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 4085       }
// 4086     }
// 4087   }
// 4088   else if((info[4]==0x03)&&(info[10]>0x01)&&(tou_u8pssv_no_zone<=8))
??dlms_reset_data_334:
        CMP       N:_info+4, #0x3    ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_349  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOV       A, N:_info+10      ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        SKNC                         ;; 4 cycles
        BR        N:??dlms_reset_data_349  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_tou_u8pssv_no_zone  ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_349  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4089   { //in normal tod(if zone>=6) then 6-8 entry will saved from here      
// 4090     block_no=info[10];
        MOV       X, N:_info+10      ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      N:_block_no, AX    ;; 1 cycle
// 4091     last_block=info[6];
        MOV       A, N:_info+6       ;; 1 cycle
        MOV       N:_last_block, A   ;; 1 cycle
// 4092     
// 4093     memcpy(&info2[tou_u8pssv_buffer_traced],&info[12],info[11]);
        MOV       C, N:_info+11      ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #LWRD(_info+12)  ;; 1 cycle
        MOV       X, N:_tou_u8pssv_buffer_traced  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, #LWRD(_info2)  ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, BC             ;; 1 cycle
          CFI FunCall ?MEMCPY_NEAR
        CALL      N:?MEMCPY_NEAR     ;; 3 cycles
// 4094     tou_u8pssv_buffer_traced+=info[11];
        MOV       A, N:_info+11      ;; 1 cycle
        MOVW      HL, #LWRD(_tou_u8pssv_buffer_traced)  ;; 1 cycle
        ADD       A, [HL]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
// 4095     u8index=0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 4096     
// 4097     for(u8loop=tou_u8pssv_up_zone;  ((u8loop<tou_u8pssv_no_zone)&&(tou_u8pssv_buffer_traced));  u8loop++)
        MOV       A, N:_tou_u8pssv_up_zone  ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
        ; ------------------------------------- Block: 24 cycles
??tou_pssv_store_12:
        MOV       A, [SP+0x02]       ;; 1 cycle
        CMP       A, N:_tou_u8pssv_no_zone  ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_350  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        CMP0      N:_tou_u8pssv_buffer_traced  ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_350  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4098     {
// 4099       if((info2[u8index]==0x02)&&(info2[u8index+1]==0x03)&&(info2[u8index+2]==0x09)&&(info2[u8index+3]==0x04)
// 4100          &&(info2[u8index+4]<=23)&&(info2[u8index+5]<=59)&&(info2[u8index+6]<=59)
// 4101            &&(info2[u8index+8]==0x09)&&(info2[u8index+9]==0x06)&&(info2[u8index+16]==0x12)&&(info2[u8index+18]<=tou_u8pssv_no_zone))
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2)[B]     ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_351  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+1)[B]   ;; 1 cycle
        CMP       A, #0x3            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_351  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+2)[B]   ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_351  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+3)[B]   ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_351  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+4)[B]   ;; 1 cycle
        CMP       A, #0x18           ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_351  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+5)[B]   ;; 1 cycle
        CMP       A, #0x3C           ;; 1 cycle
        BNC       ??dlms_reset_data_351  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+6)[B]   ;; 1 cycle
        CMP       A, #0x3C           ;; 1 cycle
        BNC       ??dlms_reset_data_351  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+8)[B]   ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BNZ       ??dlms_reset_data_351  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+9)[B]   ;; 1 cycle
        CMP       A, #0x6            ;; 1 cycle
        BNZ       ??dlms_reset_data_351  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+16)[B]  ;; 1 cycle
        CMP       A, #0x12           ;; 1 cycle
        BNZ       ??dlms_reset_data_351  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       X, N:_tou_u8pssv_no_zone  ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+18)[B]  ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BC        ??dlms_reset_data_351  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 4102         
// 4103       {
// 4104         tou_a8pssv_zone_time[tou_u8pssv_ptr]=hex_to_bcd(info2[u8index+4]);    //hour
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+4)[B]   ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       B, N:_tou_u8pssv_ptr  ;; 1 cycle
        MOV       (_tou_a8pssv_zone_time)[B], A  ;; 1 cycle
// 4105         tou_a8pssv_zone_time[tou_u8pssv_ptr+1]=hex_to_bcd(info2[u8index+5]);  //min
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+5)[B]   ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       B, N:_tou_u8pssv_ptr  ;; 1 cycle
        MOV       (_tou_a8pssv_zone_time+1)[B], A  ;; 1 cycle
// 4106         tou_a8pssv_tariff[tou_u8pssv_up_zone]=info2[u8index+18];              //tariff
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+18)[B]  ;; 1 cycle
        MOV       B, N:_tou_u8pssv_up_zone  ;; 1 cycle
        MOV       (_tou_a8pssv_tariff)[B], A  ;; 1 cycle
// 4107         tou_u8pssv_buffer_traced-=19;
        MOVW      HL, #LWRD(_tou_u8pssv_buffer_traced)  ;; 1 cycle
        MOV       A, [HL]            ;; 1 cycle
        ADD       A, #0xED           ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
// 4108         u8index+=19;
        MOV       A, [SP]            ;; 1 cycle
        ADD       A, #0x13           ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 4109         tou_u8pssv_ptr+=2;
        MOVW      HL, #LWRD(_tou_u8pssv_ptr)  ;; 1 cycle
        MOV       A, [HL]            ;; 1 cycle
        ADD       A, #0x2            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
// 4110         tou_u8pssv_up_zone++;
        INC       N:_tou_u8pssv_up_zone  ;; 2 cycles
// 4111       }
// 4112       else
// 4113       {
// 4114         conf_err(250);
// 4115         return 0;
// 4116       }
// 4117       
// 4118       if(((tou_u8pssv_buffer_traced<19)||(u8loop==(tou_u8pssv_no_zone-1)))&&(tou_u8pssv_buffer_traced!=0))
        MOV       A, N:_tou_u8pssv_buffer_traced  ;; 1 cycle
        CMP       A, #0x13           ;; 1 cycle
        BC        ??dlms_reset_data_352  ;; 4 cycles
        ; ------------------------------------- Block: 40 cycles
        BR        S:??dlms_reset_data_353  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
??dlms_reset_data_351:
        MOV       A, #0xFA           ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_321  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
??dlms_reset_data_353:
        MOV       C, N:_tou_u8pssv_no_zone  ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        DECW      BC                 ;; 1 cycle
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        CMPW      AX, BC             ;; 1 cycle
        BNZ       ??dlms_reset_data_354  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
??dlms_reset_data_352:
        CMP0      N:_tou_u8pssv_buffer_traced  ;; 1 cycle
        BZ        ??dlms_reset_data_354  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4119       {
// 4120         memcpy(&info2,&info2[u8index],tou_u8pssv_buffer_traced);
        MOV       C, N:_tou_u8pssv_buffer_traced  ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, #LWRD(_info2)  ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      HL, #LWRD(_info2)  ;; 1 cycle
        MOVW      AX, BC             ;; 1 cycle
          CFI FunCall ?MEMCPY_NEAR
        CALL      N:?MEMCPY_NEAR     ;; 3 cycles
// 4121         if(u8loop==(tou_u8pssv_no_zone-1))
        MOV       C, N:_tou_u8pssv_no_zone  ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        DECW      BC                 ;; 1 cycle
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        CMPW      AX, BC             ;; 1 cycle
        BNZ       ??dlms_reset_data_350  ;; 4 cycles
        ; ------------------------------------- Block: 23 cycles
// 4122         {
// 4123           u8loop++;
        MOV       A, [SP+0x02]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
// 4124         }
// 4125         break;
        BR        S:??dlms_reset_data_350  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 4126       }
// 4127     }
??dlms_reset_data_354:
        MOV       A, [SP+0x02]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
        BR        N:??tou_pssv_store_12  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 4128     write_tod_data(u8loop);
??dlms_reset_data_350:
        MOV       A, [SP+0x02]       ;; 1 cycle
          CFI FunCall _write_tod_data
        CALL      _write_tod_data    ;; 3 cycles
// 4129     
// 4130     if((tou_u8pssv_no_days>1)&&(tou_u8pssv_buffer_traced>24))
        MOV       A, N:_tou_u8pssv_no_days  ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        SKNC                         ;; 4 cycles
        BR        N:??dlms_reset_data_342  ;; 4 cycles
        ; ------------------------------------- Block: 10 cycles
        MOV       A, N:_tou_u8pssv_buffer_traced  ;; 1 cycle
        CMP       A, #0x19           ;; 1 cycle
        SKNC                         ;; 4 cycles
        BR        N:??dlms_reset_data_342  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4131     {
// 4132       if((info2[u8index]==0x02)&&(info2[u8index+1]==0x02)&&(info2[u8index+2]==0x11)&&(info2[u8index+4]==0x01)&&(info2[u8index+5]<=8))
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2)[B]     ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_342  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+1)[B]   ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_342  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+2)[B]   ;; 1 cycle
        CMP       A, #0x11           ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_342  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+4)[B]   ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_342  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+5)[B]   ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_342  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 4133       {//for seasonal tod;and for 2nd season
// 4134         tou_u8pssv_dayid=info2[u8index+3];
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+3)[B]   ;; 1 cycle
        MOV       N:_tou_u8pssv_dayid, A  ;; 1 cycle
// 4135         tou_u8pssv_no_zone=info2[u8index+5];
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+5)[B]   ;; 1 cycle
        MOV       N:_tou_u8pssv_no_zone, A  ;; 1 cycle
// 4136         tou_u8pssv_buffer_traced-=6;
        MOVW      HL, #LWRD(_tou_u8pssv_buffer_traced)  ;; 1 cycle
        MOV       A, [HL]            ;; 1 cycle
        ADD       A, #0xFA           ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
// 4137         u8index+=6;
        MOV       A, [SP]            ;; 1 cycle
        ADD       A, #0x6            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 4138         tou_u8pssv_ptr=0;
        MOV       N:_tou_u8pssv_ptr, #0x0  ;; 1 cycle
// 4139         tou_u8pssv_up_zone=0;
        MOV       N:_tou_u8pssv_up_zone, #0x0  ;; 1 cycle
// 4140         tou_u8pssv_day++;
        INC       N:_tou_u8pssv_day  ;; 2 cycles
// 4141         
// 4142         for(lu8_i=0;  lu8_i<ZTIME;  lu8_i++)
        MOV       A, #0x0            ;; 1 cycle
        ; ------------------------------------- Block: 20 cycles
??tou_pssv_store_13:
        CMP       A, #0x10           ;; 1 cycle
        BNC       ??dlms_reset_data_355  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4143         {
// 4144           tou_a8pssv_zone_time[lu8_i]=0;
        MOV       B, A               ;; 1 cycle
        MOV       X, #0x0            ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_tou_a8pssv_zone_time)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 4145         }
        INC       A                  ;; 1 cycle
        BR        S:??tou_pssv_store_13  ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 4146         
// 4147         for(lu8_i=0;  lu8_i<ZTARIFF;  lu8_i++)
??dlms_reset_data_355:
        MOV       X, #0x0            ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
??tou_pssv_store_14:
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNC       ??dlms_reset_data_356  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4148         {
// 4149           tou_a8pssv_tariff[lu8_i]=0;
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_tou_a8pssv_tariff)[B], A  ;; 1 cycle
// 4150         }
        MOV       A, [SP+0x01]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        BR        S:??tou_pssv_store_14  ;; 3 cycles
        ; ------------------------------------- Block: 10 cycles
// 4151         
// 4152         for(u8loop=0; ((u8loop<tou_u8pssv_no_zone)&&(tou_u8pssv_buffer_traced));  u8loop++)
??dlms_reset_data_356:
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??tou_pssv_store_15:
        MOV       A, [SP+0x02]       ;; 1 cycle
        CMP       A, N:_tou_u8pssv_no_zone  ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_357  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        CMP0      N:_tou_u8pssv_buffer_traced  ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_357  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4153         {   
// 4154           if((info2[u8index]==0x02)&&(info2[u8index+1]==0x03)&&(info2[u8index+2]==0x09)&&(info2[u8index+3]==0x04)
// 4155              &&(info2[u8index+4]<=23)&&(info2[u8index+5]<=59)&&(info2[u8index+6]<=59)
// 4156                &&(info2[u8index+8]==0x09)&&(info2[u8index+9]==0x06)&&(info2[u8index+16]==0x12)&&(info2[u8index+18]<=tou_u8pssv_no_zone))
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2)[B]     ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_358  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+1)[B]   ;; 1 cycle
        CMP       A, #0x3            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_358  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+2)[B]   ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_358  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+3)[B]   ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_358  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+4)[B]   ;; 1 cycle
        CMP       A, #0x18           ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_358  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+5)[B]   ;; 1 cycle
        CMP       A, #0x3C           ;; 1 cycle
        BNC       ??dlms_reset_data_358  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+6)[B]   ;; 1 cycle
        CMP       A, #0x3C           ;; 1 cycle
        BNC       ??dlms_reset_data_358  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+8)[B]   ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BNZ       ??dlms_reset_data_358  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+9)[B]   ;; 1 cycle
        CMP       A, #0x6            ;; 1 cycle
        BNZ       ??dlms_reset_data_358  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+16)[B]  ;; 1 cycle
        CMP       A, #0x12           ;; 1 cycle
        BNZ       ??dlms_reset_data_358  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       X, N:_tou_u8pssv_no_zone  ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+18)[B]  ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BC        ??dlms_reset_data_358  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 4157           {
// 4158             tou_a8pssv_zone_time[tou_u8pssv_ptr]=hex_to_bcd(info2[u8index+4]);    //hour
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+4)[B]   ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       B, N:_tou_u8pssv_ptr  ;; 1 cycle
        MOV       (_tou_a8pssv_zone_time)[B], A  ;; 1 cycle
// 4159             tou_a8pssv_zone_time[tou_u8pssv_ptr+1]=hex_to_bcd(info2[u8index+5]);  //min
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+5)[B]   ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       B, N:_tou_u8pssv_ptr  ;; 1 cycle
        MOV       (_tou_a8pssv_zone_time+1)[B], A  ;; 1 cycle
// 4160             tou_a8pssv_tariff[tou_u8pssv_up_zone]=info2[u8index+18];              //tariff
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info2+18)[B]  ;; 1 cycle
        MOV       B, N:_tou_u8pssv_up_zone  ;; 1 cycle
        MOV       (_tou_a8pssv_tariff)[B], A  ;; 1 cycle
// 4161             tou_u8pssv_buffer_traced-=19;
        MOVW      HL, #LWRD(_tou_u8pssv_buffer_traced)  ;; 1 cycle
        MOV       A, [HL]            ;; 1 cycle
        ADD       A, #0xED           ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
// 4162             u8index+=19;
        MOV       A, [SP]            ;; 1 cycle
        ADD       A, #0x13           ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 4163             tou_u8pssv_ptr+=2;
        MOVW      HL, #LWRD(_tou_u8pssv_ptr)  ;; 1 cycle
        MOV       A, [HL]            ;; 1 cycle
        ADD       A, #0x2            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
// 4164             tou_u8pssv_up_zone++;
        INC       N:_tou_u8pssv_up_zone  ;; 2 cycles
// 4165           }
// 4166           else
// 4167           {
// 4168             conf_err(250);
// 4169             return 0;
// 4170           }
// 4171           
// 4172           if((tou_u8pssv_buffer_traced<19)&&(tou_u8pssv_buffer_traced!=0))
        MOV       A, N:_tou_u8pssv_buffer_traced  ;; 1 cycle
        CMP       A, #0x13           ;; 1 cycle
        BNC       ??dlms_reset_data_359  ;; 4 cycles
        ; ------------------------------------- Block: 40 cycles
        BR        S:??dlms_reset_data_360  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
??dlms_reset_data_358:
        MOV       A, #0xFA           ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
        MOV       A, #0x0            ;; 1 cycle
        BR        S:??dlms_reset_data_321  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
??dlms_reset_data_360:
        CMP0      N:_tou_u8pssv_buffer_traced  ;; 1 cycle
        BZ        ??dlms_reset_data_359  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4173           {
// 4174             memcpy(&info2,&info2[u8index],tou_u8pssv_buffer_traced);
        MOV       C, N:_tou_u8pssv_buffer_traced  ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, #LWRD(_info2)  ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      HL, #LWRD(_info2)  ;; 1 cycle
        MOVW      AX, BC             ;; 1 cycle
          CFI FunCall ?MEMCPY_NEAR
        CALL      N:?MEMCPY_NEAR     ;; 3 cycles
// 4175             break;
        BR        S:??dlms_reset_data_357  ;; 3 cycles
        ; ------------------------------------- Block: 15 cycles
// 4176           }
// 4177         }
??dlms_reset_data_359:
        MOV       A, [SP+0x02]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
        BR        N:??tou_pssv_store_15  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 4178         
// 4179         write_tod_data(u8loop);				
??dlms_reset_data_357:
        MOV       A, [SP+0x02]       ;; 1 cycle
          CFI FunCall _write_tod_data
        CALL      _write_tod_data    ;; 3 cycles
        BR        S:??dlms_reset_data_342  ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 4180       }
// 4181     }		
// 4182   }
// 4183   else
// 4184   {
// 4185     conf_err(250);
??dlms_reset_data_349:
        MOV       A, #0xFA           ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 4186     return 0;
        MOV       A, #0x0            ;; 1 cycle
        BR        S:??dlms_reset_data_321  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 4187   }
// 4188   
// 4189   return (2);
??dlms_reset_data_342:
        MOV       A, #0x2            ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??dlms_reset_data_321:
        ADDW      SP, #0xA           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock52
        ; ------------------------------------- Block: 7 cycles
        ; ------------------------------------- Total: 1792 cycles
// 4190 }
// 4191 
// 4192 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock53 Using cfiCommon1
          CFI Function _isdatevalid
          CFI NoCalls
        CODE
// 4193 us16 isdatevalid(us16 month, us16 day, us16 year)
// 4194 {
_isdatevalid:
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        ; Auto size: 4
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+10
        POP       BC                 ;; 1 cycle
          CFI CFA SP+8
// 4195   if(!((year >= 2010) && (year <= 2050)))
        XCHW      AX, BC             ;; 1 cycle
        CMPW      AX, #0x7DA         ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        BC        ??dlms_reset_data_361  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
        XCHW      AX, BC             ;; 1 cycle
        CMPW      AX, #0x803         ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        BC        ??dlms_reset_data_362  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 4196   {
// 4197     return (0);
??dlms_reset_data_361:
        MOVW      AX, #0x0           ;; 1 cycle
        BR        S:??dlms_reset_data_363  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 4198   }
// 4199   
// 4200   if(day <= 0)
??dlms_reset_data_362:
        MOVW      AX, [SP]           ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        BNZ       ??dlms_reset_data_364  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4201   {
// 4202     return (0);
        MOVW      AX, #0x0           ;; 1 cycle
        BR        S:??dlms_reset_data_363  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 4203   }
// 4204   
// 4205   switch(month)
??dlms_reset_data_364:
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      HL, #LWRD(??isdatevalid_0)  ;; 1 cycle
        MOV       ES, #BYTE3(??isdatevalid_0)  ;; 1 cycle
        MOV       CS, #BYTE3(_isdatevalid)  ;; 1 cycle
        BR        N:?I_SSWITCH_L10   ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 4206   {
// 4207   case 1:
// 4208   case 3:
// 4209   case 5:
// 4210   case 7:
// 4211   case 8:
// 4212   case 10:
// 4213   case 12:
// 4214     if(day > 31)
??isdatevalid_1:
        MOVW      AX, [SP]           ;; 1 cycle
        CMPW      AX, #0x20          ;; 1 cycle
        CLRW      AX                 ;; 1 cycle
        BNC       ??dlms_reset_data_363  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        ONEW      AX                 ;; 1 cycle
// 4215     {
// 4216       return (0);
        BR        S:??dlms_reset_data_363  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 4217     }
// 4218     else
// 4219     {
// 4220       return (1);
// 4221     }
// 4222     
// 4223     break;
// 4224     
// 4225   case 4:
// 4226   case 6:
// 4227   case 9:
// 4228   case 11:
// 4229     if(day > 30)
??isdatevalid_2:
        MOVW      AX, [SP]           ;; 1 cycle
        CMPW      AX, #0x1F          ;; 1 cycle
        CLRW      AX                 ;; 1 cycle
        BNC       ??dlms_reset_data_363  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        ONEW      AX                 ;; 1 cycle
// 4230     {
// 4231       return (0);
        BR        S:??dlms_reset_data_363  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 4232     }
// 4233     else
// 4234     {
// 4235       return (1);
// 4236     }
// 4237     
// 4238     break;
// 4239     
// 4240   case 2:
// 4241     if(day > 29)
??isdatevalid_3:
        MOVW      AX, [SP]           ;; 1 cycle
        CMPW      AX, #0x1E          ;; 1 cycle
        BC        ??dlms_reset_data_365  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4242     {
// 4243       return (0);
        MOVW      AX, #0x0           ;; 1 cycle
        BR        S:??dlms_reset_data_363  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 4244     }
// 4245     
// 4246     if(day < 29)
??dlms_reset_data_365:
        MOVW      AX, [SP]           ;; 1 cycle
        CMPW      AX, #0x1D          ;; 1 cycle
        BNC       ??dlms_reset_data_366  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4247     {
// 4248       return (1);
        MOVW      AX, #0x1           ;; 1 cycle
        BR        S:??dlms_reset_data_363  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 4249     }
// 4250     
// 4251     if(isleapyear(year))
??dlms_reset_data_366:
        MOV       A, C               ;; 1 cycle
        AND       A, #0x3            ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_367  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      DE, #0x64          ;; 1 cycle
        MOVW      AX, BC             ;; 1 cycle
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        XCHW      AX, DE             ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        XCHW      AX, DE             ;; 1 cycle
        BNZ       ??dlms_reset_data_368  ;; 4 cycles
        ; ------------------------------------- Block: 19 cycles
??dlms_reset_data_367:
        MOVW      DE, #0x190         ;; 1 cycle
        MOVW      AX, BC             ;; 1 cycle
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        XCHW      AX, DE             ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        XCHW      AX, DE             ;; 1 cycle
        BNZ       ??dlms_reset_data_369  ;; 4 cycles
        ; ------------------------------------- Block: 19 cycles
// 4252     {
// 4253       return (1); /* leap year */
??dlms_reset_data_368:
        MOVW      AX, #0x1           ;; 1 cycle
        BR        S:??dlms_reset_data_363  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 4254     }
// 4255     else
// 4256     {
// 4257       return (0);
??dlms_reset_data_369:
        MOVW      AX, #0x0           ;; 1 cycle
        BR        S:??dlms_reset_data_363  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 4258     }
// 4259     
// 4260     break;
// 4261   default:
// 4262     break;
// 4263   }
// 4264   return (0);
??isdatevalid_4:
        MOVW      AX, #0x0           ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??dlms_reset_data_363:
        ADDW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock53
        ; ------------------------------------- Block: 7 cycles
        ; ------------------------------------- Total: 142 cycles
// 4265 }
// 4266 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock54 Using cfiCommon0
          CFI Function _genus_week
        CODE
// 4267 void genus_week(void)
// 4268 {
_genus_week:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 4269   us8 lu8_i;
// 4270   
// 4271   array(1,1);
        MOV       X, #0x1            ;; 1 cycle
        MOV       A, #0x1            ;; 1 cycle
          CFI FunCall _array
        CALL      _array             ;; 3 cycles
// 4272   structure(0x08);
        MOV       A, #0x8            ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 4273   
// 4274   /* struct_element_1 */
// 4275   octet_s(0x0A,0);                              /* week_name(octet_string) */ /* length of string(10 bytes) */
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0xA            ;; 1 cycle
          CFI FunCall _octet_s
        CALL      _octet_s           ;; 3 cycles
// 4276   info[k++]= 'G';                               /* season_profile_name[0] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x47           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4277   info[k++]= 'E';                               /* season_profile_name[1] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x45           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4278   info[k++]= 'N';                               /* season_profile_name[2] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x4E           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4279   info[k++]= 'U';                               /* season_profile_name[3] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x55           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4280   info[k++]= 'S';                               /* season_profile_name[4] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x53           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4281   info[k++]= 'W';                               /* season_profile_name[5] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x57           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4282   info[k++]= 'E';                               /* season_profile_name[6] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x45           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4283   info[k++]= 'E';                               /* season_profile_name[7] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x45           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4284   info[k++]= 'K';                               /* season_profile_name[8] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x4B           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4285   info[k++]= '1';                               /* season_profile_name[9] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x31           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4286   
// 4287   for(lu8_i=0;  lu8_i<7;  lu8_i++)             /* struct_element_2/3/4/5/6/7/8 */
        MOV       A, #0x0            ;; 1 cycle
        ; ------------------------------------- Block: 65 cycles
??genus_week_0:
        CMP       A, #0x7            ;; 1 cycle
        BNC       ??dlms_reset_data_370  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4288   {
// 4289     info[k++]=0x11;                            /* monday_id/tuesday_id/........sunday_id(unsigned) */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       X, #0x11           ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4290     info[k++]=0x01;                            /* day_id */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       X, #0x1            ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4291   }
        INC       A                  ;; 1 cycle
        BR        S:??genus_week_0   ;; 3 cycles
        ; ------------------------------------- Block: 18 cycles
// 4292   info_total= k;
??dlms_reset_data_370:
        MOVW      HL, N:_k           ;; 1 cycle
        XCHW      AX, HL             ;; 1 cycle
        MOVW      N:_info_total, AX  ;; 1 cycle
        XCHW      AX, HL             ;; 1 cycle
// 4293 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock54
        ; ------------------------------------- Block: 10 cycles
        ; ------------------------------------- Total: 98 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock55 Using cfiCommon0
          CFI Function _conf_ser
          CFI NoCalls
        CODE
// 4294 void conf_ser(unsigned char len)
// 4295 {
_conf_ser:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 4296   asserr_flag= 1;
        MOV       N:_asserr_flag, #0x1  ;; 1 cycle
// 4297   conf_ser_flag= 1;
        MOV       N:_conf_ser_flag, #0x1  ;; 1 cycle
// 4298   conf_serror_flag= 0x01;
        MOV       N:_conf_serror_flag, #0x1  ;; 1 cycle
// 4299   conf_err_flag= 0x06;
        MOV       N:_conf_err_flag, #0x6  ;; 1 cycle
// 4300   conf_type_flag= len;
        MOV       N:_conf_type_flag, A  ;; 1 cycle
// 4301 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock55
        ; ------------------------------------- Block: 11 cycles
        ; ------------------------------------- Total: 11 cycles
// 4302 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock56 Using cfiCommon0
          CFI Function _conf_err
          CFI NoCalls
        CODE
// 4303 void conf_err(unsigned char len)
// 4304 {
_conf_err:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 4305   conf_err_flag= 0x01;
        MOV       N:_conf_err_flag, #0x1  ;; 1 cycle
// 4306   conf_type_flag= len;
        MOV       N:_conf_type_flag, A  ;; 1 cycle
// 4307 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock56
        ; ------------------------------------- Block: 8 cycles
        ; ------------------------------------- Total: 8 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock57 Using cfiCommon0
          CFI Function _genus_sea
        CODE
// 4308 void genus_sea(void)
// 4309 {
_genus_sea:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 4310   array(1,1);
        MOV       X, #0x1            ;; 1 cycle
        MOV       A, #0x1            ;; 1 cycle
          CFI FunCall _array
        CALL      _array             ;; 3 cycles
// 4311   structure(0x03);
        MOV       A, #0x3            ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 4312   
// 4313   octet_s(0x0A,0); /* season_profile_name(octet_string) */ /* length of string(10 bytes) */
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0xA            ;; 1 cycle
          CFI FunCall _octet_s
        CALL      _octet_s           ;; 3 cycles
// 4314   info[k++]= 'G';  /* season_profile_name[0] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x47           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4315   info[k++]= 'E';  /* season_profile_name[1] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x45           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4316   info[k++]= 'N';  /* season_profile_name[2] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x4E           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4317   info[k++]= 'U';  /* season_profile_name[3] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x55           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4318   info[k++]= 'S';  /* season_profile_name[4] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x53           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4319   info[k++]= 'S';  /* season_profile_name[5] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x53           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4320   info[k++]= 'E';  /* season_profile_name[6] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x45           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4321   info[k++]= 'A';  /* season_profile_name[7] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x41           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4322   info[k++]= '_';  /* season_profile_name[8] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x5F           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4323   info[k++]= '1';  /* season_profile_name[9] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x31           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4324   
// 4325   octet_s(0x0C,0);
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _octet_s
        CALL      _octet_s           ;; 3 cycles
// 4326   info[k++]= 0xFF; /* year high byte */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xFF           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4327   info[k++]= 0xFF; /* year low byte */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xFF           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4328   info[k++]= 0xFF; /* month */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xFF           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4329   info[k++]= 0xFF; /* date */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xFF           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4330   info[k++]= 0xFF; /* day of week */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xFF           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4331   info[k++]= 0x00; /* hour */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4332   info[k++]= 0x00; /* minute */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4333   info[k++]= 0x00; /* seconds */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4334   info[k++]= 0x00; /* hunderdths of seconds(not specified) */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4335   info[k++]= 0x80; /* deviation high byte(not specified) */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x80           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4336   info[k++]= 0x00; /* deviation low byte(not specified) */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4337   info[k++]= 0x00; /* clock_status(ok) */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4338   
// 4339   octet_s(0x0A,0);
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0xA            ;; 1 cycle
          CFI FunCall _octet_s
        CALL      _octet_s           ;; 3 cycles
// 4340   info[k++]= 'G';  /* season_profile_name[0] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x47           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4341   info[k++]= 'E';  /* season_profile_name[1] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x45           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4342   info[k++]= 'N';  /* season_profile_name[2] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x4E           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4343   info[k++]= 'U';  /* season_profile_name[3] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x55           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4344   info[k++]= 'S';  /* season_profile_name[4] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x53           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4345   info[k++]= 'W';  /* season_profile_name[5] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x57           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4346   info[k++]= 'E';  /* season_profile_name[6] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x45           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4347   info[k++]= 'E';  /* season_profile_name[7] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x45           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4348   info[k++]= 'K';  /* season_profile_name[8] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x4B           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4349   info[k++]= '1';  /* season_profile_name[9] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x31           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4350   info_total= k;
        MOVW      AX, N:_k           ;; 1 cycle
        MOVW      N:_info_total, AX  ;; 1 cycle
// 4351 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock57
        ; ------------------------------------- Block: 192 cycles
        ; ------------------------------------- Total: 192 cycles
// 4352 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock58 Using cfiCommon2
          CFI Function _load_date
        CODE
// 4353 void load_date(us8 dd, us8 mm, us8 yy, us8 dofw)
// 4354 {
_load_date:
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        ; Auto size: 6
        SUBW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+10
// 4355   uint16_t uint_temp;
// 4356   if(yy == 0xFF)
        MOV       A, [SP+0x02]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_371  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 4357   {
// 4358     info[k] = 0xFF;                                         /* year high byte */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xFF           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
// 4359     info[k+1]= 0xFF;                                        /* year high byte */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xFF           ;; 1 cycle
        MOV       (_info+1)[BC], A   ;; 1 cycle
        BR        S:??dlms_reset_data_372  ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 4360   }
// 4361   else
// 4362   {
// 4363     uint_temp = bcd_to_decimal(yy) + 2000;                  /* Hex 2000 ((yy/16)*10)+(yy%16) */
??dlms_reset_data_371:
        MOV       A, [SP+0x02]       ;; 1 cycle
          CFI FunCall _bcd_to_decimal
        CALL      _bcd_to_decimal    ;; 3 cycles
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, #0x7D0         ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
// 4364     info[k]= highByte(uint_temp);                           /* year high byte */
        MOVW      AX, [SP]           ;; 1 cycle
        CLRB      X                  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
// 4365     info[k+1]= lowByte(uint_temp);                          /* year high byte */
        MOVW      AX, [SP]           ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+1)[BC], A   ;; 1 cycle
        ; ------------------------------------- Block: 18 cycles
// 4366   }
// 4367   if(mm == 0xFF)
??dlms_reset_data_372:
        MOV       A, [SP+0x04]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_373  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4368   {
// 4369     info[k+2] = 0xFF;                                        /* month */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xFF           ;; 1 cycle
        MOV       (_info+2)[BC], A   ;; 1 cycle
        BR        S:??dlms_reset_data_374  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 4370   }
// 4371   else
// 4372   {
// 4373     info[k+2] = bcd_to_decimal(mm);         
??dlms_reset_data_373:
        MOV       A, [SP+0x04]       ;; 1 cycle
          CFI FunCall _bcd_to_decimal
        CALL      _bcd_to_decimal    ;; 3 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+2)[BC], A   ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
// 4374   }
// 4375   if(dd == 0xFF)
??dlms_reset_data_374:
        MOV       A, [SP+0x05]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_375  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4376   {
// 4377     info[k+3]= 0xFF;                                        /* date */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xFF           ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
        BR        S:??dlms_reset_data_376  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 4378   }
// 4379   else
// 4380   {
// 4381     info[k+3]= bcd_to_decimal(dd); 
??dlms_reset_data_375:
        MOV       A, [SP+0x05]       ;; 1 cycle
          CFI FunCall _bcd_to_decimal
        CALL      _bcd_to_decimal    ;; 3 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
// 4382   }
// 4383   info[k + 4]= dofw;                                          /* day of week */
??dlms_reset_data_376:
        MOV       A, [SP+0x03]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+4)[BC], A   ;; 1 cycle
// 4384   info_l5();
          CFI FunCall _info_l5
        CALL      _info_l5           ;; 3 cycles
// 4385 }
        ADDW      SP, #0x6           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock58
        ; ------------------------------------- Block: 13 cycles
        ; ------------------------------------- Total: 85 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock59 Using cfiCommon2
          CFI Function _load_time
        CODE
// 4386 void load_time(us8 hh, us8 min, us8 sec)
// 4387 {
_load_time:
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        ; Auto size: 4
// 4388   if(hh == 0xFF)
        MOV       A, [SP+0x03]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_377  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 4389   {
// 4390     info[k]= 0xFF;                      /* hour */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xFF           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        BR        S:??dlms_reset_data_378  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 4391   }
// 4392   else
// 4393   {
// 4394     info[k]= bcd_to_decimal(hh);        
??dlms_reset_data_377:
        MOV       A, [SP+0x03]       ;; 1 cycle
          CFI FunCall _bcd_to_decimal
        CALL      _bcd_to_decimal    ;; 3 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
// 4395   }
// 4396   
// 4397   if(min == 0xFF)
??dlms_reset_data_378:
        MOV       A, [SP+0x02]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_379  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4398   {
// 4399     info[k + 1]= 0xFF;                  /* minute */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xFF           ;; 1 cycle
        MOV       (_info+1)[BC], A   ;; 1 cycle
        BR        S:??dlms_reset_data_380  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 4400   }
// 4401   else
// 4402   {
// 4403     info[k + 1]= bcd_to_decimal(min); 
??dlms_reset_data_379:
        MOV       A, [SP+0x02]       ;; 1 cycle
          CFI FunCall _bcd_to_decimal
        CALL      _bcd_to_decimal    ;; 3 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+1)[BC], A   ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
// 4404   }
// 4405   
// 4406   if(sec == 0xFF)
??dlms_reset_data_380:
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_381  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4407   {
// 4408     info[k + 2]= 0xFF;                  /* second */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xFF           ;; 1 cycle
        MOV       (_info+2)[BC], A   ;; 1 cycle
        BR        S:??dlms_reset_data_382  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 4409   }
// 4410   else
// 4411   {
// 4412     info[k + 2]= bcd_to_decimal(sec); 
??dlms_reset_data_381:
        MOV       A, [SP]            ;; 1 cycle
          CFI FunCall _bcd_to_decimal
        CALL      _bcd_to_decimal    ;; 3 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+2)[BC], A   ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
// 4413   }
// 4414   
// 4415   info[k + 3]= 0x00;                    /* hunderdths of seconds(not specified) */
??dlms_reset_data_382:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
// 4416   info_l();
          CFI FunCall _info_l
        CALL      _info_l            ;; 3 cycles
// 4417 }
        ADDW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock59
        ; ------------------------------------- Block: 13 cycles
        ; ------------------------------------- Total: 69 cycles
// 4418 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock60 Using cfiCommon1
          CFI Function _date_time
        CODE
// 4419 void date_time(us8 dd, us8 mm, us8 yy, us8 hh, us8 min, us8 sec, us8 flg)
// 4420 { 
_date_time:
        ; * Stack frame (at entry) *
        ; Param size: 2
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+10
        ; Auto size: 8
        SUBW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+12
// 4421   us8 dow;
// 4422   if(flg == 0x01)                       /* for individual data without day of week */
        MOV       A, [SP+0x0C]       ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_383  ;; 4 cycles
        ; ------------------------------------- Block: 10 cycles
// 4423   {
// 4424     info[k++]= 0x00;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4425     dow = 0xff;
        MOV       A, #0xFF           ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??dlms_reset_data_384  ;; 3 cycles
        ; ------------------------------------- Block: 10 cycles
// 4426   }
// 4427   else if(flg == 0x02)                  /* for combine data with day of week */
??dlms_reset_data_383:
        MOV       A, [SP+0x0C]       ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BNZ       ??dlms_reset_data_385  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4428   {
// 4429     if(Now.week == 0)
        CMP0      N:_Now+4           ;; 1 cycle
        BNZ       ??dlms_reset_data_386  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4430     {
// 4431       dow= 6;
        MOV       A, #0x6            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??dlms_reset_data_384  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 4432     }
// 4433     else
// 4434     {
// 4435       dow= Now.week;
??dlms_reset_data_386:
        MOV       A, N:_Now+4        ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??dlms_reset_data_384  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 4436     }
// 4437   }
// 4438   else if(flg == 0x03) /* for individual data with day of week */
??dlms_reset_data_385:
        MOV       A, [SP+0x0C]       ;; 1 cycle
        CMP       A, #0x3            ;; 1 cycle
        BNZ       ??dlms_reset_data_387  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4439   {
// 4440     info[k++]= 0x00;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4441     if(Now.week == 0)
        CMP0      N:_Now+4           ;; 1 cycle
        BNZ       ??dlms_reset_data_388  ;; 4 cycles
        ; ------------------------------------- Block: 10 cycles
// 4442     {
// 4443       dow= 6;
        MOV       A, #0x6            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??dlms_reset_data_384  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 4444     }
// 4445     else
// 4446     {
// 4447       dow= Now.week;
??dlms_reset_data_388:
        MOV       A, N:_Now+4        ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??dlms_reset_data_384  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 4448     }
// 4449   }
// 4450   else /* for combine data without day of week */
// 4451   {
// 4452     dow= 0xff;
??dlms_reset_data_387:
        MOV       A, #0xFF           ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 4453   }
// 4454   
// 4455   
// 4456   if(dd==0x00 ||  mm==0x00 || yy==0x00)
??dlms_reset_data_384:
        MOV       A, [SP+0x07]       ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BZ        ??dlms_reset_data_389  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x06]       ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BZ        ??dlms_reset_data_389  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x04]       ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_390  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4457   {
// 4458     hh=0xff;
??dlms_reset_data_389:
        MOV       A, #0xFF           ;; 1 cycle
        MOV       [SP+0x05], A       ;; 1 cycle
// 4459     min=0xff;
        MOV       A, #0xFF           ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
// 4460     dd=0xff;
        MOV       A, #0xFF           ;; 1 cycle
        MOV       [SP+0x07], A       ;; 1 cycle
// 4461     mm=0xff;
        MOV       A, #0xFF           ;; 1 cycle
        MOV       [SP+0x06], A       ;; 1 cycle
// 4462     yy=0xff;
        MOV       A, #0xFF           ;; 1 cycle
        MOV       [SP+0x04], A       ;; 1 cycle
// 4463     sec=0xff;
        MOV       A, #0xFF           ;; 1 cycle
        MOV       [SP+0x03], A       ;; 1 cycle
        ; ------------------------------------- Block: 12 cycles
// 4464   }
// 4465   octet_s(0x0C, 0);
??dlms_reset_data_390:
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _octet_s
        CALL      _octet_s           ;; 3 cycles
// 4466   load_date(dd, mm, yy, dow);
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, [SP+0x04]       ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        MOV       A, [SP+0x06]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x07]       ;; 1 cycle
          CFI FunCall _load_date
        CALL      _load_date         ;; 3 cycles
// 4467   load_time(hh, min, sec);
        MOV       A, [SP+0x03]       ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x05]       ;; 1 cycle
          CFI FunCall _load_time
        CALL      _load_time         ;; 3 cycles
// 4468   
// 4469   info[k]= 0x01;                                /* deviation high byte(not specified) */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x1            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
// 4470   info[k + 1]= 0x4a;                            /* deviation low byte(not specified) */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x4A           ;; 1 cycle
        MOV       (_info+1)[BC], A   ;; 1 cycle
// 4471   if((flg == 0x02) || (flg == 0x03))
        MOV       A, [SP+0x0C]       ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BZ        ??dlms_reset_data_391  ;; 4 cycles
        ; ------------------------------------- Block: 35 cycles
        MOV       A, [SP+0x0C]       ;; 1 cycle
        CMP       A, #0x3            ;; 1 cycle
        BNZ       ??dlms_reset_data_392  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4472   {
// 4473     info[k + 2]= flag_rtc_read_error;
??dlms_reset_data_391:
        MOVW      HL, #LWRD(_flag_rtc2)  ;; 1 cycle
        MOV       A, [HL]            ;; 1 cycle
        AND       A, #0x1            ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+2)[BC], A   ;; 1 cycle
        BR        S:??dlms_reset_data_393  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 4474   }
// 4475   else
// 4476   {
// 4477     info[k + 2]= 0x00; /* clock_status(ok) */
??dlms_reset_data_392:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info+2)[BC], A   ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 4478   }
// 4479   
// 4480   k= k + 3;
??dlms_reset_data_393:
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x3           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 4481 }
        ADDW      SP, #0x8           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock60
        ; ------------------------------------- Block: 10 cycles
        ; ------------------------------------- Total: 161 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock61 Using cfiCommon1
          CFI Function _log_name2
        CODE
// 4482 void log_name2(us8 a, us8 b, us8 c, us8 d, us8 e)
// 4483 { 
_log_name2:
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+10
        ; Auto size: 6
// 4484   info[k++]= 0x00;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4485   obiscode(a, b, c, d, e, 255);
        MOV       D, #0xFF           ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       A, [SP+0x03]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        MOV       A, [SP+0x04]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x05]       ;; 1 cycle
          CFI FunCall _obiscode
        CALL      _obiscode          ;; 3 cycles
// 4486 } 
        ADDW      SP, #0x6           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock61
        ; ------------------------------------- Block: 28 cycles
        ; ------------------------------------- Total: 28 cycles
// 4487 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock62 Using cfiCommon0
          CFI Function _log_name23
        CODE
// 4488 void log_name23(us8 temp)
// 4489 {
_log_name23:
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        ; Auto size: 2
// 4490   log_name2(0, 0, temp, 0, 0);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _log_name2
        CALL      _log_name2         ;; 3 cycles
// 4491 }
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock62
        ; ------------------------------------- Block: 17 cycles
        ; ------------------------------------- Total: 17 cycles
// 4492 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock63 Using cfiCommon0
          CFI Function _initialize_dlms_data
        CODE
// 4493 void initialize_dlms_data(void)
// 4494 {
_initialize_dlms_data:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 2
        SUBW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+6
// 4495   us8 temp;
// 4496   rrr_c= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_rrr_c, AX       ;; 1 cycle
// 4497   rrr_s= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_rrr_s, AX       ;; 1 cycle
// 4498   rrr_c1= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_rrr_c1, AX      ;; 1 cycle
// 4499   sss_c= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_sss_c, AX       ;; 1 cycle
// 4500   sss_s= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_sss_s, AX       ;; 1 cycle
// 4501   sss_c1= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_sss_c1, AX      ;; 1 cycle
// 4502   p_fbit= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_p_fbit, AX      ;; 1 cycle
// 4503   decerr_flag= 0;
        MOV       N:_decerr_flag, #0x0  ;; 1 cycle
// 4504   nrm_flag= 0;
        MOV       N:_nrm_flag, #0x0  ;; 1 cycle
// 4505   seg_flag= 0;
        MOV       N:_seg_flag, #0x0  ;; 1 cycle
// 4506   infose_flag= 0;
        MOV       N:_infose_flag, #0x0  ;; 1 cycle
// 4507   infore_flag= 0;
        MOV       N:_infore_flag, #0x0  ;; 1 cycle
// 4508   asserr_flag= 0;
        MOV       N:_asserr_flag, #0x0  ;; 1 cycle
// 4509   max_info_tra= DLMS_MAX_BUFF_SIZE;
        MOVW      AX, #0x200         ;; 1 cycle
        MOVW      N:_max_info_tra, AX  ;; 1 cycle
// 4510   max_info_rec= DLMS_MAX_BUFF_SIZE;
        MOVW      AX, #0x200         ;; 1 cycle
        MOVW      N:_max_info_rec, AX  ;; 1 cycle
// 4511   max_win_tra= 0x01;
        MOVW      AX, #0x1           ;; 1 cycle
        MOVW      N:_max_win_tra, AX  ;; 1 cycle
// 4512   max_win_rec= 0x01;
        MOVW      AX, #0x1           ;; 1 cycle
        MOVW      N:_max_win_rec, AX  ;; 1 cycle
// 4513   conf_ser_flag= 0;
        MOV       N:_conf_ser_flag, #0x0  ;; 1 cycle
// 4514   conf_err_flag= 0;
        MOV       N:_conf_err_flag, #0x0  ;; 1 cycle
// 4515   conf_type_flag= 0;
        MOV       N:_conf_type_flag, #0x0  ;; 1 cycle
// 4516   conf_serror_flag= 0;
        MOV       N:_conf_serror_flag, #0x0  ;; 1 cycle
// 4517   cosem_flag= 0;
        MOV       N:_cosem_flag, #0x0  ;; 1 cycle
// 4518   seg_flagsd= 0;
        MOV       N:_seg_flagsd, #0x0  ;; 1 cycle
// 4519   asso0_flag= 0;
        MOV       N:_asso0_flag, #0x0  ;; 1 cycle
// 4520   asso1_flag= 0;
        MOV       N:_asso1_flag, #0x0  ;; 1 cycle
// 4521   asso2_flag= 0;
        MOV       N:_asso2_flag, #0x0  ;; 1 cycle
// 4522   asso3_flag= 0;
        MOV       N:_asso3_flag, #0x0  ;; 1 cycle
// 4523   phy_id= 16;
        MOVW      AX, #0x10          ;; 1 cycle
        MOVW      N:_phy_id, AX      ;; 1 cycle
// 4524   cli_id= 17; /* low level security */
        MOVW      AX, #0x11          ;; 1 cycle
        MOVW      N:_cli_id, AX      ;; 1 cycle
// 4525   
// 4526   /* DLMS Passwords */
// 4527   eprom_read(0x0150,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x150         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 4528   
// 4529   for(temp= 0; temp < 8; temp++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 52 cycles
??initialize_dlms_data_0:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNC       ??dlms_reset_data_394  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4530   {
// 4531     aut_pswd[temp]= *(&opr_data[0] + temp);
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_opr_data)[B]  ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_aut_pswd)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 4532   }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??initialize_dlms_data_0  ;; 3 cycles
        ; ------------------------------------- Block: 15 cycles
// 4533   
// 4534   if((eprom_read(0x0150,0,PAGE_1,AUTO_CALC)!=EEP_OK) || ((0 == aut_pswd[0]) && (0 == aut_pswd[1]) && (0 == aut_pswd[2]) && (0 == aut_pswd[3]) && (0 == aut_pswd[4]) && (0 == aut_pswd[5]) && (0 == aut_pswd[6]) && (0 == aut_pswd[7])) 
// 4535      || ((0xff == aut_pswd[0]) && (0xff == aut_pswd[1]) && (0xff == aut_pswd[2]) && (0xff == aut_pswd[3]) && (0xff == aut_pswd[4]) && (0xff == aut_pswd[5]) && (0xff == aut_pswd[6]) && (0xff == aut_pswd[7])))
??dlms_reset_data_394:
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x150         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_395  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        CMP0      N:_aut_pswd        ;; 1 cycle
        BNZ       ??dlms_reset_data_396  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_aut_pswd+1      ;; 1 cycle
        BNZ       ??dlms_reset_data_396  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_aut_pswd+2      ;; 1 cycle
        BNZ       ??dlms_reset_data_396  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_aut_pswd+3      ;; 1 cycle
        BNZ       ??dlms_reset_data_396  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_aut_pswd+4      ;; 1 cycle
        BNZ       ??dlms_reset_data_396  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_aut_pswd+5      ;; 1 cycle
        BNZ       ??dlms_reset_data_396  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_aut_pswd+6      ;; 1 cycle
        BNZ       ??dlms_reset_data_396  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_aut_pswd+7      ;; 1 cycle
        BZ        ??dlms_reset_data_395  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
??dlms_reset_data_396:
        CMP       N:_aut_pswd, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_397  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_aut_pswd+1, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_397  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_aut_pswd+2, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_397  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_aut_pswd+3, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_397  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_aut_pswd+4, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_397  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_aut_pswd+5, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_397  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_aut_pswd+6, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_397  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_aut_pswd+7, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_397  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4536   {
// 4537     for(temp= 0; temp < 8; temp++)
??dlms_reset_data_395:
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??initialize_dlms_data_1:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNC       ??dlms_reset_data_397  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4538     {
// 4539       aut_pswd[temp]= aut_pswd_default[temp];
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_aut_pswd_default)[B]  ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_aut_pswd)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 4540     }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??initialize_dlms_data_1  ;; 3 cycles
        ; ------------------------------------- Block: 15 cycles
// 4541   }
// 4542   
// 4543   eprom_read(0x0160,0,PAGE_1,AUTO_CALC);
??dlms_reset_data_397:
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x160         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 4544   
// 4545   for(temp= 0; temp < 8; temp++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 9 cycles
??initialize_dlms_data_2:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNC       ??dlms_reset_data_398  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4546   {
// 4547     aut_pswd1[temp]= *(&opr_data[0] + temp);
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_opr_data)[B]  ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_aut_pswd1)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 4548   }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??initialize_dlms_data_2  ;; 3 cycles
        ; ------------------------------------- Block: 15 cycles
// 4549   
// 4550   eprom_read(0x0170,0,PAGE_1,AUTO_CALC);
??dlms_reset_data_398:
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x170         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 4551   
// 4552   for(temp= 0; temp < 8; temp++)
        MOV       B, #0x0            ;; 1 cycle
        ; ------------------------------------- Block: 8 cycles
??initialize_dlms_data_3:
        MOV       A, B               ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNC       ??dlms_reset_data_399  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4553   {
// 4554     aut_pswd1[temp + 8]= *(&opr_data[0] + temp);
        MOV       A, (_opr_data)[B]  ;; 1 cycle
        MOV       (_aut_pswd1+8)[B], A  ;; 1 cycle
// 4555   }
        INC       B                  ;; 1 cycle
        BR        S:??initialize_dlms_data_3  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 4556   
// 4557   if(((0 == aut_pswd1[0]) && (0 == aut_pswd1[1]) && (0 == aut_pswd1[2]) 
// 4558       && (0 == aut_pswd1[3]) && (0 == aut_pswd1[4]) && (0 == aut_pswd1[5]) 
// 4559         && (0 == aut_pswd1[6]) && (0 == aut_pswd1[7]) && (0 == aut_pswd1[8]) 
// 4560           && (0 == aut_pswd1[9]) && (0 == aut_pswd1[10]) && (0 == aut_pswd1[11])
// 4561             && (0 == aut_pswd1[12]) && (0 == aut_pswd1[13]) && (0 == aut_pswd1[14]) 
// 4562               && (0 == aut_pswd1[15])) 
// 4563      ||((0xff == aut_pswd1[0]) && (0xff == aut_pswd1[1]) && (0xff == aut_pswd1[2])
// 4564         && (0xff == aut_pswd1[3]) && (0xff == aut_pswd1[4]) && (0xff == aut_pswd1[5])
// 4565           && (0xff == aut_pswd1[6]) && (0xff == aut_pswd1[7]) && (0xff == aut_pswd1[8])
// 4566             && (0xff == aut_pswd1[9]) && (0xff == aut_pswd1[10]) && (0xff == aut_pswd1[11]) 
// 4567               && (0xff == aut_pswd1[12]) && (0xff == aut_pswd1[13]) && (0xff == aut_pswd1[14]) 
// 4568                 && (0xff == aut_pswd1[15])))
??dlms_reset_data_399:
        CMP0      N:_aut_pswd1       ;; 1 cycle
        BNZ       ??dlms_reset_data_400  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_aut_pswd1+1     ;; 1 cycle
        BNZ       ??dlms_reset_data_400  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_aut_pswd1+2     ;; 1 cycle
        BNZ       ??dlms_reset_data_400  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_aut_pswd1+3     ;; 1 cycle
        BNZ       ??dlms_reset_data_400  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_aut_pswd1+4     ;; 1 cycle
        BNZ       ??dlms_reset_data_400  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_aut_pswd1+5     ;; 1 cycle
        BNZ       ??dlms_reset_data_400  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_aut_pswd1+6     ;; 1 cycle
        BNZ       ??dlms_reset_data_400  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_aut_pswd1+7     ;; 1 cycle
        BNZ       ??dlms_reset_data_400  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_aut_pswd1+8     ;; 1 cycle
        BNZ       ??dlms_reset_data_400  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_aut_pswd1+9     ;; 1 cycle
        BNZ       ??dlms_reset_data_400  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_aut_pswd1+10    ;; 1 cycle
        BNZ       ??dlms_reset_data_400  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_aut_pswd1+11    ;; 1 cycle
        BNZ       ??dlms_reset_data_400  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_aut_pswd1+12    ;; 1 cycle
        BNZ       ??dlms_reset_data_400  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_aut_pswd1+13    ;; 1 cycle
        BNZ       ??dlms_reset_data_400  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_aut_pswd1+14    ;; 1 cycle
        BNZ       ??dlms_reset_data_400  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_aut_pswd1+15    ;; 1 cycle
        BZ        ??dlms_reset_data_401  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
??dlms_reset_data_400:
        CMP       N:_aut_pswd1, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_402  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_aut_pswd1+1, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_402  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_aut_pswd1+2, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_402  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_aut_pswd1+3, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_402  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_aut_pswd1+4, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_402  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_aut_pswd1+5, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_402  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_aut_pswd1+6, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_402  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_aut_pswd1+7, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_402  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_aut_pswd1+8, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_402  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_aut_pswd1+9, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_402  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_aut_pswd1+10, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_402  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_aut_pswd1+11, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_402  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_aut_pswd1+12, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_402  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_aut_pswd1+13, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_402  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_aut_pswd1+14, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_402  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_aut_pswd1+15, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_402  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4569   {
// 4570     for(temp= 0; temp < 16; temp++)
??dlms_reset_data_401:
        MOV       A, #0x0            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??initialize_dlms_data_4:
        MOV       A, B               ;; 1 cycle
        CMP       A, #0x10           ;; 1 cycle
        BNC       ??dlms_reset_data_402  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4571     {
// 4572       aut_pswd1[temp]= aut_pswd1_default[temp];
        MOV       A, (_aut_pswd1_default)[B]  ;; 1 cycle
        MOV       (_aut_pswd1)[B], A  ;; 1 cycle
// 4573     }
        INC       B                  ;; 1 cycle
        BR        S:??initialize_dlms_data_4  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 4574   }
// 4575   
// 4576   /* Profile temp initialisation */
// 4577   //    KVAH_SNAP = 1;
// 4578   //    TOP_RESTORE_REQ = 0;
// 4579   
// 4580 }
??dlms_reset_data_402:
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock63
        ; ------------------------------------- Block: 7 cycles
        ; ------------------------------------- Total: 419 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock64 Using cfiCommon0
          CFI Function _Start_Info
          CFI NoCalls
        CODE
// 4581 void Start_Info(void) /* only for use in buffer */
// 4582 {
_Start_Info:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 4583   info[0]= 0xE6; /* 0 */
        MOV       N:_info, #0xE6     ;; 1 cycle
// 4584   info[1]= 0xE7; /* 1 */
        MOV       N:_info+1, #0xE7   ;; 1 cycle
// 4585   info[2]= 0x00; /* 2 */
        MOV       N:_info+2, #0x0    ;; 1 cycle
// 4586   info[3]= 0xC4; /* GET.RESP */
        MOV       N:_info+3, #0xC4   ;; 1 cycle
// 4587   info[4]= 0x01; /* normal */
        MOV       N:_info+4, #0x1    ;; 1 cycle
// 4588   info[5]= 0x81; /* INVOKE_ID,PRIORITY */
        MOV       N:_info+5, #0x81   ;; 1 cycle
// 4589   info[6]= 0x00; /* data_result */
        MOV       N:_info+6, #0x0    ;; 1 cycle
// 4590   info[7]= 0x01; /* data_result */
        MOV       N:_info+7, #0x1    ;; 1 cycle
// 4591   multi_resp= 1;
        MOV       N:_multi_resp, #0x1  ;; 1 cycle
// 4592 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock64
        ; ------------------------------------- Block: 15 cycles
        ; ------------------------------------- Total: 15 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock65 Using cfiCommon0
          CFI Function _Start_Info2
          CFI NoCalls
        CODE
// 4593 void Start_Info2(void)
// 4594 {
_Start_Info2:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 4595   /* memcpy_cer(info,Start_Info_CONT1,13); */
// 4596   info[0]= 0xE6;  /* 0 */
        MOV       N:_info, #0xE6     ;; 1 cycle
// 4597   info[1]= 0xE7;  /* 1 */
        MOV       N:_info+1, #0xE7   ;; 1 cycle
// 4598   info[2]= 0x00;  /* 2 */
        MOV       N:_info+2, #0x0    ;; 1 cycle
// 4599   info[3]= 0xC4;  /* GET.RESP */
        MOV       N:_info+3, #0xC4   ;; 1 cycle
// 4600   info[4]= 0x02;  /* normal */
        MOV       N:_info+4, #0x2    ;; 1 cycle
// 4601   info[5]= 0x81;  /* INVOKE_ID,PRIORITY */
        MOV       N:_info+5, #0x81   ;; 1 cycle
// 4602   info[6]= 0x00;  /* data_result */
        MOV       N:_info+6, #0x0    ;; 1 cycle
// 4603   info[7]= 0x00;  /* data_result */
        MOV       N:_info+7, #0x0    ;; 1 cycle
// 4604   info[8]= 0x00;  /* data_result */
        MOV       N:_info+8, #0x0    ;; 1 cycle
// 4605   info[9]= 0x00;  /* data_result */
        MOV       N:_info+9, #0x0    ;; 1 cycle
// 4606   info[10]= 0x00; /* data_resultinfo[7]=0x01; */
        MOV       N:_info+10, #0x0   ;; 1 cycle
// 4607   info[11]= 0x00; /* data_result */
        MOV       N:_info+11, #0x0   ;; 1 cycle
// 4608   info[12]= 0x82; /* data_result */
        MOV       N:_info+12, #0x82  ;; 1 cycle
// 4609   
// 4610   k+= 13;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0xD           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 4611   multi_resp= 1;
        MOV       N:_multi_resp, #0x1  ;; 1 cycle
// 4612 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock65
        ; ------------------------------------- Block: 23 cycles
        ; ------------------------------------- Total: 23 cycles
// 4613 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock66 Using cfiCommon0
          CFI Function _current_rating
          CFI NoCalls
        CODE
// 4614 void current_rating(void)
// 4615 {
_current_rating:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 2
        SUBW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+6
// 4616   uint16_t Basic_Current,Max_Current;
// 4617   
// 4618   Basic_Current=IB/10;
        MOVW      AX, #0x3E8         ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
// 4619   Max_Current=IMAX/10;
        MOVW      HL, #0x1770        ;; 1 cycle
// 4620   info[k++]= 0x0a; /* current_rating */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xA            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4621   if(Max_Current >= 10000)
        XCHW      AX, HL             ;; 1 cycle
        CMPW      AX, #0x2710        ;; 1 cycle
        XCHW      AX, HL             ;; 1 cycle
        BC        ??dlms_reset_data_403  ;; 4 cycles
        ; ------------------------------------- Block: 16 cycles
// 4622     info[k++]= 0x07;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x7            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        BR        S:??dlms_reset_data_404  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 4623   else
// 4624     info[k++]= 0x06;
??dlms_reset_data_403:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x6            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        ; ------------------------------------- Block: 5 cycles
// 4625   
// 4626   info[k++]= 0x30 + ((Basic_Current / 100) / 10); /* IB */
??dlms_reset_data_404:
        MOVW      BC, #0xA           ;; 1 cycle
        MOVW      DE, #0x64          ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        POP       DE                 ;; 1 cycle
          CFI CFA SP+6
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       A, #0x30           ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4627   info[k++]= 0x30 + ((Basic_Current / 100) % 10);
        MOVW      DE, #0xA           ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+8
        POP       BC                 ;; 1 cycle
          CFI CFA SP+6
        MOVW      DE, #0x64          ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        POP       DE                 ;; 1 cycle
          CFI CFA SP+6
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        MOV       A, E               ;; 1 cycle
        ADD       A, #0x30           ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4628   
// 4629   info[k++]= 0x2d; /* dash */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x2D           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4630   
// 4631   if(Max_Current >= 10000)
        XCHW      AX, HL             ;; 1 cycle
        CMPW      AX, #0x2710        ;; 1 cycle
        XCHW      AX, HL             ;; 1 cycle
        BC        ??dlms_reset_data_405  ;; 4 cycles
        ; ------------------------------------- Block: 76 cycles
// 4632   {
// 4633     info[k++]= 0x30 + (Max_Current / 10000); /* IMAX */
        MOVW      DE, #0x2710        ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       A, #0x30           ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4634     info[k++]= 0x30 + ((Max_Current / 1000) % 10);
        MOVW      DE, #0xA           ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+8
        POP       BC                 ;; 1 cycle
          CFI CFA SP+6
        MOVW      DE, #0x3E8         ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        POP       DE                 ;; 1 cycle
          CFI CFA SP+6
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        MOV       A, E               ;; 1 cycle
        ADD       A, #0x30           ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4635     info[k++]= 0x30 + ((Max_Current / 100) % 10);
        MOVW      DE, #0xA           ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+8
        POP       BC                 ;; 1 cycle
          CFI CFA SP+6
        MOVW      DE, #0x64          ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        POP       DE                 ;; 1 cycle
          CFI CFA SP+6
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        MOV       A, E               ;; 1 cycle
        ADD       A, #0x30           ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        BR        S:??dlms_reset_data_406  ;; 3 cycles
        ; ------------------------------------- Block: 87 cycles
// 4636   }
// 4637   else
// 4638   {
// 4639     info[k++]= 0x30 + ((Max_Current / 1000) % 10);
??dlms_reset_data_405:
        MOVW      DE, #0xA           ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+8
        POP       BC                 ;; 1 cycle
          CFI CFA SP+6
        MOVW      DE, #0x3E8         ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        POP       DE                 ;; 1 cycle
          CFI CFA SP+6
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        MOV       A, E               ;; 1 cycle
        ADD       A, #0x30           ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4640     info[k++]= 0x30 + ((Max_Current / 100) % 10);
        MOVW      DE, #0xA           ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+8
        POP       BC                 ;; 1 cycle
          CFI CFA SP+6
        MOVW      DE, #0x64          ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        POP       DE                 ;; 1 cycle
          CFI CFA SP+6
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        MOV       A, E               ;; 1 cycle
        ADD       A, #0x30           ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        ; ------------------------------------- Block: 66 cycles
// 4641   }
// 4642   info[k++]= 0x41; /* A */
??dlms_reset_data_406:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x41           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4643 }
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock66
        ; ------------------------------------- Block: 12 cycles
        ; ------------------------------------- Total: 270 cycles
// 4644 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock67 Using cfiCommon0
          CFI Function _name_plate_buffer
        CODE
// 4645 void name_plate_buffer(void)
// 4646 {
_name_plate_buffer:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 2
        SUBW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+6
// 4647   
// 4648   uint8_t  u8temp= 0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 4649   
// 4650   k= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 4651   
// 4652   Start_Info2();
          CFI FunCall _Start_Info2
        CALL      _Start_Info2       ;; 3 cycles
// 4653   k= 15;
        MOVW      AX, #0xF           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 4654   
// 4655   block_no= 1;
        MOVW      AX, #0x1           ;; 1 cycle
        MOVW      N:_block_no, AX    ;; 1 cycle
// 4656   array(1, 0);
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0x1            ;; 1 cycle
          CFI FunCall _array
        CALL      _array             ;; 3 cycles
// 4657   
// 4658   /*  Start_Info(); */
// 4659   /*  info[8]=0x01; */
// 4660   /*  k=9; */
// 4661   structure(name_plate_profile_capture_obj[0]);
        MOV       A, N:_name_plate_profile_capture_obj  ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 4662   
// 4663   sr_no_ascii();
          CFI FunCall _sr_no_ascii
        CALL      _sr_no_ascii       ;; 3 cycles
// 4664   
// 4665   fill_manufacturer_name();
          CFI FunCall _fill_manufacturer_name
        CALL      _fill_manufacturer_name  ;; 3 cycles
// 4666   fill_firmware_version();
          CFI FunCall _fill_firmware_version
        CALL      _fill_firmware_version  ;; 3 cycles
// 4667   
// 4668   info[k++]= 0x11;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x11           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4669   info[k++]= 4; /* WC */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x4            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4670   
// 4671   fill_meter_category();
          CFI FunCall _fill_meter_category
        CALL      _fill_meter_category  ;; 3 cycles
// 4672   
// 4673   current_rating();
          CFI FunCall _current_rating
        CALL      _current_rating    ;; 3 cycles
// 4674   
// 4675   
// 4676   long_int= CTR;
        MOVW      AX, N:_CTR         ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_long_int, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_long_int+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 4677   int_into_char_array(long_int,char_array);/* CTR */
        MOVW      BC, #LWRD(_char_array)  ;; 1 cycle
        MOVW      HL, S:_long_int+2  ;; 1 cycle
        MOVW      DE, S:_long_int    ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
          CFI FunCall _int_into_char_array
        CALL      _int_into_char_array  ;; 3 cycles
// 4678   val_2byt(char_array[0], char_array[1]);
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
// 4679   
// 4680   
// 4681   long_int= PTR;
        MOVW      AX, N:_PTR         ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_long_int, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_long_int+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 4682   int_into_char_array(long_int,char_array);/* PTR */
        MOVW      BC, #LWRD(_char_array)  ;; 1 cycle
        MOVW      HL, S:_long_int+2  ;; 1 cycle
        MOVW      DE, S:_long_int    ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
          CFI FunCall _int_into_char_array
        CALL      _int_into_char_array  ;; 3 cycles
// 4683   val_2byt(char_array[0], char_array[1]);
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
// 4684   
// 4685   fill_yr_of_manufacture();
          CFI FunCall _fill_yr_of_manufacture
        CALL      _fill_yr_of_manufacture  ;; 3 cycles
// 4686   
// 4687   multi_filling_f= 0;
        MOV       N:_multi_filling_f, #0x0  ;; 1 cycle
// 4688   buffer_first_not_fill_f= 0;
        MOV       N:_buffer_first_not_fill_f, #0x0  ;; 1 cycle
// 4689   u8temp= 1;
        MOV       A, #0x1            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 4690   send_data(u8temp);
        MOV       A, [SP]            ;; 1 cycle
          CFI FunCall _send_data
        CALL      _send_data         ;; 3 cycles
// 4691 }
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock67
        ; ------------------------------------- Block: 100 cycles
        ; ------------------------------------- Total: 100 cycles
// 4692 
// 4693 
// 4694 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock68 Using cfiCommon0
          CFI Function _fill_rtc_calib
        CODE
// 4695 void fill_rtc_calib(void)
// 4696 {
_fill_rtc_calib:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 4697   info[k++]=0;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4698   structure(2);
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 4699   if(eprom_read(RTC_CAL_ADDR,0,PAGE_1,AUTO_CALC) == EEP_ERROR)
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x140         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_407  ;; 4 cycles
        ; ------------------------------------- Block: 21 cycles
// 4700   {
// 4701     if(eprom_read(RTC_CAL_ADDR_ALT,2,PAGE_1,AUTO_CALC) == EEP_OK)
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x2            ;; 1 cycle
        MOVW      AX, #0xFF80        ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_407  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 4702     {
// 4703       eprom_write(RTC_CAL_ADDR,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x140         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+4
        ; ------------------------------------- Block: 10 cycles
// 4704     }
// 4705   }
// 4706   if(eep_read_ok == 1 && opr_data[4] == 2)
??dlms_reset_data_407:
        MOVW      HL, #LWRD(_flag_eep1)  ;; 1 cycle
        MOV1      CY, [HL].3         ;; 1 cycle
        BNC       ??dlms_reset_data_408  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        CMP       N:_opr_data+4, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_408  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4707   {
// 4708     if(opr_data[0] == 1)
        CMP       N:_opr_data, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_409  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4709     {
// 4710       val_1byt(0x80,0);
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0x80           ;; 1 cycle
          CFI FunCall _val_1byt
        CALL      _val_1byt          ;; 3 cycles
        BR        S:??dlms_reset_data_410  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 4711     }
// 4712     else
// 4713     {
// 4714       val_1byt(0x00,0);
??dlms_reset_data_409:
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_1byt
        CALL      _val_1byt          ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 4715     }    
// 4716     if(opr_data[1] == 0)
??dlms_reset_data_410:
        CMP0      N:_opr_data+1      ;; 1 cycle
        BNZ       ??dlms_reset_data_411  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4717     {
// 4718       val_1byt(1,0);
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0x1            ;; 1 cycle
          CFI FunCall _val_1byt
        CALL      _val_1byt          ;; 3 cycles
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 11 cycles
// 4719     }
// 4720     else
// 4721     {
// 4722       val_1byt(opr_data[1],0);
??dlms_reset_data_411:
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, N:_opr_data+1   ;; 1 cycle
          CFI FunCall _val_1byt
        CALL      _val_1byt          ;; 3 cycles
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 11 cycles
// 4723     } 
// 4724   }
// 4725   else
// 4726   {
// 4727     val_1byt(0,0);
??dlms_reset_data_408:
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_1byt
        CALL      _val_1byt          ;; 3 cycles
// 4728     val_1byt(0,0);
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_1byt
        CALL      _val_1byt          ;; 3 cycles
// 4729   }
// 4730 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock68
        ; ------------------------------------- Block: 16 cycles
        ; ------------------------------------- Total: 115 cycles
// 4731 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock69 Using cfiCommon0
          CFI Function _logical_device_name
        CODE
// 4732 void logical_device_name(uint8_t decision_f)
// 4733 {
_logical_device_name:
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        ; Auto size: 2
// 4734   octet_s(11,0);
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0xB            ;; 1 cycle
          CFI FunCall _octet_s
        CALL      _octet_s           ;; 3 cycles
// 4735   info[k++]='G'; 
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x47           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4736   
// 4737   if(Manufacturer==0)
        CMP0      N:_Manufacturer    ;; 1 cycle
        BNZ       ??dlms_reset_data_412  ;; 4 cycles
        ; ------------------------------------- Block: 16 cycles
// 4738   {
// 4739     info[k++]='O'; 
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x4F           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4740     info[k++]='E'; 
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x45           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        BR        S:??dlms_reset_data_413  ;; 3 cycles
        ; ------------------------------------- Block: 13 cycles
// 4741   }
// 4742   else if(Manufacturer==1)
??dlms_reset_data_412:
        CMP       N:_Manufacturer, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_414  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4743   {
// 4744     info[k++]='I'; 
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x49           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4745     info[k++]='L';
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x4C           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        BR        S:??dlms_reset_data_413  ;; 3 cycles
        ; ------------------------------------- Block: 13 cycles
// 4746   }
// 4747   else
// 4748   {
// 4749     info[k++]='E'; 
??dlms_reset_data_414:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x45           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4750     info[k++]='L'; 
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x4C           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        ; ------------------------------------- Block: 10 cycles
// 4751   }
// 4752   
// 4753   info[k++]='R';
??dlms_reset_data_413:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x52           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4754   info[k++]='A';
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x41           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4755   info[k++]='P';
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x50           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4756   info[k++]='D';
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x44           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4757   info[k++]='R';
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x52           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4758   info[k++]='P';
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x50           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4759   
// 4760   if(0==decision_f)
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_415  ;; 4 cycles
        ; ------------------------------------- Block: 36 cycles
// 4761   {
// 4762     info[k++]='0';
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x30           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        BR        S:??dlms_reset_data_416  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 4763   }
// 4764   else if(1==decision_f)
??dlms_reset_data_415:
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_417  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4765   {
// 4766     info[k++]='1';
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x31           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        BR        S:??dlms_reset_data_416  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 4767   }
// 4768   else
// 4769   {
// 4770     info[k++]='-';
??dlms_reset_data_417:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x2D           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        ; ------------------------------------- Block: 5 cycles
// 4771   }
// 4772   
// 4773   info[k++]=dlms_firm_ver[1]; 
??dlms_reset_data_416:
        MOV       A, N:_dlms_firm_ver+1  ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4774 }
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock69
        ; ------------------------------------- Block: 12 cycles
        ; ------------------------------------- Total: 132 cycles
// 4775 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock70 Using cfiCommon0
          CFI Function _fill_manufacturer_name
          CFI NoCalls
        CODE
// 4776 void fill_manufacturer_name(void)
// 4777 {
_fill_manufacturer_name:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 4778   uint8_t lu8_i;
// 4779   
// 4780   info[k++]=0x09;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x9            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4781   if(Manufacturer==0)
        CMP0      N:_Manufacturer    ;; 1 cycle
        BNZ       ??dlms_reset_data_418  ;; 4 cycles
        ; ------------------------------------- Block: 10 cycles
// 4782   {
// 4783     for(lu8_i=0; lu8_i<=GOE[0]; lu8_i++)
        MOV       X, #0x0            ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??fill_manufacturer_name_0:
        MOV       A, N:_GOE          ;; 1 cycle
        CMP       A, X               ;; 1 cycle
        BC        ??dlms_reset_data_419  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4784     {
// 4785       info[k++]=GOE[lu8_i];
        XCH       A, X               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       A, (_GOE)[B]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4786     }
        INC       X                  ;; 1 cycle
        BR        S:??fill_manufacturer_name_0  ;; 3 cycles
        ; ------------------------------------- Block: 12 cycles
// 4787   }
// 4788   else if(Manufacturer==1)
??dlms_reset_data_418:
        CMP       N:_Manufacturer, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_420  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4789   {
// 4790     for(lu8_i=0; lu8_i<=GIL[0]; lu8_i++)
        MOV       X, #0x0            ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??fill_manufacturer_name_1:
        MOV       A, N:_GIL          ;; 1 cycle
        CMP       A, X               ;; 1 cycle
        BC        ??dlms_reset_data_419  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4791     {
// 4792       info[k++]=GIL[lu8_i];
        XCH       A, X               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       A, (_GIL)[B]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4793     }
        INC       X                  ;; 1 cycle
        BR        S:??fill_manufacturer_name_1  ;; 3 cycles
        ; ------------------------------------- Block: 12 cycles
// 4794   }
// 4795   else
// 4796   {
// 4797     for(lu8_i=0; lu8_i<=GEL[0]; lu8_i++)
??dlms_reset_data_420:
        MOV       X, #0x0            ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??fill_manufacturer_name_2:
        MOV       A, N:_GEL          ;; 1 cycle
        CMP       A, X               ;; 1 cycle
        BC        ??dlms_reset_data_419  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4798     {
// 4799       info[k++]=GEL[lu8_i];
        XCH       A, X               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       A, (_GEL)[B]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4800     }
        INC       X                  ;; 1 cycle
        BR        S:??fill_manufacturer_name_2  ;; 3 cycles
        ; ------------------------------------- Block: 12 cycles
// 4801   } 
// 4802 }
??dlms_reset_data_419:
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock70
        ; ------------------------------------- Block: 6 cycles
        ; ------------------------------------- Total: 78 cycles
// 4803 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock71 Using cfiCommon0
          CFI Function _fill_utility_id
          CFI NoCalls
        CODE
// 4804 void fill_utility_id(void)
// 4805 {
_fill_utility_id:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 4806   info[k++]=0;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4807   info[k++]=0x0a;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xA            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4808   info[k++]=0x04;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x4            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4809   info[k++]=utility_id[0];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, N:_utility_id   ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4810   info[k++]=utility_id[1];
        MOV       A, N:_utility_id+1  ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4811   info[k++]=utility_id[2];
        MOV       A, N:_utility_id+2  ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4812   info[k++]=utility_id[3];
        MOV       A, N:_utility_id+3  ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4813 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock71
        ; ------------------------------------- Block: 41 cycles
        ; ------------------------------------- Total: 41 cycles
// 4814 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock72 Using cfiCommon0
          CFI Function _fill_meter_category
          CFI NoCalls
        CODE
// 4815 void fill_meter_category(void)
// 4816 {
_fill_meter_category:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 4817   info[k++]= 0x0a;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xA            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4818   info[k++]= 0x02;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x2            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4819   info[k++]= 0x43; /* ascii for 'C' */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x43           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4820   info[k++]= 0x32; /* ascii for '2' */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x32           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4821 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock72
        ; ------------------------------------- Block: 26 cycles
        ; ------------------------------------- Total: 26 cycles
// 4822 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock73 Using cfiCommon0
          CFI Function _fill_pcb_firm_ver_calib_status
        CODE
// 4823 void fill_pcb_firm_ver_calib_status(void)
// 4824 {
_fill_pcb_firm_ver_calib_status:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 4825   structure(2);
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 4826   info[k++]=0x12;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x12           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4827   info[k++]=firm_rev[0]; /* 0x0D; */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, N:_firm_rev     ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4828   info[k++]=firm_rev[1]; /* 0x80; */
        MOV       A, N:_firm_rev+1   ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4829   info[k++]=0x11;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x11           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4830   if(cal_done_f==1)// && neutral_chk_f==1) /* commented as neutral calibration not required, only flag check is removed here */
        CMP       N:_cal_done_f, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_421  ;; 4 cycles
        ; ------------------------------------- Block: 29 cycles
// 4831   {
// 4832     info[k++]=0x03;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x3            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 11 cycles
// 4833   }
// 4834   else
// 4835   {
// 4836     info[k++]=0x00;
??dlms_reset_data_421:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4837   }
// 4838 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock73
        ; ------------------------------------- Block: 11 cycles
        ; ------------------------------------- Total: 51 cycles
// 4839 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock74 Using cfiCommon0
          CFI Function _fill_yr_of_manufacture
        CODE
// 4840 void fill_yr_of_manufacture(void)
// 4841 {
_fill_yr_of_manufacture:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 2
        SUBW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+6
// 4842   uint16_t lu16_address;
// 4843   
// 4844   eprom_read(FG_DATE_AND_TIME,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFD0         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 4845   
// 4846   lu16_address=bcd_to_hex(opr_data[4])+ 0x07D0;
        MOV       A, N:_opr_data+4   ;; 1 cycle
          CFI FunCall _bcd_to_hex
        CALL      _bcd_to_hex        ;; 3 cycles
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, #0x7D0         ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
// 4847   val_2byt(lu16_address/256,lu16_address%256);  
        MOVW      AX, [SP]           ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        CLRB      X                  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
// 4848 }
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock74
        ; ------------------------------------- Block: 37 cycles
        ; ------------------------------------- Total: 37 cycles
// 4849 
// 4850 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock75 Using cfiCommon0
          CFI Function _sr_no_ascii
        CODE
// 4851 void sr_no_ascii(void)
// 4852 {
_sr_no_ascii:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 4853   uint8_t dumy_p,lu8_i;
// 4854   
// 4855   info[k]= 0x0a;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xA            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
// 4856   if(eprom_read(SERIAL_NO_CONFIG_ADD,0,PAGE_1,AUTO_CALC)==EEP_ERROR)
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFE0         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_422  ;; 4 cycles
        ; ------------------------------------- Block: 15 cycles
// 4857   {
// 4858     eprom_read(ALTERNATE_SERIAL_NO_CONFIG_ADD,2,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x2            ;; 1 cycle
        MOVW      AX, #0xFE00        ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 4859   }
// 4860   dumy_p= k + 2;
??dlms_reset_data_422:
        MOVW      AX, N:_k           ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       A, #0x2            ;; 1 cycle
        MOV       E, A               ;; 1 cycle
// 4861   
// 4862   /**/
// 4863   for(lu8_i=7;  lu8_i<14;  lu8_i++)
        MOV       B, #0x7            ;; 1 cycle
        ; ------------------------------------- Block: 5 cycles
??sr_no_ascii_0:
        MOV       A, B               ;; 1 cycle
        CMP       A, #0xE            ;; 1 cycle
        BNC       ??dlms_reset_data_423  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4864   {
// 4865     info[dumy_p++]=opr_data[lu8_i+1];
        MOV       A, (_opr_data+1)[B]  ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       (_info)[C], A      ;; 1 cycle
        INC       E                  ;; 1 cycle
// 4866   }
        INC       B                  ;; 1 cycle
        BR        S:??sr_no_ascii_0  ;; 3 cycles
        ; ------------------------------------- Block: 10 cycles
// 4867   /**/
// 4868   /**/
// 4869   for(lu8_i=0;  lu8_i<8;  lu8_i++)
??dlms_reset_data_423:
        MOV       D, #0x0            ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??sr_no_ascii_1:
        MOV       A, D               ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNC       ??dlms_reset_data_424  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4870   {
// 4871     if(opr_data[lu8_i]!=0x20)
        XCH       A, D               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       A, (_opr_data)[B]  ;; 1 cycle
        CMP       A, #0x20           ;; 1 cycle
        BZ        ??dlms_reset_data_425  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 4872     {
// 4873       info[dumy_p++]=opr_data[lu8_i];
        XCH       A, D               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       A, (_opr_data)[B]  ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       (_info)[B], A      ;; 1 cycle
        INC       E                  ;; 1 cycle
        ; ------------------------------------- Block: 9 cycles
// 4874     }
// 4875   }
??dlms_reset_data_425:
        INC       D                  ;; 1 cycle
        BR        S:??sr_no_ascii_1  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 4876   /**/
// 4877   
// 4878   info[k + 1]= dumy_p - 2 - k;
??dlms_reset_data_424:
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, #0xFFFE        ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOVW      HL, N:_k           ;; 1 cycle
        SUB       A, L               ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+1)[BC], A   ;; 1 cycle
// 4879   k= dumy_p;
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 4880 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock75
        ; ------------------------------------- Block: 17 cycles
        ; ------------------------------------- Total: 89 cycles
// 4881 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock76 Using cfiCommon0
          CFI Function _send_data
        CODE
// 4882 void send_data(uint8_t u8temp)
// 4883 {
_send_data:
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        ; Auto size: 2
// 4884   info[6]= u8temp;
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       N:_info+6, A       ;; 1 cycle
// 4885   info[9]= block_no / 256;
        MOVW      AX, N:_block_no    ;; 1 cycle
        CLRB      X                  ;; 1 cycle
        MOV       N:_info+9, A       ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 4886   info[10]= (uint8_t)block_no;
        MOVW      AX, N:_block_no    ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       N:_info+10, A      ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 4887   info[13]= (k - 15) / 256;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0xFFF1        ;; 1 cycle
        CLRB      X                  ;; 1 cycle
        MOV       N:_info+13, A      ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 4888   info[14]= (uint8_t)(k - 15);
        MOVW      AX, N:_k           ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       A, #0xF1           ;; 1 cycle
        MOV       N:_info+14, A      ;; 1 cycle
// 4889   
// 4890   block_no++;
        INCW      N:_block_no        ;; 2 cycles
// 4891   
// 4892   frame_type= 0; /* ((rrr_s<<5)|(0x10)|(sss_s<<1)); */
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_frame_type, AX  ;; 1 cycle
// 4893   info_send= k;
        MOVW      AX, N:_k           ;; 1 cycle
        MOVW      N:_info_send, AX   ;; 1 cycle
// 4894   info_sended= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_info_sended, AX  ;; 1 cycle
// 4895   send_type_multi();
          CFI FunCall _send_type_multi
        CALL      _send_type_multi   ;; 3 cycles
// 4896 }
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock76
        ; ------------------------------------- Block: 38 cycles
        ; ------------------------------------- Total: 38 cycles
// 4897 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock77 Using cfiCommon0
          CFI Function _Tarrif_script
        CODE
// 4898 void Tarrif_script(void)
// 4899 {
_Tarrif_script:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 2
        SUBW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+6
// 4900   unsigned char u8i;
// 4901   
// 4902   array(0x08, 1);
        MOV       X, #0x1            ;; 1 cycle
        MOV       A, #0x8            ;; 1 cycle
          CFI FunCall _array
        CALL      _array             ;; 3 cycles
// 4903   
// 4904   for(u8i= 1; u8i <= 8; u8i++)
        MOV       A, #0x1            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 8 cycles
??Tarrif_script_0:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BNC       ??dlms_reset_data_426  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4905   {
// 4906     structure(0x02); /* 7 bytes one  structure */
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 4907     long_unsign();
          CFI FunCall _long_unsign
        CALL      _long_unsign       ;; 3 cycles
// 4908     info[k++]= u8i;  /* script_id[1] */
        MOV       A, [SP]            ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4909     array(0,0);
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _array
        CALL      _array             ;; 3 cycles
// 4910   }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??Tarrif_script_0  ;; 3 cycles
        ; ------------------------------------- Block: 23 cycles
// 4911   
// 4912   info_total= k;
??dlms_reset_data_426:
        MOVW      AX, N:_k           ;; 1 cycle
        MOVW      N:_info_total, AX  ;; 1 cycle
// 4913 }
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock77
        ; ------------------------------------- Block: 9 cycles
        ; ------------------------------------- Total: 46 cycles
// 4914 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock78 Using cfiCommon0
          CFI Function _buffer_instantaneous_parameter
        CODE
// 4915 void buffer_instantaneous_parameter(void)
// 4916 {
_buffer_instantaneous_parameter:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 2
        SUBW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+6
// 4917   uint8_t u8temp= 0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 4918   
// 4919   k= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 4920   Start_Info2();
          CFI FunCall _Start_Info2
        CALL      _Start_Info2       ;; 3 cycles
// 4921   k= 15;
        MOVW      AX, #0xF           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 4922   
// 4923   block_no= 1;
        MOVW      AX, #0x1           ;; 1 cycle
        MOVW      N:_block_no, AX    ;; 1 cycle
// 4924   array(1, 0);
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0x1            ;; 1 cycle
          CFI FunCall _array
        CALL      _array             ;; 3 cycles
// 4925   if(CUM_MAX_DEMAND == 1)
        CMP       N:_CUM_MAX_DEMAND, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_427  ;; 4 cycles
        ; ------------------------------------- Block: 22 cycles
// 4926     structure(instantaneous_parameter_cap_obj[0]);
        MOV       A, N:_instantaneous_parameter_cap_obj  ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
        BR        S:??dlms_reset_data_428  ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 4927   else
// 4928     structure(instantaneous_parameter_cap_obj[0] - 2);
??dlms_reset_data_427:
        MOV       A, N:_instantaneous_parameter_cap_obj  ;; 1 cycle
        ADD       A, #0xFE           ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
          CFI FunCall _inst_data_fill
        ; ------------------------------------- Block: 5 cycles
// 4929   inst_data_fill();
??dlms_reset_data_428:
        CALL      _inst_data_fill    ;; 3 cycles
// 4930   multi_filling_f= 0;
        MOV       N:_multi_filling_f, #0x0  ;; 1 cycle
// 4931   buffer_first_not_fill_f= 0;
        MOV       N:_buffer_first_not_fill_f, #0x0  ;; 1 cycle
// 4932   u8temp= 1;
        MOV       A, #0x1            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 4933   send_data(u8temp);
        MOV       A, [SP]            ;; 1 cycle
          CFI FunCall _send_data
        CALL      _send_data         ;; 3 cycles
// 4934 }
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock78
        ; ------------------------------------- Block: 18 cycles
        ; ------------------------------------- Total: 52 cycles
// 4935 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock79 Using cfiCommon0
          CFI Function _fill_firmware_version
          CFI NoCalls
        CODE
// 4936 void fill_firmware_version(void)
// 4937 {
_fill_firmware_version:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 2
        SUBW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+6
// 4938   uint16_t firm_version;
// 4939   uint8_t lu8_i;
// 4940   
// 4941   info[k++]= 0x0A;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xA            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4942   info[k++]= 11;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xB            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4943   for(lu8_i=0; lu8_i<6;  lu8_i++)
        MOV       H, #0x0            ;; 1 cycle
        ; ------------------------------------- Block: 12 cycles
??fill_firmware_version_0:
        MOV       A, H               ;; 1 cycle
        CMP       A, #0x6            ;; 1 cycle
        BNC       ??dlms_reset_data_429  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 4944   {
// 4945     info[k++]= dlms_firm_ver[lu8_i];
        XCH       A, H               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       A, (_dlms_firm_ver)[B]  ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4946   }
        INC       H                  ;; 1 cycle
        BR        S:??fill_firmware_version_0  ;; 3 cycles
        ; ------------------------------------- Block: 12 cycles
// 4947   
// 4948   firm_version= (uint16_t)((uint16_t)dlms_firm_ver[6] * 256 + dlms_firm_ver[7]);
??dlms_reset_data_429:
        MOV       X, N:_dlms_firm_ver+6  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOV       C, N:_dlms_firm_ver+7  ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        ADDW      AX, BC             ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
// 4949   
// 4950   info[k++]= 0x30 + firm_version / 10000;
        MOVW      DE, #0x2710        ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       A, #0x30           ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4951   info[k++]= 0x30 + (firm_version / 1000) % 10;
        MOVW      DE, #0xA           ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+8
        POP       BC                 ;; 1 cycle
          CFI CFA SP+6
        MOVW      DE, #0x3E8         ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        POP       DE                 ;; 1 cycle
          CFI CFA SP+6
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        MOV       A, E               ;; 1 cycle
        ADD       A, #0x30           ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4952   info[k++]= 0x30 + (firm_version % 1000) / 100;
        MOVW      BC, #0x64          ;; 1 cycle
        MOVW      DE, #0x3E8         ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        POP       DE                 ;; 1 cycle
          CFI CFA SP+6
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       A, #0x30           ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4953   info[k++]= 0x30 + (firm_version % 100) / 10;
        MOVW      BC, #0xA           ;; 1 cycle
        MOVW      DE, #0x64          ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        POP       DE                 ;; 1 cycle
          CFI CFA SP+6
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       A, #0x30           ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4954   info[k++]= 0x30 + firm_version % 10;
        MOVW      DE, #0xA           ;; 1 cycle
        MOVW      AX, [SP]           ;; 1 cycle
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        MOV       A, E               ;; 1 cycle
        ADD       A, #0x30           ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 4955 }
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock79
        ; ------------------------------------- Block: 149 cycles
        ; ------------------------------------- Total: 179 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock80 Using cfiCommon0
          CFI Function _vBlock_transfer_list
        CODE
// 4956 void vBlock_transfer_list(void)
// 4957 {
_vBlock_transfer_list:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 4958   switch(obis_short)
        MOVW      BC, N:_obis_short+2  ;; 1 cycle
        MOVW      AX, N:_obis_short  ;; 1 cycle
        MOVW      HL, #LWRD(??vBlock_transfer_list_0)  ;; 1 cycle
        MOV       ES, #BYTE3(??vBlock_transfer_list_0)  ;; 1 cycle
        MOV       CS, #BYTE3(_vBlock_transfer_list)  ;; 1 cycle
        BR        N:?L_VSWITCH_L10   ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 4959   {
// 4960   case 0x00280000:
// 4961   case 0x00280001:
// 4962   case 0x00280002:
// 4963   case 0x00280003:
// 4964     if((attribute_id == 2))
??vBlock_transfer_list_1:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        SKNZ                         ;; 1 cycle
          CFI FunCall _object_list
        ; ------------------------------------- Block: 2 cycles
// 4965     {
// 4966       object_list();
        CALL      _object_list       ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 4967     }
// 4968     
// 4969     break;
??vBlock_transfer_list_2:
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 6 cycles
// 4970   case 0x000d0000:
// 4971     if((attribute_id == 5))
??vBlock_transfer_list_3:
        CMP       N:_attribute_id, #0x5  ;; 1 cycle
        BNZ       ??dlms_reset_data_430  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4972     {
// 4973       if(active_calendar == 0)
        CMP0      N:_active_calendar  ;; 1 cycle
        BNZ       ??dlms_reset_data_431  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4974         day_profile(0);
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _day_profile
        CALL      _day_profile       ;; 3 cycles
        BR        S:??dlms_reset_data_430  ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 4975       else if(active_calendar == 1)
??dlms_reset_data_431:
        CMP       N:_active_calendar, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_430  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4976         day_profile(1);
        MOV       A, #0x1            ;; 1 cycle
          CFI FunCall _day_profile
        CALL      _day_profile       ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 4977     }
// 4978     if(attribute_id == 9)
??dlms_reset_data_430:
        CMP       N:_attribute_id, #0x9  ;; 1 cycle
        BNZ       ??dlms_reset_data_432  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4979     {
// 4980       if(active_calendar == 0)
        CMP0      N:_active_calendar  ;; 1 cycle
        BNZ       ??dlms_reset_data_433  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4981         day_profile(1);
        MOV       A, #0x1            ;; 1 cycle
          CFI FunCall _day_profile
        CALL      _day_profile       ;; 3 cycles
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 10 cycles
// 4982       else if(active_calendar == 1)
??dlms_reset_data_433:
        CMP       N:_active_calendar, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_432  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4983         day_profile(0);
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _day_profile
        CALL      _day_profile       ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 4984     }
// 4985     break;
??dlms_reset_data_432:
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 6 cycles
// 4986   case 0x01620100:
// 4987     if(attribute_id == 2)
??vBlock_transfer_list_4:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        SKNZ                         ;; 1 cycle
          CFI FunCall _bill_buffer
        ; ------------------------------------- Block: 2 cycles
// 4988     {
// 4989       bill_buffer();
        CALL      _bill_buffer       ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 4990     }
// 4991     
// 4992     if(attribute_id == 3)
??vBlock_transfer_list_5:
        CMP       N:_attribute_id, #0x3  ;; 1 cycle
        BNZ       ??dlms_reset_data_434  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 4993     {
// 4994       capture_objects_filler(bill_profile_parameter_cap_obj);
        MOVW      AX, #LWRD(_bill_profile_parameter_cap_obj)  ;; 1 cycle
          CFI FunCall _capture_objects_filler
        CALL      _capture_objects_filler  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 4995     }
// 4996     
// 4997     break;
??dlms_reset_data_434:
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 6 cycles
// 4998   case 0x00636200:
// 4999     if(attribute_id == 2)
??vBlock_transfer_list_6:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_435  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5000     {
// 5001       tamper_compart(COMPART_VOLTAGE_ENTRIES, COMPART_VOLTAGE_START_ADD, COMPART_VOLTAGE_END_ADD, COMPART_VOLTAGE_SIZE, 0);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        MOV       X, N:_COMPART_VOLTAGE_SIZE  ;; 1 cycle
        MOVW      DE, N:_COMPART_VOLTAGE_END_ADD  ;; 1 cycle
        MOVW      BC, N:_COMPART_VOLTAGE_START_ADD  ;; 1 cycle
        MOV       A, N:_COMPART_VOLTAGE_ENTRIES  ;; 1 cycle
          CFI FunCall _tamper_compart
        CALL      _tamper_compart    ;; 3 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+4
        ; ------------------------------------- Block: 10 cycles
// 5002     }
// 5003     if(attribute_id == 3)
??dlms_reset_data_435:
        CMP       N:_attribute_id, #0x3  ;; 1 cycle
        BNZ       ??dlms_reset_data_436  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5004     {
// 5005       capture_objects_filler(voltage_event_capture_obj);
        MOVW      AX, #LWRD(_voltage_event_capture_obj)  ;; 1 cycle
          CFI FunCall _capture_objects_filler
        CALL      _capture_objects_filler  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5006     }
// 5007     break;
??dlms_reset_data_436:
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 6 cycles
// 5008     
// 5009   case 0x00636201:
// 5010     if(attribute_id == 2)
??vBlock_transfer_list_7:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_437  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5011     {
// 5012       tamper_compart(COMPART_CURRENT_ENTRIES, COMPART_CURRENT_START_ADD, COMPART_CURRENT_END_ADD, COMPART_CURRENT_SIZE, 0);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        MOV       X, N:_COMPART_CURRENT_SIZE  ;; 1 cycle
        MOVW      DE, N:_COMPART_CURRENT_END_ADD  ;; 1 cycle
        MOVW      BC, N:_COMPART_CURRENT_START_ADD  ;; 1 cycle
        MOV       A, N:_COMPART_CURRENT_ENTRIES  ;; 1 cycle
          CFI FunCall _tamper_compart
        CALL      _tamper_compart    ;; 3 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+4
        ; ------------------------------------- Block: 10 cycles
// 5013     }
// 5014     if(attribute_id == 3)
??dlms_reset_data_437:
        CMP       N:_attribute_id, #0x3  ;; 1 cycle
        BNZ       ??dlms_reset_data_438  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5015     {
// 5016       capture_objects_filler(current_event_capture_obj);
        MOVW      AX, #LWRD(_current_event_capture_obj)  ;; 1 cycle
          CFI FunCall _capture_objects_filler
        CALL      _capture_objects_filler  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5017     }
// 5018     break;
??dlms_reset_data_438:
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 6 cycles
// 5019   case 0x00636202:
// 5020     if(attribute_id == 2)
??vBlock_transfer_list_8:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        SKNZ                         ;; 1 cycle
          CFI FunCall _compartment3
        ; ------------------------------------- Block: 2 cycles
// 5021     {
// 5022       compartment3();
        CALL      _compartment3      ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 5023     }
// 5024     
// 5025     if(attribute_id == 3)
??vBlock_transfer_list_9:
        CMP       N:_attribute_id, #0x3  ;; 1 cycle
        BNZ       ??dlms_reset_data_439  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5026     {
// 5027       capture_objects_filler(power_event_capture_obj);
        MOVW      AX, #LWRD(_power_event_capture_obj)  ;; 1 cycle
          CFI FunCall _capture_objects_filler
        CALL      _capture_objects_filler  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5028     }
// 5029     break;
??dlms_reset_data_439:
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 6 cycles
// 5030     
// 5031   case 0x00636203:
// 5032     if(attribute_id == 2)
??vBlock_transfer_list_10:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_440  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5033     {
// 5034       tamper_compart(COMPART_TRANSACTION_ENTRIES, COMPART_TRANSACTION_START_ADD, COMPART_TRANSACTION_END_ADD, COMPART_TRANSACTION_SIZE, 0);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        MOV       X, N:_COMPART_TRANSACTION_SIZE  ;; 1 cycle
        MOVW      DE, N:_COMPART_TRANSACTION_END_ADD  ;; 1 cycle
        MOVW      BC, N:_COMPART_TRANSACTION_START_ADD  ;; 1 cycle
        MOV       A, N:_COMPART_TRANSACTION_ENTRIES  ;; 1 cycle
          CFI FunCall _tamper_compart
        CALL      _tamper_compart    ;; 3 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+4
        ; ------------------------------------- Block: 10 cycles
// 5035     }
// 5036     if(attribute_id == 3)
??dlms_reset_data_440:
        CMP       N:_attribute_id, #0x3  ;; 1 cycle
        BNZ       ??dlms_reset_data_441  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5037     {
// 5038       capture_objects_filler(transaction_event_capture_obj);
        MOVW      AX, #LWRD(_transaction_event_capture_obj)  ;; 1 cycle
          CFI FunCall _capture_objects_filler
        CALL      _capture_objects_filler  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5039     }
// 5040     break;
??dlms_reset_data_441:
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 6 cycles
// 5041     
// 5042   case 0x00636204:
// 5043     if(attribute_id == 2)
??vBlock_transfer_list_11:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_442  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5044     {
// 5045       tamper_compart(COMPART_OTHERS_ENTRIES, COMPART_OTHERS_START_ADD, COMPART_OTHERS_END_ADD, COMPART_OTHERS_SIZE, 0);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        MOV       X, N:_COMPART_OTHERS_SIZE  ;; 1 cycle
        MOVW      DE, N:_COMPART_OTHERS_END_ADD  ;; 1 cycle
        MOVW      BC, N:_COMPART_OTHERS_START_ADD  ;; 1 cycle
        MOV       A, N:_COMPART_OTHERS_ENTRIES  ;; 1 cycle
          CFI FunCall _tamper_compart
        CALL      _tamper_compart    ;; 3 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+4
        ; ------------------------------------- Block: 10 cycles
// 5046     }
// 5047     if(attribute_id == 3)
??dlms_reset_data_442:
        CMP       N:_attribute_id, #0x3  ;; 1 cycle
        BNZ       ??dlms_reset_data_443  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5048     {
// 5049       capture_objects_filler(other_event_capture_obj);
        MOVW      AX, #LWRD(_other_event_capture_obj)  ;; 1 cycle
          CFI FunCall _capture_objects_filler
        CALL      _capture_objects_filler  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5050     }
// 5051     break;
??dlms_reset_data_443:
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 6 cycles
// 5052     
// 5053   case 0x00636205:
// 5054     if(attribute_id == 3)
??vBlock_transfer_list_12:
        CMP       N:_attribute_id, #0x3  ;; 1 cycle
        BNZ       ??dlms_reset_data_444  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5055     {
// 5056       capture_objects_filler(non_rollover_event_capture_obj);
        MOVW      AX, #LWRD(_non_rollover_event_capture_obj)  ;; 1 cycle
          CFI FunCall _capture_objects_filler
        CALL      _capture_objects_filler  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5057     }
// 5058     
// 5059     break;
??dlms_reset_data_444:
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 6 cycles
// 5060     
// 5061   case 0x00636263:
// 5062     if(attribute_id == 3)
??vBlock_transfer_list_13:
        CMP       N:_attribute_id, #0x3  ;; 1 cycle
        BNZ       ??dlms_reset_data_445  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5063     {
// 5064       capture_objects_filler(debug_event_capture_obj);
        MOVW      AX, #LWRD(_debug_event_capture_obj)  ;; 1 cycle
          CFI FunCall _capture_objects_filler
        CALL      _capture_objects_filler  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5065     }
// 5066     break;        
??dlms_reset_data_445:
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 6 cycles
// 5067   case 0x015e5b00:
// 5068     if(attribute_id == 3)
??vBlock_transfer_list_14:
        CMP       N:_attribute_id, #0x3  ;; 1 cycle
        BNZ       ??dlms_reset_data_446  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5069     {
// 5070       capture_objects_filler(instantaneous_parameter_cap_obj);
        MOVW      AX, #LWRD(_instantaneous_parameter_cap_obj)  ;; 1 cycle
          CFI FunCall _capture_objects_filler
        CALL      _capture_objects_filler  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5071     }
// 5072     
// 5073     break;
??dlms_reset_data_446:
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 6 cycles
// 5074   case 0x015e5b03:
// 5075     if(attribute_id == 2)
??vBlock_transfer_list_15:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_447  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5076     {
// 5077       buffer_scaler_filler(instantaneous_parameter_scaler_buffer);
        MOVW      AX, #LWRD(_instantaneous_parameter_scaler_buffer)  ;; 1 cycle
          CFI FunCall _buffer_scaler_filler
        CALL      _buffer_scaler_filler  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5078     }
// 5079     
// 5080     if(attribute_id == 3)
??dlms_reset_data_447:
        CMP       N:_attribute_id, #0x3  ;; 1 cycle
        BNZ       ??dlms_reset_data_448  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5081     {
// 5082       capture_objects_filler(instantaneous_parameter_scaler_cap_obj);
        MOVW      AX, #LWRD(_instantaneous_parameter_scaler_cap_obj)  ;; 1 cycle
          CFI FunCall _capture_objects_filler
        CALL      _capture_objects_filler  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5083     }
// 5084     
// 5085     break;
??dlms_reset_data_448:
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 6 cycles
// 5086   case 0x015e5b04:
// 5087     if(attribute_id == 3)
??vBlock_transfer_list_16:
        CMP       N:_attribute_id, #0x3  ;; 1 cycle
        BNZ       ??dlms_reset_data_449  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5088     {
// 5089       capture_objects_filler(blockload_survey_parameter_scaler_cap_obj);
        MOVW      AX, #LWRD(_blockload_survey_parameter_scaler_cap_obj)  ;; 1 cycle
          CFI FunCall _capture_objects_filler
        CALL      _capture_objects_filler  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5090     }
// 5091     
// 5092     break;
??dlms_reset_data_449:
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 6 cycles
// 5093   case 0x015e5b05:
// 5094     if(attribute_id == 3)
??vBlock_transfer_list_17:
        CMP       N:_attribute_id, #0x3  ;; 1 cycle
        BNZ       ??dlms_reset_data_450  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5095     {
// 5096       capture_objects_filler(dailyload_profile_parameter_scaler_cap_obj);
        MOVW      AX, #LWRD(_dailyload_profile_parameter_scaler_cap_obj)  ;; 1 cycle
          CFI FunCall _capture_objects_filler
        CALL      _capture_objects_filler  ;; 3 cycles
// 5097     }
// 5098     
// 5099     break;
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 10 cycles
// 5100     
// 5101   case 0x015e5b06:
// 5102     if(attribute_id == 3)
??vBlock_transfer_list_18:
        CMP       N:_attribute_id, #0x3  ;; 1 cycle
        BNZ       ??dlms_reset_data_451  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5103     {
// 5104       capture_objects_filler(bill_profile_parameter_scaler_cap_obj);
        MOVW      AX, #LWRD(_bill_profile_parameter_scaler_cap_obj)  ;; 1 cycle
          CFI FunCall _capture_objects_filler
        CALL      _capture_objects_filler  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5105     }
// 5106     
// 5107     if(attribute_id == 2)
??dlms_reset_data_451:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_450  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5108     {
// 5109       buffer_scaler_filler(bill_profile_parameter_scaler_buffer);
        MOVW      AX, #LWRD(_bill_profile_parameter_scaler_buffer)  ;; 1 cycle
          CFI FunCall _buffer_scaler_filler
        CALL      _buffer_scaler_filler  ;; 3 cycles
// 5110     }
// 5111     
// 5112     break;
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 10 cycles
// 5113   case 0x015e5b07:
// 5114     if(attribute_id == 3)
??vBlock_transfer_list_19:
        CMP       N:_attribute_id, #0x3  ;; 1 cycle
        BNZ       ??dlms_reset_data_450  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5115     {
// 5116       capture_objects_filler(event_log_profile_scaler_cap_obj);
        MOVW      AX, #LWRD(_event_log_profile_scaler_cap_obj)  ;; 1 cycle
          CFI FunCall _capture_objects_filler
        CALL      _capture_objects_filler  ;; 3 cycles
// 5117     }
// 5118     
// 5119     break;
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 10 cycles
// 5120     
// 5121   case 0x01630100:
// 5122     if(attribute_id == 2)
??vBlock_transfer_list_20:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_450  ;; 4 cycles
          CFI FunCall _Sel_Loadsurvey_buffer
        ; ------------------------------------- Block: 5 cycles
// 5123     {
// 5124       Sel_Loadsurvey_buffer();
        CALL      _Sel_Loadsurvey_buffer  ;; 3 cycles
// 5125     }
// 5126     
// 5127     break;
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 9 cycles
// 5128     
// 5129   case 0x01630200:
// 5130     if(attribute_id == 2)
??vBlock_transfer_list_21:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_450  ;; 4 cycles
          CFI FunCall _Sel_DailyLoadsurvey_buffer
        ; ------------------------------------- Block: 5 cycles
// 5131     {
// 5132       Sel_DailyLoadsurvey_buffer();
        CALL      _Sel_DailyLoadsurvey_buffer  ;; 3 cycles
// 5133     }
// 5134     
// 5135     break;
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 9 cycles
// 5136     
// 5137   case 0x005e5b0a:
// 5138     if(attribute_id == 2)
??vBlock_transfer_list_22:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        SKNZ                         ;; 1 cycle
          CFI FunCall _name_plate_buffer
        ; ------------------------------------- Block: 2 cycles
// 5139     {
// 5140       name_plate_buffer();
        CALL      _name_plate_buffer  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 5141     }
// 5142     
// 5143     if(attribute_id == 3)
??vBlock_transfer_list_23:
        CMP       N:_attribute_id, #0x3  ;; 1 cycle
        BNZ       ??dlms_reset_data_450  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5144     {
// 5145       capture_objects_filler(name_plate_profile_capture_obj);
        MOVW      AX, #LWRD(_name_plate_profile_capture_obj)  ;; 1 cycle
          CFI FunCall _capture_objects_filler
        CALL      _capture_objects_filler  ;; 3 cycles
// 5146     }
// 5147     
// 5148     break;
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 10 cycles
// 5149     
// 5150   default:
// 5151     if(seg_flagsd == 0) /* elserr */
??vBlock_transfer_list_24:
        CMP0      N:_seg_flagsd      ;; 1 cycle
        BNZ       ??dlms_reset_data_450  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5152     {
// 5153       if(nrm_flag == 1) /* ifnrm */
        CMP       N:_nrm_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_452  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5154       {
// 5155         fill_A0(0x11);
        MOV       A, #0x11           ;; 1 cycle
          CFI FunCall _fill_A0
        CALL      _fill_A0           ;; 3 cycles
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 10 cycles
// 5156       }    /* ifnrm */
// 5157       else /* elnrm */
// 5158       {
// 5159         fill_A0(0x97);
??dlms_reset_data_452:
        MOV       A, #0x97           ;; 1 cycle
          CFI FunCall _fill_A0
        CALL      _fill_A0           ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5160       } /* ielnrm */
// 5161       
// 5162     } /* elserr */
// 5163     
// 5164     break;
// 5165   }
// 5166 }
??dlms_reset_data_450:
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock80
        ; ------------------------------------- Block: 6 cycles
        ; ------------------------------------- Total: 456 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock81 Using cfiCommon0
          CFI Function _data_dec
        CODE
// 5167 us8 data_dec()
// 5168 { /* data_dec */
_data_dec:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 32
        SUBW      SP, #0x20          ;; 1 cycle
          CFI CFA SP+36
// 5169   uint8_t UcharTemp= 0x00, t1,tem_h, tem_m, tem_s;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
// 5170   uint8_t i_data= 0x00;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x07], A       ;; 1 cycle
// 5171   uint16_t uint_temp= 0x00, lu16_addr; /* ,uint_tempvar=0x00 */
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [SP+0x04], AX      ;; 1 cycle
// 5172   uint8_t m1, lu8_i,lu8_j,lu8_k,week_profile;
// 5173   unsigned char u8tem_m, u8tem_h, u8tem_s, u8tem_mm, u8tem_dd;
// 5174   unsigned short u16tem_yy;
// 5175   switch(info[3]) /* swda */
        MOV       A, N:_info+3       ;; 1 cycle
        SUB       A, #0x60           ;; 1 cycle
        BZ        ??dlms_reset_data_453  ;; 4 cycles
        ; ------------------------------------- Block: 13 cycles
        SUB       A, #0x60           ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_454  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        DEC       A                  ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_455  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        SUB       A, #0x2            ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_456  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 5176   {
// 5177   case 0x60:
// 5178     ass_ser= 0xA1;
??dlms_reset_data_453:
        MOV       N:_ass_ser, #0xA1  ;; 1 cycle
// 5179     if(info[4] != byte_cont - 4) /* ifasslen */
        MOVW      AX, N:_byte_cont   ;; 1 cycle
        ADDW      AX, #0xFFFC        ;; 1 cycle
        MOV       C, N:_info+4       ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        CMPW      AX, BC             ;; 1 cycle
        BZ        ??dlms_reset_data_458  ;; 4 cycles
        ; ------------------------------------- Block: 10 cycles
// 5180     {                            /* printf("\nerror in length"); */
// 5181       asserr_flag= 1;
        MOV       N:_asserr_flag, #0x1  ;; 1 cycle
// 5182       return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 5183     } /* ifasslen */
// 5184     
// 5185     k= 5;
??dlms_reset_data_458:
        MOVW      AX, #0x5           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 5186     /* protocol version */
// 5187     if((info[5] == 0xA0) || (info[5] == 0x80)) /* if protocol version */
        CMP       N:_info+5, #0xA0   ;; 1 cycle
        BZ        ??dlms_reset_data_460  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        CMP       N:_info+5, #0x80   ;; 1 cycle
        BNZ       ??dlms_reset_data_461  ;; 4 cycles
          CFI FunCall _update_k
        ; ------------------------------------- Block: 5 cycles
// 5188     {                                          /* k++; */
// 5189       /* k=info[k++]+k; */
// 5190       update_k();
??dlms_reset_data_460:
        CALL      _update_k          ;; 3 cycles
// 5191       if((info[k - 1] != 0x01) && (info[k - 1] != 0x84)) /* prtocol version default 22/02/2007 */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info-1)[BC]   ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BZ        ??dlms_reset_data_461  ;; 4 cycles
        ; ------------------------------------- Block: 10 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info-1)[BC]   ;; 1 cycle
        CMP       A, #0x84           ;; 1 cycle
        BZ        ??dlms_reset_data_461  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5192       {                                                  /* ifapplen */
// 5193         asserr_flag= 2;
        MOV       N:_asserr_flag, #0x2  ;; 1 cycle
// 5194         ass_ser= 0xA2;
        MOV       N:_ass_ser, #0xA2  ;; 1 cycle
// 5195         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 5196       } /* ifapplen */
// 5197       
// 5198     } /* if protocol version */
// 5199     
// 5200     /* protocol version */
// 5201     
// 5202     /* application context name */
// 5203     if(info[k] == 0xA1) /* ifapp_context_name */
??dlms_reset_data_461:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0xA1           ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_462  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5204     {
// 5205       k++;
        INCW      N:_k               ;; 2 cycles
// 5206       if((info[k] != 0x09) || (info[k + 1] != 0x06) || (info[k + 2] != 0x07)) /* ifapplen */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BNZ       ??dlms_reset_data_463  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP       A, #0x6            ;; 1 cycle
        BNZ       ??dlms_reset_data_463  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+2)[BC]   ;; 1 cycle
        CMP       A, #0x7            ;; 1 cycle
        BZ        ??dlms_reset_data_464  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5207       {
// 5208         asserr_flag= 1;
??dlms_reset_data_463:
        MOV       N:_asserr_flag, #0x1  ;; 1 cycle
// 5209         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 5210       }                                                                                                                                                                                    /* ifapplen */
// 5211       else if((info[k + 3] != 0x60) || (info[k + 4] != 0x85) || (info[k + 5] != 0x74) || (info[k + 6] != 0x05) || (info[k + 7] != 0x08) || (info[k + 8] != 0x01) || (info[k + 9] != 0x01)) /* ifobjname[0] */
??dlms_reset_data_464:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+3)[BC]   ;; 1 cycle
        CMP       A, #0x60           ;; 1 cycle
        BNZ       ??dlms_reset_data_465  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+4)[BC]   ;; 1 cycle
        CMP       A, #0x85           ;; 1 cycle
        BNZ       ??dlms_reset_data_465  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+5)[BC]   ;; 1 cycle
        CMP       A, #0x74           ;; 1 cycle
        BNZ       ??dlms_reset_data_465  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+6)[BC]   ;; 1 cycle
        CMP       A, #0x5            ;; 1 cycle
        BNZ       ??dlms_reset_data_465  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+7)[BC]   ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNZ       ??dlms_reset_data_465  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+8)[BC]   ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_465  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+9)[BC]   ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BZ        ??dlms_reset_data_466  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5212       {
// 5213         asserr_flag= 2;
??dlms_reset_data_465:
        MOV       N:_asserr_flag, #0x2  ;; 1 cycle
// 5214         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 5215       } /* ifobjname[0] */
// 5216       
// 5217       k= k + 10;
??dlms_reset_data_466:
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0xA           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 5218     } /* ifapp_context_name */
// 5219     
// 5220     /* application context name */
// 5221     
// 5222     /* called -AP-title */
// 5223     if(info[k] == 0xA2) /* check with mr. dinesh is it can be else if, if yes then can be use switch */
??dlms_reset_data_462:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0xA2           ;; 1 cycle
        SKNZ                         ;; 1 cycle
          CFI FunCall _update_k
        ; ------------------------------------- Block: 4 cycles
// 5224     {                   /* if called -AP-title */
// 5225       update_k();
        CALL      _update_k          ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 5226     } /* if called -AP-title */
// 5227     
// 5228     /* called -AP-title */
// 5229     
// 5230     /* called -AE-Qualifier */
// 5231     if(info[k] == 0xA3) /* if called -AE-Qualifier */
??data_dec_1:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0xA3           ;; 1 cycle
        SKNZ                         ;; 1 cycle
          CFI FunCall _update_k
        ; ------------------------------------- Block: 4 cycles
// 5232     {
// 5233       update_k();
        CALL      _update_k          ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 5234     } /* if called -AE-Qualifier */
// 5235     
// 5236     /* called -AE-Qualifier */
// 5237     
// 5238     /* called-AP-invocation id */
// 5239     if(info[k] == 0xA4) /* if called -AP-invocation id */
??data_dec_2:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0xA4           ;; 1 cycle
        SKNZ                         ;; 1 cycle
          CFI FunCall _update_k
        ; ------------------------------------- Block: 4 cycles
// 5240     {
// 5241       update_k();
        CALL      _update_k          ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 5242     } /* if called -AP-invocation id */
// 5243     
// 5244     /* called -AP-invocation id */
// 5245     
// 5246     /* called-AE-invocation id */
// 5247     if(info[k] == 0xA5) /* if called -AE-invocation id */
??data_dec_3:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0xA5           ;; 1 cycle
        SKNZ                         ;; 1 cycle
          CFI FunCall _update_k
        ; ------------------------------------- Block: 4 cycles
// 5248     {
// 5249       update_k();
        CALL      _update_k          ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 5250     } /* if called -AE-invocation id */
// 5251     
// 5252     /* called -AE-invocation id */
// 5253     
// 5254     /* calling -AP-title */
// 5255     if(info[k] == 0xA6) /* if calling -AP-title */
??data_dec_4:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0xA6           ;; 1 cycle
        SKNZ                         ;; 1 cycle
          CFI FunCall _update_k
        ; ------------------------------------- Block: 4 cycles
// 5256     {
// 5257       update_k();
        CALL      _update_k          ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 5258     } /* if calling -AP-title */
// 5259     
// 5260     /* calling -AP-title */
// 5261     
// 5262     /* calling -AE-Qualifier */
// 5263     if(info[k] == 0xA7) /* if calling -AE-Qualifier */
??data_dec_5:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0xA7           ;; 1 cycle
        SKNZ                         ;; 1 cycle
          CFI FunCall _update_k
        ; ------------------------------------- Block: 4 cycles
// 5264     {
// 5265       update_k();
        CALL      _update_k          ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 5266     } /* if calling -AE-Qualifier */
// 5267     
// 5268     /* calling -AE-Qualifier */
// 5269     
// 5270     /* calling-AP-invocation id */
// 5271     if(info[k] == 0xA8) /* if calling -AP-invocation id */
??data_dec_6:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0xA8           ;; 1 cycle
        SKNZ                         ;; 1 cycle
          CFI FunCall _update_k
        ; ------------------------------------- Block: 4 cycles
// 5272     {
// 5273       update_k();
        CALL      _update_k          ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 5274     } /* if calling -AP-invocation id */
// 5275     
// 5276     /* calling -AP-invocation id */
// 5277     
// 5278     /* calling-AE-invocation id */
// 5279     if(info[k] == 0xA9) /* if calling -AE-invocation id */
??data_dec_7:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0xA9           ;; 1 cycle
        SKNZ                         ;; 1 cycle
          CFI FunCall _update_k
        ; ------------------------------------- Block: 4 cycles
// 5280     {
// 5281       update_k();
        CALL      _update_k          ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 5282     } /* if calling -AE-invocation id */
// 5283     
// 5284     /* calling -AE-invocation id */
// 5285     /*                      if(one_byte_add_f!=1)
// 5286     {
// 5287     server_upperhi=rec[3];
// 5288     server_upperlow=rec[4];
// 5289     server_lowerhi=rec[5];
// 5290     server_lowerlow=rec[6];
// 5291     client_add=rec[7];
// 5292   } else
// 5293     {
// 5294     server_lowerlow=rec[3];
// 5295     client_add=rec[4];
// 5296   } */
// 5297     if((client_add == 0x41) || (client_add == 0x61) || (client_add == 0x81)) /* iflen */
??data_dec_8:
        CMP       N:_client_add, #0x41  ;; 1 cycle
        BZ        ??dlms_reset_data_467  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_client_add, #0x61  ;; 1 cycle
        BZ        ??dlms_reset_data_467  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_client_add, #0x81  ;; 1 cycle
        BNZ       ??dlms_reset_data_468  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5298     {
// 5299       if(info[k] != 0x8A) /* iflow */
??dlms_reset_data_467:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x8A           ;; 1 cycle
        BZ        ??dlms_reset_data_468  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5300       {
// 5301         asserr_flag= 0x0C;
        MOV       N:_asserr_flag, #0xC  ;; 1 cycle
// 5302         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 5303       } /* iflow */
// 5304       
// 5305     } /* iflen */
// 5306     
// 5307     four_pass_f= 0;
??dlms_reset_data_468:
        MOV       N:_four_pass_f, #0x0  ;; 1 cycle
// 5308     /* sender ACSE requirement field */
// 5309     if(info[k] == 0x8A) /* ifacse */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x8A           ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_469  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 5310     {
// 5311       k++;
        INCW      N:_k               ;; 2 cycles
// 5312       if(info[k] != 0x02 || info[k + 1] != 0x07 || info[k + 2] != 0x80)
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BNZ       ??dlms_reset_data_470  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP       A, #0x7            ;; 1 cycle
        BNZ       ??dlms_reset_data_470  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+2)[BC]   ;; 1 cycle
        CMP       A, #0x80           ;; 1 cycle
        BZ        ??dlms_reset_data_471  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5313       { //ifobjname[0]
// 5314         asserr_flag= 1;
??dlms_reset_data_470:
        MOV       N:_asserr_flag, #0x1  ;; 1 cycle
// 5315         return 0;
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 5316       }
// 5317       if((info[k] != 0x02) || (info[k + 1] != 0x07) || (info[k + 2] != 0x80) || (info[k + 3] != 0x8B) || (info[k + 4] != 0x07) || (info[k + 5] != 0x60) || (info[k + 6] != 0x85) || (info[k + 7] != 0x74) || (info[k + 8] != 0x05) || (info[k + 9] != 0x08) || (info[k + 10] != 0x02)) /* || ((info[k+11]!=0x01)&&(info[k+11]!=0x02)) || info[k+12]!=0xAC  || info[k+13]!=0x0A || info[k+14]!=0x80 || info[k+15]!=0x08) */
??dlms_reset_data_471:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BNZ       ??dlms_reset_data_472  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP       A, #0x7            ;; 1 cycle
        BNZ       ??dlms_reset_data_472  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+2)[BC]   ;; 1 cycle
        CMP       A, #0x80           ;; 1 cycle
        BNZ       ??dlms_reset_data_472  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+3)[BC]   ;; 1 cycle
        CMP       A, #0x8B           ;; 1 cycle
        BNZ       ??dlms_reset_data_472  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+4)[BC]   ;; 1 cycle
        CMP       A, #0x7            ;; 1 cycle
        BNZ       ??dlms_reset_data_472  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+5)[BC]   ;; 1 cycle
        CMP       A, #0x60           ;; 1 cycle
        BNZ       ??dlms_reset_data_472  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+6)[BC]   ;; 1 cycle
        CMP       A, #0x85           ;; 1 cycle
        BNZ       ??dlms_reset_data_472  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+7)[BC]   ;; 1 cycle
        CMP       A, #0x74           ;; 1 cycle
        BNZ       ??dlms_reset_data_472  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+8)[BC]   ;; 1 cycle
        CMP       A, #0x5            ;; 1 cycle
        BNZ       ??dlms_reset_data_472  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+9)[BC]   ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNZ       ??dlms_reset_data_472  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+10)[BC]  ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BZ        ??dlms_reset_data_473  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5318       {                                                                                                                                                                                                                                                                                /* iflen */
// 5319         asserr_flag= 0x0B;
??dlms_reset_data_472:
        MOV       N:_asserr_flag, #0xB  ;; 1 cycle
// 5320         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 5321       } /* iflen */
// 5322       
// 5323       if(asso2_flag == 1)
??dlms_reset_data_473:
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_474  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5324       {
// 5325         if(info[k + 11] != 0x02) /* HLS-02, LLS-01 */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+11)[BC]  ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BZ        ??dlms_reset_data_475  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5326         {                        /* iflen */
// 5327           asserr_flag= 0x0B;
        MOV       N:_asserr_flag, #0xB  ;; 1 cycle
// 5328           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 5329         } /* iflen */
// 5330         
// 5331         if((info[k + 12] != 0xAC) || (info[k + 13] != 0x12) || (info[k + 14] != 0x80) || (info[k + 15] != 0x10)) /* iflen */
??dlms_reset_data_475:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+12)[BC]  ;; 1 cycle
        CMP       A, #0xAC           ;; 1 cycle
        BNZ       ??dlms_reset_data_476  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+13)[BC]  ;; 1 cycle
        CMP       A, #0x12           ;; 1 cycle
        BNZ       ??dlms_reset_data_476  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+14)[BC]  ;; 1 cycle
        CMP       A, #0x80           ;; 1 cycle
        BNZ       ??dlms_reset_data_476  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+15)[BC]  ;; 1 cycle
        CMP       A, #0x10           ;; 1 cycle
        BZ        ??dlms_reset_data_477  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5332         {
// 5333           asserr_flag= 0x0E;
??dlms_reset_data_476:
        MOV       N:_asserr_flag, #0xE  ;; 1 cycle
// 5334           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 5335         } /* iflen */
// 5336         memcpy(aut_pswd1_1, &info[k + 16], 16);
??dlms_reset_data_477:
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #LWRD(_info+16)  ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      HL, #LWRD(_aut_pswd1_1)  ;; 1 cycle
        MOV       B, #0x10           ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
// 5337         four_pass_f= 1;
        MOV       N:_four_pass_f, #0x1  ;; 1 cycle
        BR        S:??dlms_reset_data_478  ;; 3 cycles
        ; ------------------------------------- Block: 12 cycles
// 5338       }
// 5339       else
// 5340       {
// 5341         if(info[k + 11] != 0x01) /* iflen */
??dlms_reset_data_474:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+11)[BC]  ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BZ        ??dlms_reset_data_479  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5342         {
// 5343           asserr_flag= 0x0B;
        MOV       N:_asserr_flag, #0xB  ;; 1 cycle
// 5344           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 5345         } /* iflen */
// 5346         
// 5347         if((info[k + 12] != 0xAC) || (info[k + 14] != 0x80)) //  || (info[k+13]!=0x0A) || (info[k+15]!=0x08))
??dlms_reset_data_479:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+12)[BC]  ;; 1 cycle
        CMP       A, #0xAC           ;; 1 cycle
        BNZ       ??dlms_reset_data_480  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+14)[BC]  ;; 1 cycle
        CMP       A, #0x80           ;; 1 cycle
        BZ        ??dlms_reset_data_478  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5348         {
// 5349           asserr_flag= 0x0E;
??dlms_reset_data_480:
        MOV       N:_asserr_flag, #0xE  ;; 1 cycle
// 5350           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 5351         } /* iflen */
// 5352       }
// 5353       
// 5354       if(asso1_flag == 1)
??dlms_reset_data_478:
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_481  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5355       {
// 5356         if((info[k + 13] != 0x0A) || (info[k + 15] != 0x08) || (info[k + 16] != aut_pswd[0]) || (info[k + 17] != aut_pswd[1]) || (info[k + 18] != aut_pswd[2]) || (info[k + 19] != aut_pswd[3]) || (info[k + 20] != aut_pswd[4]) || (info[k + 21] != aut_pswd[5]) || (info[k + 22] != aut_pswd[6]) || (info[k + 23] != aut_pswd[7]))
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+13)[BC]  ;; 1 cycle
        CMP       A, #0xA            ;; 1 cycle
        BNZ       ??dlms_reset_data_482  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+15)[BC]  ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNZ       ??dlms_reset_data_482  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+16)[BC]  ;; 1 cycle
        CMP       A, N:_aut_pswd     ;; 1 cycle
        BNZ       ??dlms_reset_data_482  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+17)[BC]  ;; 1 cycle
        CMP       A, N:_aut_pswd+1   ;; 1 cycle
        BNZ       ??dlms_reset_data_482  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+18)[BC]  ;; 1 cycle
        CMP       A, N:_aut_pswd+2   ;; 1 cycle
        BNZ       ??dlms_reset_data_482  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+19)[BC]  ;; 1 cycle
        CMP       A, N:_aut_pswd+3   ;; 1 cycle
        BNZ       ??dlms_reset_data_482  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+20)[BC]  ;; 1 cycle
        CMP       A, N:_aut_pswd+4   ;; 1 cycle
        BNZ       ??dlms_reset_data_482  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+21)[BC]  ;; 1 cycle
        CMP       A, N:_aut_pswd+5   ;; 1 cycle
        BNZ       ??dlms_reset_data_482  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+22)[BC]  ;; 1 cycle
        CMP       A, N:_aut_pswd+6   ;; 1 cycle
        BNZ       ??dlms_reset_data_482  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+23)[BC]  ;; 1 cycle
        CMP       A, N:_aut_pswd+7   ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_483  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5357         {
// 5358           asserr_flag= 0x0D;
??dlms_reset_data_482:
        MOV       N:_asserr_flag, #0xD  ;; 1 cycle
// 5359           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 5360         } /* ifaut_len */
// 5361       }
// 5362       else if(asso2_flag == 1)
??dlms_reset_data_481:
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_484  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5363       {
// 5364         memcpy(aut_pswd1_1, &info[k + 16], 16);
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #LWRD(_info+16)  ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      HL, #LWRD(_aut_pswd1_1)  ;; 1 cycle
        MOV       B, #0x10           ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
// 5365         four_pass_f= 1;
        MOV       N:_four_pass_f, #0x1  ;; 1 cycle
        BR        N:??dlms_reset_data_483  ;; 3 cycles
        ; ------------------------------------- Block: 12 cycles
// 5366       }
// 5367       else if(asso3_flag == 1)
??dlms_reset_data_484:
        CMP       N:_asso3_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_485  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5368       {
// 5369         if((info[k + 13] != 0x0A) || (info[k + 15] != 0x08) || (info[k + 16] != aut_pswd2[0]) || (info[k + 17] != aut_pswd2[1]) || (info[k + 18] != aut_pswd2[2]) || (info[k + 19] != aut_pswd2[3]) || (info[k + 20] != aut_pswd2[4]) || (info[k + 21] != aut_pswd2[5]) || (info[k + 22] != aut_pswd2[6]) || (info[k + 23] != aut_pswd2[7]))
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+13)[BC]  ;; 1 cycle
        CMP       A, #0xA            ;; 1 cycle
        BNZ       ??dlms_reset_data_486  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+15)[BC]  ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNZ       ??dlms_reset_data_486  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+16)[BC]  ;; 1 cycle
        CMP       A, N:_aut_pswd2    ;; 1 cycle
        BNZ       ??dlms_reset_data_486  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+17)[BC]  ;; 1 cycle
        CMP       A, N:_aut_pswd2+1  ;; 1 cycle
        BNZ       ??dlms_reset_data_486  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+18)[BC]  ;; 1 cycle
        CMP       A, N:_aut_pswd2+2  ;; 1 cycle
        BNZ       ??dlms_reset_data_486  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+19)[BC]  ;; 1 cycle
        CMP       A, N:_aut_pswd2+3  ;; 1 cycle
        BNZ       ??dlms_reset_data_486  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+20)[BC]  ;; 1 cycle
        CMP       A, N:_aut_pswd2+4  ;; 1 cycle
        BNZ       ??dlms_reset_data_486  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+21)[BC]  ;; 1 cycle
        CMP       A, N:_aut_pswd2+5  ;; 1 cycle
        BNZ       ??dlms_reset_data_486  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+22)[BC]  ;; 1 cycle
        CMP       A, N:_aut_pswd2+6  ;; 1 cycle
        BNZ       ??dlms_reset_data_486  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+23)[BC]  ;; 1 cycle
        CMP       A, N:_aut_pswd2+7  ;; 1 cycle
        BZ        ??dlms_reset_data_483  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5370         {
// 5371           /* printf("\nerror in password[0]"); */
// 5372           asserr_flag= 0x0D;
??dlms_reset_data_486:
        MOV       N:_asserr_flag, #0xD  ;; 1 cycle
// 5373           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 5374         }
// 5375       }
// 5376       else if(asso0_flag == 1)
??dlms_reset_data_485:
        CMP       N:_asso0_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_483  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5377       {
// 5378         if(info[k + 12] == 0xAC || info[k + 14] == 0x80)
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+12)[BC]  ;; 1 cycle
        CMP       A, #0xAC           ;; 1 cycle
        BZ        ??dlms_reset_data_487  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+14)[BC]  ;; 1 cycle
        CMP       A, #0x80           ;; 1 cycle
        BNZ       ??dlms_reset_data_483  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5379         {
// 5380           asserr_flag= 0x01;
??dlms_reset_data_487:
        MOV       N:_asserr_flag, #0x1  ;; 1 cycle
// 5381           return 0;
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 5382         }
// 5383       }
// 5384       
// 5385       k= k + 24;
??dlms_reset_data_483:
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x18          ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 5386       if(four_pass_f == 1)
        CMP       N:_four_pass_f, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_469  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 5387       {
// 5388         k= k + 8;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 5389       }
// 5390     } /* ifacse */
// 5391     
// 5392     /* sender ACSE requirement field */
// 5393     
// 5394     /* implementation field */
// 5395     if(info[k] == 0xBD) /* if implementation field */
??dlms_reset_data_469:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0xBD           ;; 1 cycle
        BNZ       ??dlms_reset_data_488  ;; 4 cycles
          CFI FunCall _update_k
        ; ------------------------------------- Block: 7 cycles
// 5396     {
// 5397       update_k();
        CALL      _update_k          ;; 3 cycles
// 5398       asserr_flag= 0x01;
        MOV       N:_asserr_flag, #0x1  ;; 1 cycle
// 5399       return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 5400     } /* if implementation field */
// 5401     
// 5402     /* implementation field */
// 5403     /* conf_ser_flag, conf_err_flag,conf_type_flag,conf_serror_flag; */
// 5404     /* user-information+xDLMS initiate.request PDU */
// 5405     if(info[k] == 0xBE) /* ifuser information tag */
??dlms_reset_data_488:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0xBE           ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_457  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5406     {
// 5407       k++;
        INCW      N:_k               ;; 2 cycles
// 5408       if((info[k++] != 0x10) && (info[k - 1] != 0x11)) /* iflen */
        MOVW      BC, N:_k           ;; 1 cycle
        MOVW      AX, BC             ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x10           ;; 1 cycle
        BZ        ??dlms_reset_data_489  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info-1)[BC]   ;; 1 cycle
        CMP       A, #0x11           ;; 1 cycle
        BZ        ??dlms_reset_data_489  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5409       {
// 5410         conf_ser(0x00);	// no security with dedicated key case
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _conf_ser
        CALL      _conf_ser          ;; 3 cycles
// 5411         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 5412       }                                                                                                                                                                                                             /* iflen */
// 5413       else if((info[k] != 0x04) || ((info[k + 1] != 0x0E) && (info[k + 1] != 0x0F)) || (info[k + 2] != 0x01) || (info[k + 3] != 0x00) || (info[k + 4] != 0x00) || ((info[k + 5] != 0x00) && (info[k + 5] != 0x01))) /* ifchoice */
??dlms_reset_data_489:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        BNZ       ??dlms_reset_data_490  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP       A, #0xE            ;; 1 cycle
        BZ        ??dlms_reset_data_491  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP       A, #0xF            ;; 1 cycle
        BNZ       ??dlms_reset_data_490  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
??dlms_reset_data_491:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+2)[BC]   ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_490  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+3)[BC]   ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_490  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+4)[BC]   ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_490  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+5)[BC]   ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BZ        ??dlms_reset_data_492  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+5)[BC]   ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BZ        ??dlms_reset_data_492  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5414       {
// 5415         asserr_flag= 1;
??dlms_reset_data_490:
        MOV       N:_asserr_flag, #0x1  ;; 1 cycle
// 5416         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
          CFI FunCall _info_l6
        ; ------------------------------------- Block: 5 cycles
// 5417       } /* ifchoice */
// 5418       
// 5419       info_l6();
??dlms_reset_data_492:
        CALL      _info_l6           ;; 3 cycles
// 5420       if((info[k - 1] == 0x01)) /* ifinit.req[3] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info-1)[BC]   ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 7 cycles
// 5421       {
// 5422         k++;
        INCW      N:_k               ;; 2 cycles
        ; ------------------------------------- Block: 2 cycles
// 5423       } /* ifinit.req[3] */
// 5424       
// 5425       if(info[k++] < 0x06) /* ifinit.req[4] */
??data_dec_9:
        MOVW      BC, N:_k           ;; 1 cycle
        MOVW      AX, BC             ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x6            ;; 1 cycle
        BNC       ??dlms_reset_data_493  ;; 4 cycles
        ; ------------------------------------- Block: 10 cycles
// 5426       {
// 5427         conf_ser(0x01);  // Proposed dlms version is too low
        MOV       A, #0x1            ;; 1 cycle
          CFI FunCall _conf_ser
        CALL      _conf_ser          ;; 3 cycles
// 5428         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 5429       }                          /* ifinit.req[4] */
// 5430       else if(info[k++] != 0x5F) /* ifinit.req[5] */
??dlms_reset_data_493:
        MOVW      BC, N:_k           ;; 1 cycle
        MOVW      AX, BC             ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x5F           ;; 1 cycle
        BZ        ??dlms_reset_data_494  ;; 4 cycles
        ; ------------------------------------- Block: 10 cycles
// 5431       {
// 5432         asserr_flag= 1;
        MOV       N:_asserr_flag, #0x1  ;; 1 cycle
// 5433         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 5434       }                                               /* ifinit.req[5] */
// 5435       else if((info[k] != 0x1F) && (info[k] != 0x04)) /* ifinit.req[6] */
??dlms_reset_data_494:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x1F           ;; 1 cycle
        BZ        ??dlms_reset_data_495  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        BZ        ??dlms_reset_data_495  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5436       {
// 5437         asserr_flag= 1;
        MOV       N:_asserr_flag, #0x1  ;; 1 cycle
// 5438         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 5439       }                                               /* ifinit.req[6] */
// 5440       else if((info[k] == 0x1F) || (info[k] == 0x04)) /* if1f */
??dlms_reset_data_495:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x1F           ;; 1 cycle
        BZ        ??dlms_reset_data_496  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_457  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5441       {
// 5442         k++;
??dlms_reset_data_496:
        INCW      N:_k               ;; 2 cycles
// 5443         if(info[k - 1] != 0x04)
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info-1)[BC]   ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        BZ        ??dlms_reset_data_497  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 5444         {
// 5445           if(info[k++] != 0x04) /* ifinit.req[7] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOVW      AX, BC             ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        BZ        ??dlms_reset_data_497  ;; 4 cycles
        ; ------------------------------------- Block: 10 cycles
// 5446           {
// 5447             asserr_flag= 1;
        MOV       N:_asserr_flag, #0x1  ;; 1 cycle
// 5448             return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 5449           } /* ifinit.req[7] */
// 5450         }
// 5451         
// 5452         if(info[k++] != 0x00) /* ifinit.req[8] */
??dlms_reset_data_497:
        MOVW      BC, N:_k           ;; 1 cycle
        MOVW      AX, BC             ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BZ        ??dlms_reset_data_498  ;; 4 cycles
        ; ------------------------------------- Block: 10 cycles
// 5453         {
// 5454           asserr_flag= 1;
        MOV       N:_asserr_flag, #0x1  ;; 1 cycle
// 5455           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 5456         }
// 5457         
// 5458         if(((info[k] & conf_blk[0]) == 0x00) && ((info[k + 1] & conf_blk[1]) == 0x00) && ((info[k + 2] & conf_blk[2]) == 0x00)) /* ifconf_blk[2] */
??dlms_reset_data_498:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        AND       A, N:_conf_blk     ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_499  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        AND       A, N:_conf_blk+1   ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_499  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+2)[BC]   ;; 1 cycle
        AND       A, N:_conf_blk+2   ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_499  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 5459         {
// 5460           conf_ser(0x02); // incompatible-conformance
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _conf_ser
        CALL      _conf_ser          ;; 3 cycles
// 5461           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 5462         } /* ifconf_blk[2] */
// 5463         else
// 5464         {
// 5465           conf_blk[0]= (info[k]) & conf_blk[0];
??dlms_reset_data_499:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOVW      HL, #LWRD(_conf_blk)  ;; 1 cycle
        AND       A, [HL]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
// 5466           conf_blk[1]= (info[k + 1]) & conf_blk[1];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        MOVW      HL, #LWRD(_conf_blk+1)  ;; 1 cycle
        AND       A, [HL]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
// 5467           conf_blk[2]= (info[k + 2]) & conf_blk[2];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+2)[BC]   ;; 1 cycle
        MOVW      HL, #LWRD(_conf_blk+2)  ;; 1 cycle
        AND       A, [HL]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
// 5468           k= k + 3;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x3           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 5469         }
// 5470         
// 5471         if(((uint16_t)(info[k] * 256 + info[k + 1])) < 12) /* (uint16_t) Updated by Dinesh */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      HL, AX             ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       D, #0x0            ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        CMPW      AX, #0xC           ;; 1 cycle
        BNC       ??dlms_reset_data_500  ;; 4 cycles
        ; ------------------------------------- Block: 37 cycles
// 5472         {                                                  /* max PDU size */
// 5473           conf_ser(0x03); // max pdu size is too short
        MOV       A, #0x3            ;; 1 cycle
          CFI FunCall _conf_ser
        CALL      _conf_ser          ;; 3 cycles
// 5474           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 5475         } /* max PDU size */
// 5476         
// 5477         k= k + 2;
??dlms_reset_data_500:
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x2           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 5478       } /* if1f */
// 5479       
// 5480     } /* ifuser information tag */
// 5481     
// 5482     /* user-information+xDLMS initiate.request PDU */
// 5483     break;
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 5484   case 0xC0:
// 5485     /* k=4; */
// 5486     invo_prio= info[5];                                             /* invoke_id,priority */
??dlms_reset_data_454:
        MOV       A, N:_info+5       ;; 1 cycle
        MOV       N:_invo_prio, A    ;; 1 cycle
// 5487     if((info[4] != 0x01) && (info[4] != 0x02) && (info[4] != 0x03)) /* ifasslen */
        CMP       N:_info+4, #0x1    ;; 1 cycle
        BZ        ??dlms_reset_data_501  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        CMP       N:_info+4, #0x2    ;; 1 cycle
        BZ        ??dlms_reset_data_501  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_info+4, #0x3    ;; 1 cycle
        BZ        ??dlms_reset_data_501  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5488     {
// 5489       conf_err(0x0C);
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 5490       return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 5491     }                       /* ifasslen */
// 5492     else if(byte_cont < 15) /* byte_cont */
??dlms_reset_data_501:
        MOVW      AX, N:_byte_cont   ;; 1 cycle
        CMPW      AX, #0xF           ;; 1 cycle
        BNC       ??dlms_reset_data_502  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 5493     {                       /* elifbyte_cont */
// 5494       conf_err(0x0B);
        MOV       A, #0xB            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 5495       return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 5496     } /* elifbyte_cont */
// 5497     
// 5498     invo_prio= info[5];                          /* invoke_id,priority */
??dlms_reset_data_502:
        MOV       A, N:_info+5       ;; 1 cycle
        MOV       N:_invo_prio, A    ;; 1 cycle
// 5499     class_id= (uint16_t)info[6] * 256 + info[7]; /* info[k++]*256+info[k++]; */
        MOV       X, N:_info+6       ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOV       C, N:_info+7       ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        ADDW      AX, BC             ;; 1 cycle
        MOVW      N:_class_id, AX    ;; 1 cycle
// 5500     /*	for(i=0;i<6;i++)
// 5501     obis_code[i]=info[i+8];*/
// 5502     memcpy(obis_code, &info[8], 6);
        MOVW      DE, #LWRD(_info+8)  ;; 1 cycle
        MOVW      HL, #LWRD(_obis_code)  ;; 1 cycle
        MOV       B, #0x6            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
// 5503     attribute_id= info[14];
        MOV       A, N:_info+14      ;; 1 cycle
        MOV       N:_attribute_id, A  ;; 1 cycle
// 5504     obis_short= obis_short_cal(obis_code);
        MOVW      AX, #LWRD(_obis_code)  ;; 1 cycle
          CFI FunCall _obis_short_cal
        CALL      _obis_short_cal    ;; 3 cycles
        MOVW      N:_obis_short, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_obis_short+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 5505     /* selective access */
// 5506     if(info[15] == 1)
        CMP       N:_info+15, #0x1   ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_503  ;; 4 cycles
        ; ------------------------------------- Block: 32 cycles
// 5507     {
// 5508       sel_access_flag= 1;
        MOV       N:_sel_access_flag, #0x1  ;; 1 cycle
// 5509       access_selector= info[16];
        MOV       A, N:_info+16      ;; 1 cycle
        MOV       N:_access_selector, A  ;; 1 cycle
// 5510       if(access_selector == 1) /* by range */
        CMP       N:_access_selector, #0x1  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_504  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 5511       {
// 5512         from_ptr= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_from_ptr, AX    ;; 1 cycle
// 5513         if(info[23] == 8) /* class id, for clock */
        CMP       N:_info+23, #0x8   ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_505  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5514         {
// 5515           uint_temp= (uint16_t)info[39] * 256;
        MOV       X, N:_info+39      ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      HL, AX             ;; 1 cycle
// 5516           uint_temp= uint_temp + info[40] - 0x07D0;
        MOV       X, N:_info+40      ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, #0xF830        ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        MOVW      [SP+0x04], AX      ;; 1 cycle
// 5517           UcharTemp= (unsigned char)(uint_temp % 256);
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
// 5518           from_val[0]= decimal_to_bcd(UcharTemp); /* yr */
        MOV       A, [SP+0x01]       ;; 1 cycle
          CFI FunCall _decimal_to_bcd
        CALL      _decimal_to_bcd    ;; 3 cycles
        MOV       N:_from_val, A     ;; 1 cycle
// 5519           
// 5520           from_val[1]= decimal_to_bcd(info[41]); /* //month */
        MOV       A, N:_info+41      ;; 1 cycle
          CFI FunCall _decimal_to_bcd
        CALL      _decimal_to_bcd    ;; 3 cycles
        MOV       N:_from_val+1, A   ;; 1 cycle
// 5521           
// 5522           from_val[2]= decimal_to_bcd(info[42]); /* //date */
        MOV       A, N:_info+42      ;; 1 cycle
          CFI FunCall _decimal_to_bcd
        CALL      _decimal_to_bcd    ;; 3 cycles
        MOV       N:_from_val+2, A   ;; 1 cycle
// 5523           from_val[3]= decimal_to_bcd(info[44]); /* //hr */
        MOV       A, N:_info+44      ;; 1 cycle
          CFI FunCall _decimal_to_bcd
        CALL      _decimal_to_bcd    ;; 3 cycles
        MOV       N:_from_val+3, A   ;; 1 cycle
// 5524           from_val[4]= decimal_to_bcd(info[45]); /* //min */
        MOV       A, N:_info+45      ;; 1 cycle
          CFI FunCall _decimal_to_bcd
        CALL      _decimal_to_bcd    ;; 3 cycles
        MOV       N:_from_val+4, A   ;; 1 cycle
// 5525           
// 5526           uint_temp= (uint16_t)info[53] * 256;
        MOV       X, N:_info+53      ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      HL, AX             ;; 1 cycle
// 5527           uint_temp= uint_temp + info[54] - 0x07D0;
        MOV       X, N:_info+54      ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, #0xF830        ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        MOVW      [SP+0x04], AX      ;; 1 cycle
// 5528           UcharTemp= (unsigned char)(uint_temp % 256);
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
// 5529           to_val[0]= decimal_to_bcd(UcharTemp); /* yr */
        MOV       A, [SP+0x01]       ;; 1 cycle
          CFI FunCall _decimal_to_bcd
        CALL      _decimal_to_bcd    ;; 3 cycles
        MOV       N:_to_val, A       ;; 1 cycle
// 5530           to_val[1]= decimal_to_bcd(info[55]);  /* //month */
        MOV       A, N:_info+55      ;; 1 cycle
          CFI FunCall _decimal_to_bcd
        CALL      _decimal_to_bcd    ;; 3 cycles
        MOV       N:_to_val+1, A     ;; 1 cycle
// 5531           
// 5532           to_val[2]= decimal_to_bcd(info[56]); /* //date */
        MOV       A, N:_info+56      ;; 1 cycle
          CFI FunCall _decimal_to_bcd
        CALL      _decimal_to_bcd    ;; 3 cycles
        MOV       N:_to_val+2, A     ;; 1 cycle
// 5533           to_val[3]= decimal_to_bcd(info[58]); /* //hr */
        MOV       A, N:_info+58      ;; 1 cycle
          CFI FunCall _decimal_to_bcd
        CALL      _decimal_to_bcd    ;; 3 cycles
        MOV       N:_to_val+3, A     ;; 1 cycle
// 5534           to_val[4]= decimal_to_bcd(info[59]); /* //min */
        MOV       A, N:_info+59      ;; 1 cycle
          CFI FunCall _decimal_to_bcd
        CALL      _decimal_to_bcd    ;; 3 cycles
        MOV       N:_to_val+4, A     ;; 1 cycle
// 5535           
// 5536           if((obis_code[0] == 0x01) && (obis_code[2] == 0x63) && (obis_code[3] == 0x02) && (obis_code[4] == 0x00))
        CMP       N:_obis_code, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_506  ;; 4 cycles
        ; ------------------------------------- Block: 87 cycles
        CMP       N:_obis_code+2, #0x63  ;; 1 cycle
        BNZ       ??dlms_reset_data_506  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+3, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_506  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_obis_code+4     ;; 1 cycle
        BNZ       ??dlms_reset_data_506  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5537           {
// 5538             if((0==from_val[3])&&(0==from_val[4]))
        CMP0      N:_from_val+3      ;; 1 cycle
        BNZ       ??dlms_reset_data_507  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_from_val+4      ;; 1 cycle
        CLRB      A                  ;; 1 cycle
        SKZ                          ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
        ONEB      A                  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??data_dec_10:
        MOV       N:_correct_DE_entry_f, A  ;; 1 cycle
        BR        S:??dlms_reset_data_508  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5539             {
// 5540               correct_DE_entry_f=0;
// 5541             }
// 5542             else
// 5543             {
// 5544               correct_DE_entry_f=1;
??dlms_reset_data_507:
        MOV       N:_correct_DE_entry_f, #0x1  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 5545             }
// 5546             
// 5547             for(i_data= 3; i_data < 5; i_data++)
??dlms_reset_data_508:
        MOV       A, #0x3            ;; 1 cycle
        MOV       [SP+0x07], A       ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??data_dec_11:
        MOV       A, [SP+0x07]       ;; 1 cycle
        CMP       A, #0x5            ;; 1 cycle
        BNC       ??dlms_reset_data_506  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 5548             {
// 5549               from_val[i_data]= 0;
        MOV       A, [SP+0x07]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_from_val)[B], A  ;; 1 cycle
// 5550               to_val[i_data]= 0;
        MOV       A, [SP+0x07]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_to_val)[B], A    ;; 1 cycle
// 5551             }
        MOV       A, [SP+0x07]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x07], A       ;; 1 cycle
        BR        S:??data_dec_11    ;; 3 cycles
        ; ------------------------------------- Block: 14 cycles
// 5552           }
// 5553           
// 5554           if(info[66] == 0) /* all objects */
??dlms_reset_data_506:
        CMP0      N:_info+66         ;; 1 cycle
        BNZ       ??dlms_reset_data_509  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5555           {
// 5556             unsigned char i1;
// 5557             for(i1= 0; i1 < 15; i1++)
        MOV       B, #0x0            ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??data_dec_12:
        MOV       A, B               ;; 1 cycle
        CMP       A, #0xF            ;; 1 cycle
        BNC       ??dlms_reset_data_510  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 5558             {
// 5559               sel_obj[i1]= 1;
        MOV       A, #0x1            ;; 1 cycle
        MOV       (_sel_obj)[B], A   ;; 1 cycle
// 5560             }
        INC       B                  ;; 1 cycle
        BR        S:??data_dec_12    ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 5561             no_obj= 15;
??dlms_reset_data_510:
        MOV       N:_no_obj, #0xF    ;; 1 cycle
// 5562             
// 5563             if(0x01630200==obis_short)
        MOVW      HL, N:_obis_short+2  ;; 1 cycle
        MOVW      DE, N:_obis_short  ;; 1 cycle
        XCHW      AX, HL             ;; 1 cycle
        CMPW      AX, #0x163         ;; 1 cycle
        XCHW      AX, HL             ;; 1 cycle
        BNZ       ??dlms_reset_data_511  ;; 4 cycles
        ; ------------------------------------- Block: 10 cycles
        XCHW      AX, DE             ;; 1 cycle
        CMPW      AX, #0x200         ;; 1 cycle
        XCHW      AX, DE             ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
??dlms_reset_data_511:
        BNZ       ??dlms_reset_data_512  ;; 4 cycles
        ; ------------------------------------- Block: 4 cycles
// 5564             {
// 5565               no_obj= 4 + D_KVARH_REQ * 2;
        MOV       A, N:_D_KVARH_REQ  ;; 1 cycle
        MOV       X, #0x2            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       A, #0x4            ;; 1 cycle
        MOV       N:_no_obj, A       ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
// 5566             }
// 5567             
// 5568             k= 66;
??dlms_reset_data_512:
        MOVW      AX, #0x42          ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
        BR        N:??dlms_reset_data_505  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 5569           }
// 5570           else
// 5571           {
// 5572             if(0x01630100==obis_short)
??dlms_reset_data_509:
        MOVW      BC, N:_obis_short+2  ;; 1 cycle
        MOVW      AX, N:_obis_short  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        CMPW      AX, #0x163         ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
        CMPW      AX, #0x100         ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??data_dec_13:
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_513  ;; 4 cycles
        ; ------------------------------------- Block: 4 cycles
// 5573             {
// 5574               unsigned char i1;
// 5575               for(i1= 0; i1 < 15; i1++)
        MOV       A, #0x0            ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??data_dec_14:
        CMP       A, #0xF            ;; 1 cycle
        BNC       ??dlms_reset_data_514  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5576               {
// 5577                 sel_obj[i1]= 0;
        MOV       B, A               ;; 1 cycle
        MOV       X, #0x0            ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_sel_obj)[B], A   ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 5578               }
        INC       A                  ;; 1 cycle
        BR        S:??data_dec_14    ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 5579               for(i1= 0; i1 < info[66]; i1++) /* looping for array elements(objects) */
??dlms_reset_data_514:
        MOV       E, #0x0            ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??data_dec_15:
        MOV       A, E               ;; 1 cycle
        CMP       A, N:_info+66      ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_515  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 5580               {
// 5581                 if(info[76 + i1 * 18] == 1)
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+76)[BC]  ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_516  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 5582                 {
// 5583                   if(info[77 + i1 * 18] == 0)
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+77)[BC]  ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_517  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 5584                   {
// 5585                     sel_obj[0]= 1; /* date&time */
        MOV       N:_sel_obj, #0x1   ;; 1 cycle
        BR        N:??dlms_reset_data_518  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5586                   }
// 5587                   else
// 5588                   {
// 5589                     sel_obj[7]= 1; /* signed active power */
??dlms_reset_data_517:
        MOV       N:_sel_obj+7, #0x1  ;; 1 cycle
        BR        N:??dlms_reset_data_518  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5590                   }
// 5591                 }
// 5592                 else if(info[76 + i1 * 18] == 31)
??dlms_reset_data_516:
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+76)[BC]  ;; 1 cycle
        CMP       A, #0x1F           ;; 1 cycle
        BNZ       ??dlms_reset_data_519  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 5593                 {
// 5594                   sel_obj[1]= 1;
        MOV       N:_sel_obj+1, #0x1  ;; 1 cycle
        BR        N:??dlms_reset_data_518  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5595                 }
// 5596                 else if(info[76 + i1 * 18] == 51)
??dlms_reset_data_519:
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+76)[BC]  ;; 1 cycle
        CMP       A, #0x33           ;; 1 cycle
        BNZ       ??dlms_reset_data_520  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 5597                 {
// 5598                   sel_obj[2]= 1;
        MOV       N:_sel_obj+2, #0x1  ;; 1 cycle
        BR        N:??dlms_reset_data_518  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5599                 }
// 5600                 else if(info[76 + i1 * 18] == 71)
??dlms_reset_data_520:
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+76)[BC]  ;; 1 cycle
        CMP       A, #0x47           ;; 1 cycle
        BNZ       ??dlms_reset_data_521  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 5601                 {
// 5602                   sel_obj[3]= 1;
        MOV       N:_sel_obj+3, #0x1  ;; 1 cycle
        BR        N:??dlms_reset_data_518  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5603                 }
// 5604                 else if(info[76 + i1 * 18] == 32)
??dlms_reset_data_521:
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+76)[BC]  ;; 1 cycle
        CMP       A, #0x20           ;; 1 cycle
        BNZ       ??dlms_reset_data_522  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 5605                 {
// 5606                   sel_obj[4]= 1;
        MOV       N:_sel_obj+4, #0x1  ;; 1 cycle
        BR        S:??dlms_reset_data_518  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5607                 }
// 5608                 else if(info[76 + i1 * 18] == 52)
??dlms_reset_data_522:
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+76)[BC]  ;; 1 cycle
        CMP       A, #0x34           ;; 1 cycle
        BNZ       ??dlms_reset_data_523  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 5609                 {
// 5610                   sel_obj[5]= 1;
        MOV       N:_sel_obj+5, #0x1  ;; 1 cycle
        BR        S:??dlms_reset_data_518  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5611                 }
// 5612                 else if(info[76 + i1 * 18] == 72)
??dlms_reset_data_523:
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+76)[BC]  ;; 1 cycle
        CMP       A, #0x48           ;; 1 cycle
        BNZ       ??dlms_reset_data_524  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 5613                 {
// 5614                   sel_obj[6]= 1;
        MOV       N:_sel_obj+6, #0x1  ;; 1 cycle
        BR        S:??dlms_reset_data_518  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5615                 }
// 5616                 else if(info[76 + i1 * 18] == 5)
??dlms_reset_data_524:
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+76)[BC]  ;; 1 cycle
        CMP       A, #0x5            ;; 1 cycle
        BNZ       ??dlms_reset_data_525  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 5617                 {
// 5618                   sel_obj[8]= 1;
        MOV       N:_sel_obj+8, #0x1  ;; 1 cycle
        BR        S:??dlms_reset_data_518  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5619                 }
// 5620                 else if(info[76 + i1 * 18] == 8)
??dlms_reset_data_525:
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+76)[BC]  ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNZ       ??dlms_reset_data_526  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 5621                 {
// 5622                   sel_obj[9]= 1;
        MOV       N:_sel_obj+9, #0x1  ;; 1 cycle
        BR        S:??dlms_reset_data_518  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5623                 }
// 5624                 else if(info[76 + i1 * 18] == 9)
??dlms_reset_data_526:
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+76)[BC]  ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 9 cycles
// 5625                 {
// 5626                   sel_obj[10]= 1;
        MOV       N:_sel_obj+10, #0x1  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 5627                 }
// 5628               }
??dlms_reset_data_518:
        INC       E                  ;; 1 cycle
        BR        N:??data_dec_15    ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5629             }
// 5630             else if(0x01630200==obis_short)
??dlms_reset_data_513:
        MOVW      BC, N:_obis_short+2  ;; 1 cycle
        MOVW      AX, N:_obis_short  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        CMPW      AX, #0x163         ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
        CMPW      AX, #0x200         ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??data_dec_16:
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_515  ;; 4 cycles
        ; ------------------------------------- Block: 4 cycles
// 5631             {
// 5632               unsigned char i_1;
// 5633               for(i_1= 0; i_1 < info[66]; i_1++) /* looping for array elements(objects) */
        MOV       E, #0x0            ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??data_dec_17:
        MOV       A, E               ;; 1 cycle
        CMP       A, N:_info+66      ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_515  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 5634               {
// 5635                 if((info[74 + i_1 * 18] == 0) && (info[75 + i_1 * 18] == 0) && (info[76 + i_1 * 18] == 1) && (info[77 + i_1 * 18] == 0) && (info[78 + i_1 * 18] == 0))
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+74)[BC]  ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_527  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+75)[BC]  ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_527  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+76)[BC]  ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_527  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+77)[BC]  ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_527  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+78)[BC]  ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_527  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 5636                 {
// 5637                   sel_obj[0]= 1;
        MOV       N:_sel_obj, #0x1   ;; 1 cycle
        BR        N:??dlms_reset_data_528  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5638                 }
// 5639                 else if((info[74 + i_1 * 18] == 1) && (info[75 + i_1 * 18] == 0) && (info[76 + i_1 * 18] == 1) && (info[77 + i_1 * 18] == 8) && (info[78 + i_1 * 18] == 0))
??dlms_reset_data_527:
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+74)[BC]  ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_529  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+75)[BC]  ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_529  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+76)[BC]  ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_529  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+77)[BC]  ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNZ       ??dlms_reset_data_529  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+78)[BC]  ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_529  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 5640                 {
// 5641                   sel_obj[1]= 1;
        MOV       N:_sel_obj+1, #0x1  ;; 1 cycle
        BR        N:??dlms_reset_data_528  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5642                 }
// 5643                 else if((info[74 + i_1 * 18] == 1) && (info[75 + i_1 * 18] == 0) && (info[76 + i_1 * 18] == 9) && (info[77 + i_1 * 18] == 8) && (info[78 + i_1 * 18] == 0))
??dlms_reset_data_529:
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+74)[BC]  ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_530  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+75)[BC]  ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_530  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+76)[BC]  ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BNZ       ??dlms_reset_data_530  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+77)[BC]  ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNZ       ??dlms_reset_data_530  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+78)[BC]  ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_530  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 5644                 {
// 5645                   sel_obj[2]= 1;
        MOV       N:_sel_obj+2, #0x1  ;; 1 cycle
        BR        N:??dlms_reset_data_528  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5646                 }
// 5647                 else if((info[74 + i_1 * 18] == 0) && (info[75 + i_1 * 18] == 0) && (info[76 + i_1 * 18] == 94) && (info[77 + i_1 * 18] == 91) && (info[78 + i_1 * 18] == 13))
??dlms_reset_data_530:
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+74)[BC]  ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_531  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+75)[BC]  ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_531  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+76)[BC]  ;; 1 cycle
        CMP       A, #0x5E           ;; 1 cycle
        BNZ       ??dlms_reset_data_531  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+77)[BC]  ;; 1 cycle
        CMP       A, #0x5B           ;; 1 cycle
        BNZ       ??dlms_reset_data_531  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+78)[BC]  ;; 1 cycle
        CMP       A, #0xD            ;; 1 cycle
        BNZ       ??dlms_reset_data_531  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 5648                 {
// 5649                   sel_obj[3]= 1;
        MOV       N:_sel_obj+3, #0x1  ;; 1 cycle
        BR        N:??dlms_reset_data_528  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5650                 }
// 5651                 else if((info[74 + i_1 * 18] == 1) && (info[75 + i_1 * 18] == 0) && (info[76 + i_1 * 18] == 5) && (info[77 + i_1 * 18] == 8) && (info[78 + i_1 * 18] == 0))
??dlms_reset_data_531:
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+74)[BC]  ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_532  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+75)[BC]  ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_532  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+76)[BC]  ;; 1 cycle
        CMP       A, #0x5            ;; 1 cycle
        BNZ       ??dlms_reset_data_532  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+77)[BC]  ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNZ       ??dlms_reset_data_532  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+78)[BC]  ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_532  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 5652                 {
// 5653                   sel_obj[4]= 1;
        MOV       N:_sel_obj+4, #0x1  ;; 1 cycle
        BR        S:??dlms_reset_data_528  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5654                 }
// 5655                 else if((info[74 + i_1 * 18] == 1) && (info[75 + i_1 * 18] == 0) && (info[76 + i_1 * 18] == 6) && (info[77 + i_1 * 18] == 8) && (info[78 + i_1 * 18] == 0))
??dlms_reset_data_532:
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+74)[BC]  ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_528  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+75)[BC]  ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_528  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+76)[BC]  ;; 1 cycle
        CMP       A, #0x6            ;; 1 cycle
        BNZ       ??dlms_reset_data_528  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+77)[BC]  ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNZ       ??dlms_reset_data_528  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+78)[BC]  ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 9 cycles
// 5656                 {
// 5657                   sel_obj[5]= 1;
        MOV       N:_sel_obj+5, #0x1  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 5658                 }
// 5659               }
??dlms_reset_data_528:
        INC       E                  ;; 1 cycle
        BR        N:??data_dec_17    ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5660             }
// 5661             
// 5662             no_obj= info[66];
??dlms_reset_data_515:
        MOV       A, N:_info+66      ;; 1 cycle
        MOV       N:_no_obj, A       ;; 1 cycle
// 5663             k= 66 + info[66] * 18;
        MOV       X, N:_info+66      ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x12          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x42          ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
        BR        N:??dlms_reset_data_505  ;; 3 cycles
        ; ------------------------------------- Block: 12 cycles
// 5664           }
// 5665         }
// 5666       }
// 5667       else if(access_selector == 2) /* by entry */
??dlms_reset_data_504:
        CMP       N:_access_selector, #0x2  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_505  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5668       {
// 5669         unsigned char u8i, from_ob, to_ob, max_obj; /* to be testeh for velue of i here sanjay very important */
// 5670         from_ptr= (uint16_t)info[22] * 256 + info[23];
        MOV       X, N:_info+22      ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOV       C, N:_info+23      ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        ADDW      AX, BC             ;; 1 cycle
        MOVW      N:_from_ptr, AX    ;; 1 cycle
// 5671         to_ptr= (uint16_t)info[27] * 256 + info[28];
        MOV       X, N:_info+27      ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOV       C, N:_info+28      ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        ADDW      AX, BC             ;; 1 cycle
        MOVW      N:_to_ptr, AX      ;; 1 cycle
// 5672         from_ob= info[31];
        MOV       A, N:_info+31      ;; 1 cycle
        MOV       H, A               ;; 1 cycle
// 5673         to_ob= info[34];
        MOV       A, N:_info+34      ;; 1 cycle
        MOV       E, A               ;; 1 cycle
// 5674         if(KVAH_SNAP == 1)
        CMP       N:_KVAH_SNAP, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_533  ;; 4 cycles
        ; ------------------------------------- Block: 27 cycles
// 5675         {
// 5676           max_obj= 13;
        MOV       D, #0xD            ;; 1 cycle
        BR        S:??dlms_reset_data_534  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 5677         }
// 5678         else
// 5679         {
// 5680           max_obj= 12;
??dlms_reset_data_533:
        MOV       D, #0xC            ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 5681         }
// 5682         if(from_ob > to_ob)
??dlms_reset_data_534:
        XCH       A, E               ;; 1 cycle
        CMP       A, H               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        BNC       ??dlms_reset_data_535  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5683         {
// 5684           from_ob= 0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       H, A               ;; 1 cycle
// 5685           to_ob= 0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
// 5686         }
// 5687         
// 5688         if((from_ob == 0) || (from_ob > max_obj))
??dlms_reset_data_535:
        XCH       A, H               ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        BZ        ??dlms_reset_data_536  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        XCH       A, D               ;; 1 cycle
        CMP       A, H               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        BNC       ??dlms_reset_data_537  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5689         {
// 5690           from_ob= 1;
??dlms_reset_data_536:
        MOV       A, #0x1            ;; 1 cycle
        MOV       H, A               ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 5691         }
// 5692         
// 5693         if((to_ob == 0) || (to_ob > max_obj))
??dlms_reset_data_537:
        XCH       A, E               ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        BZ        ??dlms_reset_data_538  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        XCH       A, D               ;; 1 cycle
        CMP       A, E               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        BNC       ??dlms_reset_data_539  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5694         {
// 5695           to_ob= max_obj;
??dlms_reset_data_538:
        XCH       A, D               ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 5696         }
// 5697         
// 5698         if((2 == info[12]) || (3 == info[12]) || (5 == info[12]))
??dlms_reset_data_539:
        CMP       N:_info+12, #0x2   ;; 1 cycle
        BZ        ??dlms_reset_data_540  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_info+12, #0x3   ;; 1 cycle
        BZ        ??dlms_reset_data_540  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_info+12, #0x5   ;; 1 cycle
        BNZ       ??dlms_reset_data_541  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5699         {
// 5700           if((from_ob == 0) || (from_ob > 2))
??dlms_reset_data_540:
        XCH       A, H               ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        BZ        ??dlms_reset_data_542  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOV       A, H               ;; 1 cycle
        CMP       A, #0x3            ;; 1 cycle
        BC        ??dlms_reset_data_543  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 5701           {
// 5702             from_ob= 1;
??dlms_reset_data_542:
        MOV       A, #0x1            ;; 1 cycle
        MOV       H, A               ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 5703           }
// 5704           
// 5705           if((to_ob == 0) || (to_ob > 2))
??dlms_reset_data_543:
        XCH       A, E               ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        BZ        ??dlms_reset_data_544  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOV       A, E               ;; 1 cycle
        CMP       A, #0x3            ;; 1 cycle
        BC        ??dlms_reset_data_541  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 5706           {
// 5707             to_ob= 2;
??dlms_reset_data_544:
        MOV       A, #0x2            ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 5708           }
// 5709         }
// 5710         
// 5711         no_obj= to_ob - from_ob + 1;
??dlms_reset_data_541:
        MOV       A, E               ;; 1 cycle
        SUB       A, H               ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       N:_no_obj, A       ;; 1 cycle
// 5712         for(u8i= 0; u8i < max_obj; u8i++)
        MOV       A, #0x0            ;; 1 cycle
        ; ------------------------------------- Block: 5 cycles
??data_dec_18:
        CMP       A, D               ;; 1 cycle
        BNC       ??dlms_reset_data_545  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5713         {
// 5714           sel_obj_tamper[u8i]= 0;
        MOV       B, A               ;; 1 cycle
        MOV       X, #0x0            ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_sel_obj_tamper)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 5715         }
        INC       A                  ;; 1 cycle
        BR        S:??data_dec_18    ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 5716         
// 5717         for(u8i= from_ob - 1; u8i <= to_ob - 1; u8i++)
??dlms_reset_data_545:
        XCH       A, H               ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        DEC       L                  ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
??data_dec_19:
        PUSH      HL                 ;; 1 cycle
          CFI CFA SP+38
        POP       BC                 ;; 1 cycle
          CFI CFA SP+36
        MOV       B, #0x0            ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        DECW      AX                 ;; 1 cycle
          CFI FunCall ?SI_CMP_L02
        CALL      N:?SI_CMP_L02      ;; 3 cycles
        BC        ??dlms_reset_data_505  ;; 4 cycles
        ; ------------------------------------- Block: 13 cycles
// 5718         {
// 5719           sel_obj_tamper[u8i]= 1;
        XCH       A, L               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, L               ;; 1 cycle
        MOV       A, #0x1            ;; 1 cycle
        MOV       (_sel_obj_tamper)[B], A  ;; 1 cycle
// 5720         }
        INC       L                  ;; 1 cycle
        BR        S:??data_dec_19    ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 5721       }
// 5722     }
// 5723     else /* no selective access */
// 5724     {
// 5725       sel_access_flag= 0;
??dlms_reset_data_503:
        MOV       N:_sel_access_flag, #0x0  ;; 1 cycle
// 5726       k= 15;
        MOVW      AX, #0xF           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 5727     }
// 5728     
// 5729     for(global_i= 0; global_i < 6; global_i++)
??dlms_reset_data_505:
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_global_i, AX    ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??data_dec_20:
        MOVW      AX, N:_global_i    ;; 1 cycle
        CMPW      AX, #0x6           ;; 1 cycle
        BNC       ??dlms_reset_data_546  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 5730     {
// 5731       if(obis_code[global_i] != 0xff)
        MOVW      BC, N:_global_i    ;; 1 cycle
        MOV       A, (_obis_code)[BC]  ;; 1 cycle
        INC       A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_546  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5732       {
// 5733         break;
// 5734       }
// 5735     }
        INCW      N:_global_i        ;; 2 cycles
        BR        S:??data_dec_20    ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 5736     if(global_i == 0x06)
??dlms_reset_data_546:
        MOVW      AX, N:_global_i    ;; 1 cycle
        CMPW      AX, #0x6           ;; 1 cycle
        BNZ       ??dlms_reset_data_547  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 5737     {
// 5738       conf_err(0x04);
        MOV       A, #0x4            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 5739       return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 5740     }
// 5741     
// 5742     break;
??dlms_reset_data_547:
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 5743     
// 5744   case 0xc1:              /* for setting parameters */
// 5745     invo_prio= info[5]; /* invoke_id,priority */
??dlms_reset_data_455:
        MOV       A, N:_info+5       ;; 1 cycle
        MOV       N:_invo_prio, A    ;; 1 cycle
// 5746     t1= byte_cont;
        MOVW      AX, N:_byte_cont   ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       [SP+0x09], A       ;; 1 cycle
// 5747     
// 5748     if((info[4] > 0x03) || (info[4] == 0x000))
        MOV       A, N:_info+4       ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        BNC       ??dlms_reset_data_548  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
        CMP0      N:_info+4          ;; 1 cycle
        BNZ       ??dlms_reset_data_549  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5749     {
// 5750       conf_err(0x0C);
??dlms_reset_data_548:
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 5751       return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 5752     }
// 5753     else if(t1 < 15)
??dlms_reset_data_549:
        MOV       A, [SP+0x09]       ;; 1 cycle
        CMP       A, #0xF            ;; 1 cycle
        BNC       ??dlms_reset_data_550  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 5754     {
// 5755       conf_err(0x0B);
        MOV       A, #0xB            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 5756       return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 5757     }
// 5758     
// 5759     if(info[4] != 0x03)
??dlms_reset_data_550:
        CMP       N:_info+4, #0x3    ;; 1 cycle
        BZ        ??dlms_reset_data_551  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5760     {
// 5761       class_id= (uint16_t)info[6] * 256 + info[7];
        MOV       X, N:_info+6       ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOV       C, N:_info+7       ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        ADDW      AX, BC             ;; 1 cycle
        MOVW      N:_class_id, AX    ;; 1 cycle
// 5762       for(global_i= 0; global_i < 6; global_i++)
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_global_i, AX    ;; 1 cycle
        ; ------------------------------------- Block: 11 cycles
??data_dec_21:
        MOVW      AX, N:_global_i    ;; 1 cycle
        CMPW      AX, #0x6           ;; 1 cycle
        BNC       ??dlms_reset_data_552  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 5763       {
// 5764         obis_code[global_i]= info[global_i + 8];
        MOVW      BC, N:_global_i    ;; 1 cycle
        MOV       A, (_info+8)[BC]   ;; 1 cycle
        MOVW      BC, N:_global_i    ;; 1 cycle
        MOV       (_obis_code)[BC], A  ;; 1 cycle
// 5765       }
        INCW      N:_global_i        ;; 2 cycles
        BR        S:??data_dec_21    ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 5766       attribute_id= info[14];
??dlms_reset_data_552:
        MOV       A, N:_info+14      ;; 1 cycle
        MOV       N:_attribute_id, A  ;; 1 cycle
// 5767       
// 5768       obis_short= obis_short_cal(obis_code);
        MOVW      AX, #LWRD(_obis_code)  ;; 1 cycle
          CFI FunCall _obis_short_cal
        CALL      _obis_short_cal    ;; 3 cycles
        MOVW      N:_obis_short, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_obis_short+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        ; ------------------------------------- Block: 10 cycles
// 5769     }
// 5770     
// 5771     k= 16;
??dlms_reset_data_551:
        MOVW      AX, #0x10          ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 5772     
// 5773     for(global_i= 0; global_i < 6; global_i++)
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_global_i, AX    ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
??data_dec_22:
        MOVW      AX, N:_global_i    ;; 1 cycle
        CMPW      AX, #0x6           ;; 1 cycle
        BNC       ??dlms_reset_data_553  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 5774     {
// 5775       if(obis_code[global_i] != 0xff)
        MOVW      BC, N:_global_i    ;; 1 cycle
        MOV       A, (_obis_code)[BC]  ;; 1 cycle
        INC       A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_553  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5776       {
// 5777         break;
// 5778       }
// 5779     }
        INCW      N:_global_i        ;; 2 cycles
        BR        S:??data_dec_22    ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 5780     
// 5781     if(global_i == 0x06)
??dlms_reset_data_553:
        MOVW      AX, N:_global_i    ;; 1 cycle
        CMPW      AX, #0x6           ;; 1 cycle
        BNZ       ??dlms_reset_data_554  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 5782     {
// 5783       conf_err(0x04);
        MOV       A, #0x4            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 5784       return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 5785     }
// 5786     
// 5787     if((asso0_flag != 0) || ((asso1_flag != 0)&&(obis_short!=0x00160000)))
??dlms_reset_data_554:
        CMP0      N:_asso0_flag      ;; 1 cycle
        BNZ       ??dlms_reset_data_555  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_asso1_flag      ;; 1 cycle
        BZ        ??dlms_reset_data_556  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOVW      BC, N:_obis_short+2  ;; 1 cycle
        MOVW      AX, N:_obis_short  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        CMPW      AX, #0x16          ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
        CMPW      AX, #0x0           ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??data_dec_23:
        BZ        ??dlms_reset_data_556  ;; 4 cycles
        ; ------------------------------------- Block: 4 cycles
// 5788     {
// 5789       conf_err(0x0D);
??dlms_reset_data_555:
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 5790       return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 5791     }
// 5792     
// 5793     switch(obis_short)
??dlms_reset_data_556:
        MOVW      BC, N:_obis_short+2  ;; 1 cycle
        MOVW      AX, N:_obis_short  ;; 1 cycle
        MOVW      HL, #LWRD(??data_dec_0)  ;; 1 cycle
        MOV       ES, #BYTE3(??data_dec_0)  ;; 1 cycle
        MOV       CS, #BYTE3(_data_dec)  ;; 1 cycle
        BR        N:?L_VSWITCH_L10   ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 5794     {
// 5795     case 0x01000402:
// 5796       if(attribute_id == 2)
??data_dec_24:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_457  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5797       {
// 5798         if(info[k] != 0x12)
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x12           ;; 1 cycle
        BZ        ??dlms_reset_data_557  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5799         {
// 5800           conf_err(0x0C);
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 5801           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 5802         }
// 5803         
// 5804         if(asso2_flag != 0)
??dlms_reset_data_557:
        CMP0      N:_asso2_flag      ;; 1 cycle
        BZ        ??dlms_reset_data_558  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5805         {
// 5806           conf_err(0x0D);
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 5807           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 5808         }
// 5809         
// 5810         k++;
??dlms_reset_data_558:
        INCW      N:_k               ;; 2 cycles
// 5811         CTR= (256 * info[k] + info[k + 1]);
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      HL, AX             ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       D, #0x0            ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        MOVW      N:_CTR, AX         ;; 1 cycle
// 5812         k= k + 2;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x2           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 5813         eprom_read(SET_PAR_ADDRESS,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFF0         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 5814         opr_data[0]= CTR / 256;
        MOVW      AX, N:_CTR         ;; 1 cycle
        CLRB      X                  ;; 1 cycle
        MOV       N:_opr_data, A     ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 5815         opr_data[1]= CTR % 256;
        MOVW      AX, N:_CTR         ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       N:_opr_data+1, A   ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 5816         eprom_write(SET_PAR_ADDRESS,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFF0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 5817         eprom_write(ALTERNATE_SET_PAR_ADDRESS,2,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+40
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x2            ;; 1 cycle
        MOVW      AX, #0xFE10        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
        ADDW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+36
// 5818         
// 5819         // cal_quanta_scalar();
// 5820       }
// 5821       break;
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 57 cycles
// 5822     case 0x01000403:
// 5823       if(attribute_id == 2)
??data_dec_25:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_457  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5824       {
// 5825         if(info[k] != 0x12)
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x12           ;; 1 cycle
        BZ        ??dlms_reset_data_559  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5826         {
// 5827           conf_err(0x0C);
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 5828           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 5829         }
// 5830         
// 5831         if(asso2_flag != 0)
??dlms_reset_data_559:
        CMP0      N:_asso2_flag      ;; 1 cycle
        BZ        ??dlms_reset_data_560  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5832         {
// 5833           conf_err(0x0D);
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 5834           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 5835         }
// 5836         
// 5837         k++;
??dlms_reset_data_560:
        INCW      N:_k               ;; 2 cycles
// 5838         PTR= (256 * info[k] + info[k + 1]);
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      HL, AX             ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       D, #0x0            ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        MOVW      N:_PTR, AX         ;; 1 cycle
// 5839         k= k + 2;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x2           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 5840         
// 5841         eprom_read(SET_PAR_ADDRESS,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFF0         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 5842         opr_data[2]= PTR / 256;
        MOVW      AX, N:_PTR         ;; 1 cycle
        CLRB      X                  ;; 1 cycle
        MOV       N:_opr_data+2, A   ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 5843         opr_data[3]= PTR % 256;
        MOVW      AX, N:_PTR         ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       N:_opr_data+3, A   ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 5844         eprom_write(SET_PAR_ADDRESS,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFF0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 5845         eprom_write(ALTERNATE_SET_PAR_ADDRESS,2,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+40
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x2            ;; 1 cycle
        MOVW      AX, #0xFE10        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
        ADDW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+36
// 5846       }
// 5847       
// 5848       break;
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 57 cycles
// 5849     case 0x01000800:                                        /* MDIP */
// 5850       if(attribute_id == 2)
??data_dec_26:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_457  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5851       {
// 5852         if(info[k] != 0x12)
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x12           ;; 1 cycle
        BZ        ??dlms_reset_data_561  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5853         {
// 5854           conf_err(0x0C);
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 5855           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 5856         }
// 5857         
// 5858         k++;
??dlms_reset_data_561:
        INCW      N:_k               ;; 2 cycles
// 5859         
// 5860         uint_temp= 256 * info[k] + info[k + 1];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      HL, AX             ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       D, #0x0            ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        MOVW      [SP+0x04], AX      ;; 1 cycle
// 5861         if((uint_temp != 900) && (uint_temp != 1800) && (uint_temp != 3600))
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        CMPW      AX, #0x384         ;; 1 cycle
        BZ        ??dlms_reset_data_562  ;; 4 cycles
        ; ------------------------------------- Block: 23 cycles
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        CMPW      AX, #0x708         ;; 1 cycle
        BZ        ??dlms_reset_data_562  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        CMPW      AX, #0xE10         ;; 1 cycle
        BZ        ??dlms_reset_data_562  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 5862         {
// 5863           conf_err(250);
        MOV       A, #0xFA           ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 5864           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 5865         }
// 5866         
// 5867         mdi_sel_new= 10800 / (256 * info[k] + info[k + 1]);
??dlms_reset_data_562:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      HL, AX             ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       D, #0x0            ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, #0x2A30        ;; 1 cycle
          CFI FunCall ?SI_DIV_L02
        CALL      N:?SI_DIV_L02      ;; 3 cycles
        XCH       A, X               ;; 1 cycle
        MOV       N:_mdi_sel_new, A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 5868         if(md_type != 1) /* fixed md */
        CMP       N:_md_type, #0x1   ;; 1 cycle
        BZ        ??dlms_reset_data_563  ;; 4 cycles
        ; ------------------------------------- Block: 27 cycles
// 5869         {
// 5870           mdi_sel_new/= 3;
        MOV       A, N:_mdi_sel_new  ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       X, #0x3            ;; 1 cycle
        MOV       A, B               ;; 1 cycle
          CFI FunCall ?UC_DIV_L01
        CALL      N:?UC_DIV_L01      ;; 3 cycles
        MOV       B, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       N:_mdi_sel_new, A  ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        ; ------------------------------------- Block: 11 cycles
// 5871         }
// 5872         
// 5873         if(mdi_sel != mdi_sel_new)
??dlms_reset_data_563:
        MOV       A, N:_mdi_sel      ;; 1 cycle
        CMP       A, N:_mdi_sel_new  ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_564  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 5874         {
// 5875           /* for reset MD********************* */
// 5876           long_into_char_array4(energy.Allph.active_imp,&opr_data[0]);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      BC, N:_energy+54   ;; 1 cycle
        MOVW      AX, N:_energy+52   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 5877           long_into_char_array4(energy.Allph.active_exp,&opr_data[4]);
        MOVW      DE, #LWRD(_opr_data+4)  ;; 1 cycle
        MOVW      BC, N:_energy+58   ;; 1 cycle
        MOVW      AX, N:_energy+56   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 5878           long_into_char_array4(energy.Allph.apparent_imp,&opr_data[8]);
        MOVW      DE, #LWRD(_opr_data+8)  ;; 1 cycle
        MOVW      BC, N:_energy+70   ;; 1 cycle
        MOVW      AX, N:_energy+68   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 5879           eprom_write(0x0800,0,192,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0xC0          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x800         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 5880           eprom_write(0x0980,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+40
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x980         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 5881           
// 5882           long_into_char_array4(energy.Allph.apparent_exp,&opr_data[0]);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      BC, N:_energy+74   ;; 1 cycle
        MOVW      AX, N:_energy+72   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 5883           eprom_write(0x08C0,0,192,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+42
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0xC0          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x8C0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 5884           eprom_write(0x0990,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+44
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x990         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 5885           
// 5886           long_into_char_array4(energy.Rph.active_imp,&opr_data[0]);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      BC, N:_energy+4    ;; 1 cycle
        MOVW      AX, N:_energy+2    ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 5887           long_into_char_array4(energy.Yph.active_imp,&opr_data[4]);
        MOVW      DE, #LWRD(_opr_data+4)  ;; 1 cycle
        MOVW      BC, N:_energy+18   ;; 1 cycle
        MOVW      AX, N:_energy+16   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 5888           long_into_char_array4(energy.Bph.active_imp,&opr_data[8]);
        MOVW      DE, #LWRD(_opr_data+8)  ;; 1 cycle
        MOVW      BC, N:_energy+32   ;; 1 cycle
        MOVW      AX, N:_energy+30   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 5889           eprom_write(0x0360,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+46
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x360         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 5890           
// 5891           long_into_char_array4(energy.Rph.active_exp,&opr_data[0]);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      BC, N:_energy+8    ;; 1 cycle
        MOVW      AX, N:_energy+6    ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 5892           long_into_char_array4(energy.Yph.active_exp,&opr_data[4]);
        MOVW      DE, #LWRD(_opr_data+4)  ;; 1 cycle
        MOVW      BC, N:_energy+22   ;; 1 cycle
        MOVW      AX, N:_energy+20   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 5893           long_into_char_array4(energy.Bph.active_exp,&opr_data[8]);
        MOVW      DE, #LWRD(_opr_data+8)  ;; 1 cycle
        MOVW      BC, N:_energy+36   ;; 1 cycle
        MOVW      AX, N:_energy+34   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 5894           eprom_write(0x0370,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+48
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x370         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 5895           
// 5896           long_into_char_array4(energy.Allph.defraud_mag,&opr_data[0]);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      BC, N:_energy+62   ;; 1 cycle
        MOVW      AX, N:_energy+60   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 5897           eprom_write(0x09C0,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+50
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x9C0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 5898           
// 5899           long_into_char_array4(energy.Rph.defraud_mag,&opr_data[0]);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      BC, N:_energy+12   ;; 1 cycle
        MOVW      AX, N:_energy+10   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 5900           long_into_char_array4(energy.Yph.defraud_mag,&opr_data[4]);
        MOVW      DE, #LWRD(_opr_data+4)  ;; 1 cycle
        MOVW      BC, N:_energy+26   ;; 1 cycle
        MOVW      AX, N:_energy+24   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 5901           long_into_char_array4(energy.Bph.defraud_mag,&opr_data[8]);
        MOVW      DE, #LWRD(_opr_data+8)  ;; 1 cycle
        MOVW      BC, N:_energy+40   ;; 1 cycle
        MOVW      AX, N:_energy+38   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 5902           eprom_write(0x09D0,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+52
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x9D0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 5903           
// 5904           load_survey_reset_avg_acc(); 
          CFI FunCall _load_survey_reset_avg_acc
        CALL      _load_survey_reset_avg_acc  ;; 3 cycles
// 5905 	  load_survey_fill_last_energy();
          CFI FunCall _load_survey_fill_last_energy
        CALL      _load_survey_fill_last_energy  ;; 3 cycles
// 5906           mdi_sel= mdi_sel_new;
        MOV       A, N:_mdi_sel_new  ;; 1 cycle
        MOV       N:_mdi_sel, A      ;; 1 cycle
        ADDW      SP, #0x10          ;; 1 cycle
          CFI CFA SP+36
        ; ------------------------------------- Block: 165 cycles
// 5907         }
// 5908         
// 5909         mdi_sel= mdi_sel_new;
??dlms_reset_data_564:
        MOV       A, N:_mdi_sel_new  ;; 1 cycle
        MOV       N:_mdi_sel, A      ;; 1 cycle
// 5910         k= k + 2;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x2           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 5911         eprom_read(0x0FC0,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFC0         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 5912         if(md_type == 1) /* '1' for sliding and '0' for fixed */
        CMP       N:_md_type, #0x1   ;; 1 cycle
        BNZ       ??dlms_reset_data_565  ;; 4 cycles
        ; ------------------------------------- Block: 17 cycles
// 5913         {
// 5914           opr_data[0] = mdi_sel / 3;
        MOV       A, N:_mdi_sel      ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       X, #0x3            ;; 1 cycle
        MOV       A, B               ;; 1 cycle
          CFI FunCall ?UC_DIV_L01
        CALL      N:?UC_DIV_L01      ;; 3 cycles
        MOV       B, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       N:_opr_data, A     ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        BR        S:??dlms_reset_data_566  ;; 3 cycles
        ; ------------------------------------- Block: 14 cycles
// 5915         }
// 5916         else
// 5917         {
// 5918           opr_data[0] = mdi_sel;
??dlms_reset_data_565:
        MOV       A, N:_mdi_sel      ;; 1 cycle
        MOV       N:_opr_data, A     ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 5919         }
// 5920         eprom_write(0x0FC0,0,16,PAGE_1,AUTO_CALC);
??dlms_reset_data_566:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFC0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 5921         
// 5922         md_variable_update();
          CFI FunCall _md_variable_update
        CALL      _md_variable_update  ;; 3 cycles
// 5923         
// 5924         mem_log1(COMPART_TRANSACTION,152);
        MOVW      BC, #0x98          ;; 1 cycle
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _mem_log1
        CALL      _mem_log1          ;; 3 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
// 5925       }
// 5926       
// 5927       break;
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 21 cycles
// 5928     case 0x01000804:                                /* LSIP */
// 5929       if(attribute_id == 2)
??data_dec_27:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_457  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 5930       {
// 5931         if(info[k] != 0x12)
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x12           ;; 1 cycle
        BZ        ??dlms_reset_data_567  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 5932         {
// 5933           conf_err(0x0C);
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 5934           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 5935         }
// 5936         
// 5937         k++;
??dlms_reset_data_567:
        INCW      N:_k               ;; 2 cycles
// 5938         
// 5939         uint_temp= 256 * info[k] + info[k + 1];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      HL, AX             ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       D, #0x0            ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        MOVW      [SP+0x04], AX      ;; 1 cycle
// 5940         if((uint_temp != 900) && (uint_temp != 1800) && (uint_temp != 3600))
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        CMPW      AX, #0x384         ;; 1 cycle
        BZ        ??dlms_reset_data_568  ;; 4 cycles
        ; ------------------------------------- Block: 23 cycles
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        CMPW      AX, #0x708         ;; 1 cycle
        BZ        ??dlms_reset_data_568  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        CMPW      AX, #0xE10         ;; 1 cycle
        BZ        ??dlms_reset_data_568  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 5941         {
// 5942           conf_err(250);
        MOV       A, #0xFA           ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 5943           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 5944         }
// 5945         
// 5946         mdi_sel_ls_new= 3600 / (256 * info[k] + info[k + 1]);
??dlms_reset_data_568:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      HL, AX             ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       D, #0x0            ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, #0xE10         ;; 1 cycle
          CFI FunCall ?SI_DIV_L02
        CALL      N:?SI_DIV_L02      ;; 3 cycles
        XCH       A, X               ;; 1 cycle
        MOV       N:_mdi_sel_ls_new, A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 5947         k= k + 2;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x2           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 5948         if(mdi_sel_ls != mdi_sel_ls_new)
        MOV       A, N:_mdi_sel_ls   ;; 1 cycle
        CMP       A, N:_mdi_sel_ls_new  ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_569  ;; 4 cycles
          CFI FunCall _load_survey_reset_avg_acc
        ; ------------------------------------- Block: 31 cycles
// 5949         {
// 5950           /*                  load_survey_snap_shot(); */
// 5951           /* ****load survey integration change avg voltages zero and current energy load in last energy registers************* */
// 5952           
// 5953           load_survey_reset_avg_acc();
        CALL      _load_survey_reset_avg_acc  ;; 3 cycles
// 5954           
// 5955           load_survey_fill_last_energy();
          CFI FunCall _load_survey_fill_last_energy
        CALL      _load_survey_fill_last_energy  ;; 3 cycles
// 5956           
// 5957                     
// 5958           /* ******************************************* */
// 5959           
// 5960           mdi_sel_ls= mdi_sel_ls_new;
        MOV       A, N:_mdi_sel_ls_new  ;; 1 cycle
        MOV       N:_mdi_sel_ls, A   ;; 1 cycle
// 5961           for(lu8_i= 0; lu8_i < 182; lu8_i++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 10 cycles
??data_dec_28:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0xB6           ;; 1 cycle
        BNC       ??dlms_reset_data_570  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 5962           {
// 5963             d_array[lu8_i]= 0;
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array)  ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [HL], AX           ;; 1 cycle
// 5964           }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??data_dec_28    ;; 3 cycles
        ; ------------------------------------- Block: 16 cycles
// 5965           
// 5966           day_counter= 0;
??dlms_reset_data_570:
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_day_counter, AX  ;; 1 cycle
// 5967           // midnight_par_cnt= 0;
// 5968           // midnight_roll_f= 0;
// 5969           max_day_counter= (max_load_survey_cnt) / (24 * mdi_sel_ls);
        MOV       X, N:_mdi_sel_ls   ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x18          ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, N:_max_load_survey_cnt  ;; 1 cycle
        DIVHU                        ;; 9 cycles
        NOP                          ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       N:_max_day_counter, A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 5970           ////////                    max_midnight_cnt= (max_load_survey_cnt) / (24 * mdi_sel_ls);
// 5971           ////////                    if(max_midnight_cnt > MAX_DAILY_DAYS)
// 5972           ////////                    {
// 5973           ////////                        max_midnight_cnt= MAX_DAILY_DAYS;
// 5974           ////////                    }
// 5975           
// 5976           lsro_flag= 0;
        MOV       N:_lsro_flag, #0x0  ;; 1 cycle
// 5977           fill_oprzero(16);
        MOV       A, #0x10           ;; 1 cycle
          CFI FunCall _fill_oprzero
        CALL      _fill_oprzero      ;; 3 cycles
// 5978           eprom_write(0x0D00,0,416,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x1A0         ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xD00         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 5979           eprom_write(0x0780,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+40
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x780         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 5980           
// 5981           
// 5982           // eprom_write(DAILY_ENERGY_STATUS,0,16,PAGE_1,AUTO_CALC); /* midnight_par_cnt and midnnight_roll_f */
// 5983           
// 5984           d_array[day_counter]= sel_datediff(present_date, present_month, present_year);
        MOV       C, N:_Now+6        ;; 1 cycle
        MOV       X, N:_Now+5        ;; 1 cycle
        MOV       A, N:_Now+3        ;; 1 cycle
          CFI FunCall _sel_datediff
        CALL      _sel_datediff      ;; 3 cycles
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, N:_day_counter  ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array)  ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        XCHW      AX, HL             ;; 1 cycle
        MOVW      [DE], AX           ;; 1 cycle
        XCHW      AX, HL             ;; 1 cycle
// 5985           
// 5986           opr_data[0] = d_array[0] / 256;
        MOVW      AX, N:_d_array     ;; 1 cycle
        CLRB      X                  ;; 1 cycle
        MOV       N:_opr_data, A     ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 5987           opr_data[1] = d_array[0] % 256;
        MOVW      AX, N:_d_array     ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       N:_opr_data+1, A   ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 5988           eprom_write(0x0D00,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+42
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xD00         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 5989           
// 5990           opr_data[0]= 0; /* day_counter */
        MOV       N:_opr_data, #0x0  ;; 1 cycle
// 5991           opr_data[1]= max_day_counter;
        MOV       A, N:_max_day_counter  ;; 1 cycle
        MOV       N:_opr_data+1, A   ;; 1 cycle
// 5992           eprom_write(0x0790,0,16,PAGE_1,AUTO_CALC); /* day_counter */
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+44
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x790         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 5993           
// 5994           load_survey_cnt= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_load_survey_cnt, AX  ;; 1 cycle
// 5995           
// 5996           ls_fg_f= 1;
        MOV       N:_ls_fg_f, #0x1   ;; 1 cycle
// 5997           
// 5998           TempTime.min=decimal_to_bcd(60/mdi_sel_ls); 
        MOV       X, N:_mdi_sel_ls   ;; 1 cycle
        MOV       A, #0x3C           ;; 1 cycle
          CFI FunCall ?UC_DIV_L01
        CALL      N:?UC_DIV_L01      ;; 3 cycles
        MOV       B, A               ;; 1 cycle
        MOV       A, B               ;; 1 cycle
          CFI FunCall _decimal_to_bcd
        CALL      _decimal_to_bcd    ;; 3 cycles
        MOV       N:_TempTime+1, A   ;; 1 cycle
// 5999           TempTime.hour=0;
        MOV       N:_TempTime+2, #0x0  ;; 1 cycle
// 6000           flag_rtc_change.all = 0;
        MOV       N:_flag_rtc_change, #0x0  ;; 1 cycle
// 6001           ls_rtc_fill=0;
        MOV       N:_ls_rtc_fill, #0x0  ;; 1 cycle
// 6002           ls_rev_fill=0;
        MOV       N:_ls_rev_fill, #0x0  ;; 1 cycle
// 6003           
// 6004           if(mdi_sel_ls==4)
        ADDW      SP, #0x8           ;; 1 cycle
          CFI CFA SP+36
        CMP       N:_mdi_sel_ls, #0x4  ;; 1 cycle
        BNZ       ??dlms_reset_data_571  ;; 4 cycles
        ; ------------------------------------- Block: 114 cycles
// 6005           {
// 6006             lsip_period = 15;
        MOV       N:_lsip_period, #0xF  ;; 1 cycle
        BR        S:??dlms_reset_data_572  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 6007           }
// 6008           else 
// 6009           {
// 6010             lsip_period = 30;
??dlms_reset_data_571:
        MOV       N:_lsip_period, #0x1E  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 6011           }
// 6012           
// 6013           if(rtc_set_flag == high)
??dlms_reset_data_572:
        MOVW      HL, #LWRD(_flag_rtc1)  ;; 1 cycle
        MOV1      CY, [HL].7         ;; 1 cycle
        BNC       ??dlms_reset_data_573  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6014           {
// 6015             rtc_set_flag= 0;
        CLR1      N:_flag_rtc1.7     ;; 2 cycles
// 6016             rtc_init_with_system_time();
          CFI FunCall _rtc_init_with_system_time
        CALL      _rtc_init_with_system_time  ;; 3 cycles
// 6017             read_rtc_cnt= 60; /* for immediate read rtc */
        MOV       N:_read_rtc_cnt, #0x3C  ;; 1 cycle
// 6018             flag_rtc1_fail= 0;
        CLR1      N:_flag_rtc1.0     ;; 2 cycles
          CFI FunCall _rtc_get
        ; ------------------------------------- Block: 8 cycles
// 6019           }
// 6020           
// 6021           rtc_get();
??dlms_reset_data_573:
        CALL      _rtc_get           ;; 3 cycles
// 6022           ls_miss_fill();
          CFI FunCall _ls_miss_fill
        CALL      _ls_miss_fill      ;; 3 cycles
// 6023           load_ls_cnt();
          CFI FunCall _load_ls_cnt
        CALL      _load_ls_cnt       ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 6024         }
// 6025         
// 6026         mdi_sel_ls= mdi_sel_ls_new;
??dlms_reset_data_569:
        MOV       A, N:_mdi_sel_ls_new  ;; 1 cycle
        MOV       N:_mdi_sel_ls, A   ;; 1 cycle
// 6027         
// 6028         eprom_read(0x07B0,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x7B0         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 6029         opr_data[0]= mdi_sel_ls;
        MOV       A, N:_mdi_sel_ls   ;; 1 cycle
        MOV       N:_opr_data, A     ;; 1 cycle
// 6030         eprom_write(0x07B0,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x7B0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6031         
// 6032         mem_log1(COMPART_TRANSACTION,153);
        MOVW      BC, #0x99          ;; 1 cycle
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _mem_log1
        CALL      _mem_log1          ;; 3 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
// 6033       }
// 6034       
// 6035       break;
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 29 cycles
// 6036     case 0x01000806:
// 6037       if(attribute_id == 2)
??data_dec_29:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_574  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6038       {
// 6039         if(info[k] != 0x11)
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x11           ;; 1 cycle
        BZ        ??dlms_reset_data_575  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 6040         {
// 6041           conf_err(0x0C);
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6042           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6043         }
// 6044         
// 6045         if(asso2_flag != 0)
??dlms_reset_data_575:
        CMP0      N:_asso2_flag      ;; 1 cycle
        BZ        ??dlms_reset_data_576  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6046         {
// 6047           conf_err(0x0D);
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6048           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6049         }
// 6050         
// 6051         k++;
??dlms_reset_data_576:
        INCW      N:_k               ;; 2 cycles
        ; ------------------------------------- Block: 2 cycles
// 6052         //                    bill_month_period= info[k];       //pending 
// 6053         //                    
// 6054         //                    read_from_16(0x0c10);
// 6055         //                    OPR11[0]= bill_month_period;
// 6056         //                    //                OPR11[14]= cal_chksum(&OPR10, 15);
// 6057         //                    write_data_16(16, 0x0c10);
// 6058       }
// 6059       
// 6060       break;
??dlms_reset_data_574:
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 6061       
// 6062     case 0x01000B06:
// 6063       if(attribute_id == 2)
??data_dec_30:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_577  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6064       {
// 6065         if(info[k] != 0x11)
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x11           ;; 1 cycle
        BZ        ??dlms_reset_data_578  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 6066         {
// 6067           conf_err(0x0C);
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6068           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6069         }
// 6070         
// 6071         if(asso2_flag != 0)
??dlms_reset_data_578:
        CMP0      N:_asso2_flag      ;; 1 cycle
        BZ        ??dlms_reset_data_579  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6072         {
// 6073           conf_err(0x0D);
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6074           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6075         }
// 6076         
// 6077         k++;
??dlms_reset_data_579:
        INCW      N:_k               ;; 2 cycles
        ; ------------------------------------- Block: 2 cycles
// 6078         //                      app_cal= info[k];       //pending
// 6079         //                      
// 6080         //                      read_from_16(0x0c00);
// 6081         //                      OPR11[13]= app_cal;
// 6082         //                      //                OPR11[14]= cal_chksum(&OPR10, 15);
// 6083         //                      write_data_16(16, 0x0c00);
// 6084       }
// 6085       
// 6086       break;
??dlms_reset_data_577:
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 6087     case 0x00010000: /* rtc set */
// 6088       if(attribute_id == 2)
??data_dec_31:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_580  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6089       {
// 6090         
// 6091         if((info[k] != 0x09) || (info[k + 1] != 0x0C))
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BNZ       ??dlms_reset_data_581  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP       A, #0xC            ;; 1 cycle
        BZ        ??dlms_reset_data_582  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 6092         {
// 6093           conf_err(0x0C);
??dlms_reset_data_581:
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6094           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6095         }
// 6096         
// 6097         k++;
??dlms_reset_data_582:
        INCW      N:_k               ;; 2 cycles
// 6098         k++;
        INCW      N:_k               ;; 2 cycles
// 6099         
// 6100         TempTime.hour = info[k + 5];                
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+5)[BC]   ;; 1 cycle
        MOV       N:_TempTime+2, A   ;; 1 cycle
// 6101         TempTime.min = info[k + 6];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+6)[BC]   ;; 1 cycle
        MOV       N:_TempTime+1, A   ;; 1 cycle
// 6102         TempTime.sec = info[k + 7];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+7)[BC]   ;; 1 cycle
        MOV       N:_TempTime, A     ;; 1 cycle
// 6103         TempTime.day = info[k + 3];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+3)[BC]   ;; 1 cycle
        MOV       N:_TempTime+3, A   ;; 1 cycle
// 6104         TempTime.month = info[k + 2];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+2)[BC]   ;; 1 cycle
        MOV       N:_TempTime+5, A   ;; 1 cycle
// 6105         TempTime.year = (us8)((us16)info[k] * 256 + info[k + 1] - 0x07D0);
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, #0x0            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       A, D               ;; 1 cycle
        ADD       A, #0x30           ;; 1 cycle
        MOV       N:_TempTime+6, A   ;; 1 cycle
// 6106         TempTime.week = info[k + 4];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+4)[BC]   ;; 1 cycle
        MOV       N:_TempTime+4, A   ;; 1 cycle
// 6107         TempTime.week = isdowvalid(TempTime.month,TempTime.day,TempTime.year,TempTime.week);
        MOV       A, N:_TempTime+4   ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        XCH       A, X               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       A, N:_TempTime+6   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       C, N:_TempTime+3   ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       X, N:_TempTime+5   ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _isdowvalid
        CALL      _isdowvalid        ;; 3 cycles
        XCH       A, X               ;; 1 cycle
        MOV       N:_TempTime+4, A   ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 6108         if(TempTime.week==0)
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        CMP0      N:_TempTime+4      ;; 1 cycle
        BNZ       ??dlms_reset_data_583  ;; 4 cycles
        ; ------------------------------------- Block: 58 cycles
// 6109         {
// 6110           conf_err(250);
        MOV       A, #0xFA           ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6111           return(0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6112         }
// 6113         if(TempTime.week==7)
??dlms_reset_data_583:
        CMP       N:_TempTime+4, #0x7  ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 6114         {
// 6115           TempTime.week = 0;
        MOV       N:_TempTime+4, #0x0  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 6116         }
// 6117         uint_temp = is_valid_date(TempTime,TIME_DECIMAL);
??data_dec_32:
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        SUBW      SP, #0x8           ;; 1 cycle
          CFI CFA SP+44
        MOVW      DE, SP             ;; 1 cycle
        MOVW      BC, #0x8           ;; 1 cycle
          CFI FunCall ?MOVE_LONG_L06
        CALL      N:?MOVE_LONG_L06   ;; 3 cycles
        MOV       A, #0x1            ;; 1 cycle
          CFI FunCall _is_valid_date
        CALL      _is_valid_date     ;; 3 cycles
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      [SP+0x0C], AX      ;; 1 cycle
// 6118         if(uint_temp == 0) 
        MOVW      AX, [SP+0x0C]      ;; 1 cycle
        ADDW      SP, #0x8           ;; 1 cycle
          CFI CFA SP+36
        CMPW      AX, #0x0           ;; 1 cycle
        BNZ       ??dlms_reset_data_584  ;; 4 cycles
        ; ------------------------------------- Block: 21 cycles
// 6119         {
// 6120           conf_err(250);
        MOV       A, #0xFA           ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6121           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6122         }
// 6123         
// 6124         UcharTemp= info[k++];
??dlms_reset_data_584:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 6125         uint_temp= (uint16_t)UcharTemp * 256;
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      HL, AX             ;; 1 cycle
// 6126         uint_temp= uint_temp + info[k++] - 0x07D0;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, #0xF830        ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        MOVW      [SP+0x04], AX      ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 6127         UcharTemp= (unsigned char)(uint_temp % 256);
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
// 6128         recv_buffer[3]= decimal_to_bcd(UcharTemp); /* yr */
        MOV       A, [SP+0x01]       ;; 1 cycle
          CFI FunCall _decimal_to_bcd
        CALL      _decimal_to_bcd    ;; 3 cycles
        MOV       N:_recv_buffer+3, A  ;; 1 cycle
// 6129         UcharTemp= info[k++];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 6130         recv_buffer[4]= decimal_to_bcd(UcharTemp); /* //month */
        MOV       A, [SP+0x01]       ;; 1 cycle
          CFI FunCall _decimal_to_bcd
        CALL      _decimal_to_bcd    ;; 3 cycles
        MOV       N:_recv_buffer+4, A  ;; 1 cycle
// 6131         UcharTemp= info[k++];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 6132         recv_buffer[5]= decimal_to_bcd(UcharTemp); /* //day */
        MOV       A, [SP+0x01]       ;; 1 cycle
          CFI FunCall _decimal_to_bcd
        CALL      _decimal_to_bcd    ;; 3 cycles
        MOV       N:_recv_buffer+5, A  ;; 1 cycle
// 6133         k++;
        INCW      N:_k               ;; 2 cycles
// 6134         recv_buffer[6]= decimal_to_bcd(TempTime.week); /* dayOfWeek */
        MOV       A, N:_TempTime+4   ;; 1 cycle
          CFI FunCall _decimal_to_bcd
        CALL      _decimal_to_bcd    ;; 3 cycles
        MOV       N:_recv_buffer+6, A  ;; 1 cycle
// 6135         UcharTemp= info[k++];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 6136         recv_buffer[2]= decimal_to_bcd(UcharTemp); /* //hour */
        MOV       A, [SP+0x01]       ;; 1 cycle
          CFI FunCall _decimal_to_bcd
        CALL      _decimal_to_bcd    ;; 3 cycles
        MOV       N:_recv_buffer+2, A  ;; 1 cycle
// 6137         UcharTemp= info[k++];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 6138         recv_buffer[1]= decimal_to_bcd(UcharTemp); /* //min */
        MOV       A, [SP+0x01]       ;; 1 cycle
          CFI FunCall _decimal_to_bcd
        CALL      _decimal_to_bcd    ;; 3 cycles
        MOV       N:_recv_buffer+1, A  ;; 1 cycle
// 6139         UcharTemp= info[k++];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 6140         recv_buffer[0]= decimal_to_bcd(UcharTemp); /* //sec */
        MOV       A, [SP+0x01]       ;; 1 cycle
          CFI FunCall _decimal_to_bcd
        CALL      _decimal_to_bcd    ;; 3 cycles
        MOV       N:_recv_buffer, A  ;; 1 cycle
// 6141         /* ************************************************ */
// 6142         if((recv_buffer[3] > present_year) || ((recv_buffer[3] == present_year) && (recv_buffer[4] > present_month)) || ((recv_buffer[3] == present_year) && (recv_buffer[4] == present_month) && (recv_buffer[5] >= present_date)))
        MOV       A, N:_Now+6        ;; 1 cycle
        CMP       A, N:_recv_buffer+3  ;; 1 cycle
        BC        ??dlms_reset_data_585  ;; 4 cycles
        ; ------------------------------------- Block: 94 cycles
        MOV       A, N:_recv_buffer+3  ;; 1 cycle
        CMP       A, N:_Now+6        ;; 1 cycle
        BNZ       ??dlms_reset_data_586  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_Now+5        ;; 1 cycle
        CMP       A, N:_recv_buffer+4  ;; 1 cycle
        BC        ??dlms_reset_data_585  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
??dlms_reset_data_586:
        MOV       A, N:_recv_buffer+3  ;; 1 cycle
        CMP       A, N:_Now+6        ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_587  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_recv_buffer+4  ;; 1 cycle
        CMP       A, N:_Now+5        ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_587  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_recv_buffer+5  ;; 1 cycle
        CMP       A, N:_Now+3        ;; 1 cycle
        SKNC                         ;; 4 cycles
        BR        N:??dlms_reset_data_587  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6143         {
// 6144           rtc_set_flag= 1;
??dlms_reset_data_585:
        SET1      N:_flag_rtc1.7     ;; 2 cycles
// 6145           if((recv_buffer[3] == present_year) && (recv_buffer[4] == present_month) && (recv_buffer[5] == present_date))
        MOV       A, N:_recv_buffer+3  ;; 1 cycle
        CMP       A, N:_Now+6        ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_588  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        MOV       A, N:_recv_buffer+4  ;; 1 cycle
        CMP       A, N:_Now+5        ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_588  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_recv_buffer+5  ;; 1 cycle
        CMP       A, N:_Now+3        ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_588  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6146           {
// 6147             if((recv_buffer[2] == present_hr) && (bcd_to_decimal(recv_buffer[1]) / (60 / mdi_sel_ls) == (bcd_to_decimal(present_min) / (60 / mdi_sel_ls))))
        MOV       A, N:_recv_buffer+2  ;; 1 cycle
        CMP       A, N:_Now+2        ;; 1 cycle
        BNZ       ??dlms_reset_data_589  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_recv_buffer+1  ;; 1 cycle
          CFI FunCall _bcd_to_decimal
        CALL      _bcd_to_decimal    ;; 3 cycles
        MOV       [SP+0x0D], A       ;; 1 cycle
        MOV       A, N:_Now+1        ;; 1 cycle
          CFI FunCall _bcd_to_decimal
        CALL      _bcd_to_decimal    ;; 3 cycles
        MOV       B, A               ;; 1 cycle
        MOV       X, N:_mdi_sel_ls   ;; 1 cycle
        MOV       A, #0x3C           ;; 1 cycle
          CFI FunCall ?UC_DIV_L01
        CALL      N:?UC_DIV_L01      ;; 3 cycles
        MOV       C, A               ;; 1 cycle
        MOV       A, C               ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x0D]       ;; 1 cycle
          CFI FunCall ?UC_DIV_L01
        CALL      N:?UC_DIV_L01      ;; 3 cycles
        MOV       C, A               ;; 1 cycle
        MOV       X, N:_mdi_sel_ls   ;; 1 cycle
        MOV       A, #0x3C           ;; 1 cycle
          CFI FunCall ?UC_DIV_L01
        CALL      N:?UC_DIV_L01      ;; 3 cycles
        MOV       D, A               ;; 1 cycle
        MOV       A, D               ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, B               ;; 1 cycle
          CFI FunCall ?UC_DIV_L01
        CALL      N:?UC_DIV_L01      ;; 3 cycles
        MOV       B, A               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        CMP       A, B               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        BNZ       ??dlms_reset_data_589  ;; 4 cycles
        ; ------------------------------------- Block: 43 cycles
// 6148             {
// 6149               ls_rtc_fill= 0;
        MOV       N:_ls_rtc_fill, #0x0  ;; 1 cycle
        BR        N:??dlms_reset_data_590  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 6150             }
// 6151             else if((recv_buffer[2] > present_hr) || ((recv_buffer[2] == present_hr) && (recv_buffer[1] >= present_min)))
??dlms_reset_data_589:
        MOV       A, N:_Now+2        ;; 1 cycle
        CMP       A, N:_recv_buffer+2  ;; 1 cycle
        BC        ??dlms_reset_data_591  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_recv_buffer+2  ;; 1 cycle
        CMP       A, N:_Now+2        ;; 1 cycle
        BNZ       ??dlms_reset_data_592  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_recv_buffer+1  ;; 1 cycle
        CMP       A, N:_Now+1        ;; 1 cycle
        BC        ??dlms_reset_data_592  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6152             {
// 6153               ls_rtc_fill= 1;
??dlms_reset_data_591:
        MOV       N:_ls_rtc_fill, #0x1  ;; 1 cycle
// 6154               TempTime = load_survey_next_interval_timestamp(lsip_period,OffTime);
        MOVW      HL, #LWRD(_OffTime)  ;; 1 cycle
        SUBW      SP, #0x8           ;; 1 cycle
          CFI CFA SP+44
        MOVW      DE, SP             ;; 1 cycle
        MOVW      BC, #0x8           ;; 1 cycle
          CFI FunCall ?MOVE_LONG_L06
        CALL      N:?MOVE_LONG_L06   ;; 3 cycles
        MOV       C, N:_lsip_period  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x20          ;; 1 cycle
          CFI FunCall _load_survey_next_interval_timestamp
        CALL      _load_survey_next_interval_timestamp  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        ADDW      SP, #0x8           ;; 1 cycle
          CFI CFA SP+36
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x18          ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
        BR        N:??dlms_reset_data_590  ;; 3 cycles
        ; ------------------------------------- Block: 36 cycles
// 6155             }
// 6156             else
// 6157             {
// 6158               eprom_read(0x0780,0,PAGE_1,AUTO_CALC);
??dlms_reset_data_592:
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x780         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 6159               lsro_flag= opr_data[0]= 0;
        MOV       N:_opr_data, #0x0  ;; 1 cycle
        MOV       A, N:_opr_data     ;; 1 cycle
        MOV       N:_lsro_flag, A    ;; 1 cycle
// 6160               //                            OPR11[14]= cal_chksum(&OPR10, 15);
// 6161               eprom_write(0x0780,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x780         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6162               ls_rtc_fill= 1;
        MOV       N:_ls_rtc_fill, #0x1  ;; 1 cycle
// 6163               TempTime = load_survey_next_interval_timestamp(lsip_period,OffTime);
        MOVW      HL, #LWRD(_OffTime)  ;; 1 cycle
        SUBW      SP, #0x8           ;; 1 cycle
          CFI CFA SP+46
        MOVW      DE, SP             ;; 1 cycle
        MOVW      BC, #0x8           ;; 1 cycle
          CFI FunCall ?MOVE_LONG_L06
        CALL      N:?MOVE_LONG_L06   ;; 3 cycles
        MOV       C, N:_lsip_period  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x22          ;; 1 cycle
          CFI FunCall _load_survey_next_interval_timestamp
        CALL      _load_survey_next_interval_timestamp  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        ADDW      SP, #0xA           ;; 1 cycle
          CFI CFA SP+36
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x18          ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
        BR        N:??dlms_reset_data_590  ;; 3 cycles
        ; ------------------------------------- Block: 55 cycles
// 6164             }
// 6165           }
// 6166           else
// 6167           {
// 6168             ls_rtc_fill= 1;
??dlms_reset_data_588:
        MOV       N:_ls_rtc_fill, #0x1  ;; 1 cycle
// 6169             TempTime = load_survey_next_interval_timestamp(lsip_period,OffTime);
        MOVW      HL, #LWRD(_OffTime)  ;; 1 cycle
        SUBW      SP, #0x8           ;; 1 cycle
          CFI CFA SP+44
        MOVW      DE, SP             ;; 1 cycle
        MOVW      BC, #0x8           ;; 1 cycle
          CFI FunCall ?MOVE_LONG_L06
        CALL      N:?MOVE_LONG_L06   ;; 3 cycles
        MOV       C, N:_lsip_period  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x20          ;; 1 cycle
          CFI FunCall _load_survey_next_interval_timestamp
        CALL      _load_survey_next_interval_timestamp  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        ADDW      SP, #0x8           ;; 1 cycle
          CFI CFA SP+36
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x18          ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
        BR        N:??dlms_reset_data_590  ;; 3 cycles
        ; ------------------------------------- Block: 36 cycles
// 6170           }
// 6171         }
// 6172         else
// 6173         {
// 6174           eprom_read(0x0780,0,PAGE_1,AUTO_CALC);
??dlms_reset_data_587:
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x780         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 6175           lsro_flag= opr_data[0]= 0;
        MOV       N:_opr_data, #0x0  ;; 1 cycle
        MOV       A, N:_opr_data     ;; 1 cycle
        MOV       N:_lsro_flag, A    ;; 1 cycle
// 6176           //                    OPR11[14]= cal_chksum(&OPR10, 15);
// 6177           eprom_write(0x0780,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x780         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6178           uint_temp= sel_datediff(recv_buffer[5], recv_buffer[4], recv_buffer[3]);
        MOV       C, N:_recv_buffer+3  ;; 1 cycle
        MOV       X, N:_recv_buffer+4  ;; 1 cycle
        MOV       A, N:_recv_buffer+5  ;; 1 cycle
          CFI FunCall _sel_datediff
        CALL      _sel_datediff      ;; 3 cycles
        MOVW      [SP+0x06], AX      ;; 1 cycle
// 6179           UcharTemp= 200;
        MOV       A, #0xC8           ;; 1 cycle
        MOV       [SP+0x03], A       ;; 1 cycle
// 6180           for(tem_m= day_counter, tem_s= 0; tem_s < max_day_counter; tem_s++)
        MOVW      AX, N:_day_counter  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       [SP+0x08], A       ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x05], A       ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        ; ------------------------------------- Block: 34 cycles
??data_dec_33:
        MOV       A, [SP+0x03]       ;; 1 cycle
        CMP       A, N:_max_day_counter  ;; 1 cycle
        BNC       ??dlms_reset_data_593  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6181           {
// 6182             if((uint_temp >= d_array[tem_m]) && (d_array[tem_m] != 0)) /* || to_days > d_array[i]) */
        MOV       A, [SP+0x06]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array)  ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, [DE]           ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BC        ??dlms_reset_data_594  ;; 4 cycles
        ; ------------------------------------- Block: 16 cycles
        MOV       A, [SP+0x06]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array)  ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [HL]           ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        BZ        ??dlms_reset_data_594  ;; 4 cycles
        ; ------------------------------------- Block: 14 cycles
// 6183             {
// 6184               UcharTemp= tem_m;
        MOV       A, [SP+0x06]       ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
// 6185               break;
        BR        S:??dlms_reset_data_593  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 6186             }
// 6187             
// 6188             tem_m= tem_m - 1;
??dlms_reset_data_594:
        MOV       A, [SP+0x06]       ;; 1 cycle
        DEC       A                  ;; 1 cycle
        MOV       [SP+0x06], A       ;; 1 cycle
// 6189             if(tem_m == 255)
        MOV       A, [SP+0x06]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_595  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 6190             {
// 6191               /*				      tem_m=max_day_counter-1; */
// 6192               UcharTemp= 200;
        MOV       A, #0xC8           ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
// 6193               break;
        BR        S:??dlms_reset_data_593  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 6194             }
// 6195           }
??dlms_reset_data_595:
        MOV       A, [SP+0x03]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x03], A       ;; 1 cycle
        BR        S:??data_dec_33    ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 6196           if(UcharTemp == 200)
??dlms_reset_data_593:
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, #0xC8           ;; 1 cycle
        BNZ       ??dlms_reset_data_596  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6197           {
// 6198             day_counter= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_day_counter, AX  ;; 1 cycle
// 6199             ls_fg_f= 1;
        MOV       N:_ls_fg_f, #0x1   ;; 1 cycle
// 6200             ls_rtc_fill= 1;
        MOV       N:_ls_rtc_fill, #0x1  ;; 1 cycle
// 6201             ls_rev_fill= 1;
        MOV       N:_ls_rev_fill, #0x1  ;; 1 cycle
// 6202             midnight_par_cnt= 0;
        MOV       N:_midnight_par_cnt, #0x0  ;; 1 cycle
        BR        N:??dlms_reset_data_597  ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 6203           }
// 6204           else if(uint_temp > d_array[tem_m])
??dlms_reset_data_596:
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOV       A, [SP+0x06]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array)  ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, [DE]           ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNC       ??dlms_reset_data_598  ;; 4 cycles
        ; ------------------------------------- Block: 16 cycles
// 6205           {
// 6206             if(((day_counter - UcharTemp) >= max_midnight_cnt) || (midnight_par_cnt < (day_counter - UcharTemp)))
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        MOV       H, #0x0            ;; 1 cycle
        MOVW      AX, N:_day_counter  ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        CMPW      AX, #0x4C          ;; 1 cycle
        BNC       ??dlms_reset_data_599  ;; 4 cycles
        ; ------------------------------------- Block: 10 cycles
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        MOV       H, #0x0            ;; 1 cycle
        MOVW      AX, N:_day_counter  ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOV       X, N:_midnight_par_cnt  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNC       ??dlms_reset_data_600  ;; 4 cycles
        ; ------------------------------------- Block: 13 cycles
// 6207             {
// 6208               midnight_par_cnt= 0;
??dlms_reset_data_599:
        MOV       N:_midnight_par_cnt, #0x0  ;; 1 cycle
        BR        S:??dlms_reset_data_601  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 6209             }
// 6210             else
// 6211             {
// 6212               midnight_par_cnt= midnight_par_cnt - (day_counter - UcharTemp) + 1;
??dlms_reset_data_600:
        MOVW      AX, N:_day_counter  ;; 1 cycle
        MOV       A, N:_midnight_par_cnt  ;; 1 cycle
        SUB       A, X               ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        ADD       A, X               ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       N:_midnight_par_cnt, A  ;; 1 cycle
        ; ------------------------------------- Block: 8 cycles
// 6213             }
// 6214             
// 6215             day_counter= UcharTemp + 1;
??dlms_reset_data_601:
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        MOVW      N:_day_counter, AX  ;; 1 cycle
// 6216             ls_fg_f= 1;
        MOV       N:_ls_fg_f, #0x1   ;; 1 cycle
// 6217             ls_rtc_fill= 1;
        MOV       N:_ls_rtc_fill, #0x1  ;; 1 cycle
// 6218             ls_rev_fill= 1;
        MOV       N:_ls_rev_fill, #0x1  ;; 1 cycle
        BR        S:??dlms_reset_data_597  ;; 3 cycles
        ; ------------------------------------- Block: 11 cycles
// 6219           }
// 6220           else
// 6221           {
// 6222             if(((day_counter - UcharTemp) >= max_midnight_cnt) || (midnight_par_cnt < (day_counter - UcharTemp)))
??dlms_reset_data_598:
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        MOV       H, #0x0            ;; 1 cycle
        MOVW      AX, N:_day_counter  ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        CMPW      AX, #0x4C          ;; 1 cycle
        BNC       ??dlms_reset_data_602  ;; 4 cycles
        ; ------------------------------------- Block: 10 cycles
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        MOV       H, #0x0            ;; 1 cycle
        MOVW      AX, N:_day_counter  ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOV       X, N:_midnight_par_cnt  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNC       ??dlms_reset_data_603  ;; 4 cycles
        ; ------------------------------------- Block: 13 cycles
// 6223             {
// 6224               midnight_par_cnt= 0;
??dlms_reset_data_602:
        MOV       N:_midnight_par_cnt, #0x0  ;; 1 cycle
        BR        S:??dlms_reset_data_604  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 6225             }
// 6226             else
// 6227             {
// 6228               midnight_par_cnt= (midnight_par_cnt - (day_counter - UcharTemp));
??dlms_reset_data_603:
        MOVW      AX, N:_day_counter  ;; 1 cycle
        MOV       A, N:_midnight_par_cnt  ;; 1 cycle
        SUB       A, X               ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        ADD       A, X               ;; 1 cycle
        MOV       N:_midnight_par_cnt, A  ;; 1 cycle
        ; ------------------------------------- Block: 7 cycles
// 6229             }
// 6230             
// 6231             day_counter= UcharTemp - 1;
??dlms_reset_data_604:
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        DECW      AX                 ;; 1 cycle
        MOVW      N:_day_counter, AX  ;; 1 cycle
        ; ------------------------------------- Block: 5 cycles
// 6232           }
// 6233           
// 6234           midnight_roll_f= 0;
??dlms_reset_data_597:
        MOV       N:_midnight_roll_f, #0x0  ;; 1 cycle
// 6235           no_midnight_f= 1;
        MOV       N:_no_midnight_f, #0x1  ;; 1 cycle
// 6236           eprom_read(DAILY_ENERGY_STATUS,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x6300        ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 6237           opr_data[0] = midnight_par_cnt;
        MOV       A, N:_midnight_par_cnt  ;; 1 cycle
        MOV       N:_opr_data, A     ;; 1 cycle
// 6238           opr_data[1]= midnight_roll_f;
        MOV       A, N:_midnight_roll_f  ;; 1 cycle
        MOV       N:_opr_data+1, A   ;; 1 cycle
// 6239           eprom_write(DAILY_ENERGY_STATUS,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x6300        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6240           rtc_set_flag= 1;
        SET1      N:_flag_rtc1.7     ;; 2 cycles
// 6241           
// 6242           if(lsro_flag == 0)
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        CMP0      N:_lsro_flag       ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_590  ;; 4 cycles
        ; ------------------------------------- Block: 30 cycles
// 6243           {
// 6244             for(us8 main1= day_counter + 1; main1 < max_day_counter; main1++)
        MOVW      DE, N:_day_counter  ;; 1 cycle
        INC       E                  ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??data_dec_34:
        MOV       A, E               ;; 1 cycle
        CMP       A, N:_max_day_counter  ;; 1 cycle
        BNC       ??dlms_reset_data_605  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6245             {
// 6246               d_array[main1]= 0;
        MOVW      AX, DE             ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array)  ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [HL], AX           ;; 1 cycle
// 6247             }
        INC       E                  ;; 1 cycle
        BR        S:??data_dec_34    ;; 3 cycles
        ; ------------------------------------- Block: 13 cycles
// 6248             
// 6249             temp_us16 =0x0D00;
??dlms_reset_data_605:
        MOVW      S:_temp_us16, #0xD00  ;; 1 cycle
// 6250             for(us8 index=0; index<26; index++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x0E], A       ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
??data_dec_35:
        MOV       A, [SP+0x0E]       ;; 1 cycle
        CMP       A, #0x1A           ;; 1 cycle
        BNC       ??dlms_reset_data_590  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6251             {
// 6252               for(us8 temp_day_counter=0; temp_day_counter<7; temp_day_counter++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x0D], A       ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??data_dec_36:
        MOV       A, [SP+0x0D]       ;; 1 cycle
        CMP       A, #0x7            ;; 1 cycle
        BNC       ??dlms_reset_data_606  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6253               {
// 6254                 int_into_char_array(d_array[temp_day_counter+7*index], &opr_data[temp_day_counter*2]);
        MOV       A, [SP+0x0D]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+38
        POP       HL                 ;; 1 cycle
          CFI CFA SP+36
        MOV       A, [SP+0x0E]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x7           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [SP+0x0D]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        MOVW      BC, #0x2           ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #LWRD(_d_array)  ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, [DE]           ;; 1 cycle
        PUSH      HL                 ;; 1 cycle
          CFI CFA SP+38
        POP       BC                 ;; 1 cycle
          CFI CFA SP+36
          CFI FunCall _int_into_char_array
        CALL      _int_into_char_array  ;; 3 cycles
// 6255               }
        MOV       A, [SP+0x0D]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x0D], A       ;; 1 cycle
        BR        S:??data_dec_36    ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 6256               Eprom_WriteWM(temp_us16,0,16);
??dlms_reset_data_606:
        MOV       B, #0x10           ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, S:_temp_us16   ;; 1 cycle
          CFI FunCall _Eprom_WriteWM
        CALL      _Eprom_WriteWM     ;; 3 cycles
// 6257               temp_us16+=0x10;
        MOVW      AX, S:_temp_us16   ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      S:_temp_us16, AX   ;; 1 cycle
// 6258             }
        MOV       A, [SP+0x0E]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x0E], A       ;; 1 cycle
        BR        S:??data_dec_35    ;; 3 cycles
        ; ------------------------------------- Block: 15 cycles
// 6259             
// 6260           }
// 6261         }
// 6262         
// 6263         if(1 == asso2_flag)
??dlms_reset_data_590:
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_607  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6264         {
// 6265           mem_log1(COMPART_TRANSACTION,EVENT_ID_RTC_SET);
        MOVW      BC, #0x97          ;; 1 cycle
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _mem_log1
        CALL      _mem_log1          ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 6266         }
// 6267         
// 6268         /* for reset MD********************* */
// 6269         long_into_char_array4(energy.Allph.active_imp,&opr_data[0]);
??dlms_reset_data_607:
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      BC, N:_energy+54   ;; 1 cycle
        MOVW      AX, N:_energy+52   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 6270         long_into_char_array4(energy.Allph.active_exp,&opr_data[4]);
        MOVW      DE, #LWRD(_opr_data+4)  ;; 1 cycle
        MOVW      BC, N:_energy+58   ;; 1 cycle
        MOVW      AX, N:_energy+56   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 6271         long_into_char_array4(energy.Allph.apparent_imp,&opr_data[8]);
        MOVW      DE, #LWRD(_opr_data+8)  ;; 1 cycle
        MOVW      BC, N:_energy+70   ;; 1 cycle
        MOVW      AX, N:_energy+68   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 6272         eprom_write(0x0800,0,192,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0xC0          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x800         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6273         eprom_write(0x0980,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+40
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x980         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6274         
// 6275         long_into_char_array4(energy.Allph.apparent_exp,&opr_data[0]);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      BC, N:_energy+74   ;; 1 cycle
        MOVW      AX, N:_energy+72   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 6276         eprom_write(0x08C0,0,192,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+42
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0xC0          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x8C0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6277         eprom_write(0x0990,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+44
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x990         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6278         
// 6279         long_into_char_array4(energy.Rph.active_imp,&opr_data[0]);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      BC, N:_energy+4    ;; 1 cycle
        MOVW      AX, N:_energy+2    ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 6280         long_into_char_array4(energy.Yph.active_imp,&opr_data[4]);
        MOVW      DE, #LWRD(_opr_data+4)  ;; 1 cycle
        MOVW      BC, N:_energy+18   ;; 1 cycle
        MOVW      AX, N:_energy+16   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 6281         long_into_char_array4(energy.Bph.active_imp,&opr_data[8]);
        MOVW      DE, #LWRD(_opr_data+8)  ;; 1 cycle
        MOVW      BC, N:_energy+32   ;; 1 cycle
        MOVW      AX, N:_energy+30   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 6282         eprom_write(0x0360,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+46
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x360         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6283         
// 6284         long_into_char_array4(energy.Rph.active_exp,&opr_data[0]);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      BC, N:_energy+8    ;; 1 cycle
        MOVW      AX, N:_energy+6    ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 6285         long_into_char_array4(energy.Yph.active_exp,&opr_data[4]);
        MOVW      DE, #LWRD(_opr_data+4)  ;; 1 cycle
        MOVW      BC, N:_energy+22   ;; 1 cycle
        MOVW      AX, N:_energy+20   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 6286         long_into_char_array4(energy.Bph.active_exp,&opr_data[8]);
        MOVW      DE, #LWRD(_opr_data+8)  ;; 1 cycle
        MOVW      BC, N:_energy+36   ;; 1 cycle
        MOVW      AX, N:_energy+34   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 6287         eprom_write(0x0370,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+48
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x370         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6288         
// 6289         long_into_char_array4(energy.Allph.defraud_mag,&opr_data[0]);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      BC, N:_energy+62   ;; 1 cycle
        MOVW      AX, N:_energy+60   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 6290         eprom_write(0x09C0,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+50
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x9C0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6291         
// 6292         long_into_char_array4(energy.Rph.defraud_mag,&opr_data[0]);
        MOVW      DE, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      BC, N:_energy+12   ;; 1 cycle
        MOVW      AX, N:_energy+10   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 6293         long_into_char_array4(energy.Yph.defraud_mag,&opr_data[4]);
        MOVW      DE, #LWRD(_opr_data+4)  ;; 1 cycle
        MOVW      BC, N:_energy+26   ;; 1 cycle
        MOVW      AX, N:_energy+24   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 6294         long_into_char_array4(energy.Bph.defraud_mag,&opr_data[8]);
        MOVW      DE, #LWRD(_opr_data+8)  ;; 1 cycle
        MOVW      BC, N:_energy+40   ;; 1 cycle
        MOVW      AX, N:_energy+38   ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 6295         eprom_write(0x09D0,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+52
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x9D0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6296         
// 6297         /* load survey*********************************** */
// 6298         load_survey_reset_avg_acc();
          CFI FunCall _load_survey_reset_avg_acc
        CALL      _load_survey_reset_avg_acc  ;; 3 cycles
// 6299           
// 6300         load_survey_fill_last_energy();
          CFI FunCall _load_survey_fill_last_energy
        CALL      _load_survey_fill_last_energy  ;; 3 cycles
// 6301       }
// 6302       else
// 6303       {
// 6304         conf_err(0x0d);
// 6305         return( 0);
// 6306       }
// 6307       
// 6308       break;
        ADDW      SP, #0x10          ;; 1 cycle
          CFI CFA SP+36
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 166 cycles
??dlms_reset_data_580:
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6309       
// 6310     case 0x000d0000:
// 6311       {                            
// 6312         if(attribute_id == 6)
??data_dec_37:
        CMP       N:_attribute_id, #0x6  ;; 1 cycle
        BNZ       ??dlms_reset_data_608  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6313         {
// 6314           if((info[16] != 0x09) || (info[17] == 0) || (info[17] > 14))
        CMP       N:_info+16, #0x9   ;; 1 cycle
        BNZ       ??dlms_reset_data_609  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_info+17         ;; 1 cycle
        BZ        ??dlms_reset_data_609  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOV       A, N:_info+17      ;; 1 cycle
        CMP       A, #0xF            ;; 1 cycle
        BC        ??dlms_reset_data_610  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6315           {
// 6316             conf_err(0x0C);
??dlms_reset_data_609:
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6317             return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6318           }
// 6319           
// 6320           fill_oprzero(16);
??dlms_reset_data_610:
        MOV       A, #0x10           ;; 1 cycle
          CFI FunCall _fill_oprzero
        CALL      _fill_oprzero      ;; 3 cycles
// 6321           for(m1= 0; m1 < (info[17] + 1); m1++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x08], A       ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
??data_dec_38:
        MOV       C, N:_info+17      ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        INCW      BC                 ;; 1 cycle
        MOV       A, [SP+0x08]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall ?SI_CMP_L02
        CALL      N:?SI_CMP_L02      ;; 3 cycles
        BNC       ??dlms_reset_data_611  ;; 4 cycles
        ; ------------------------------------- Block: 13 cycles
// 6322           {
// 6323             *(&opr_data[0] + m1)= info[17 + m1];
        MOV       A, [SP+0x08]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info+17)[B]   ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x08]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_opr_data)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 6324           }
        MOV       A, [SP+0x08]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x08], A       ;; 1 cycle
        BR        S:??data_dec_38    ;; 3 cycles
        ; ------------------------------------- Block: 15 cycles
// 6325           if(active_calendar == 0)
??dlms_reset_data_611:
        CMP0      N:_active_calendar  ;; 1 cycle
        BNZ       ??dlms_reset_data_612  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6326           {
// 6327             eprom_write(TOU_CAL_PASSIVE_ADD,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x1440        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 13 cycles
// 6328           }
// 6329           else
// 6330           {
// 6331             eprom_write(TOU_CAL_ACTIVE_ADD,0,16,PAGE_1,AUTO_CALC);
??dlms_reset_data_612:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x1400        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 13 cycles
// 6332           }
// 6333         }
// 6334         
// 6335         // ***********************************
// 6336         else if(attribute_id == 7)
??dlms_reset_data_608:
        CMP       N:_attribute_id, #0x7  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_613  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6337         {
// 6338           if((info[k] != 0x01)   || (info[k+1] >  0x02) || (info[k+1] == 0x00))
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_614  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP       A, #0x3            ;; 1 cycle
        BNC       ??dlms_reset_data_614  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_615  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 6339           {
// 6340             conf_err(0x0C);
??dlms_reset_data_614:
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6341             return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6342           }
// 6343           
// 6344           for(lu8_i=0; lu8_i<2;  lu8_i++)
??dlms_reset_data_615:
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??data_dec_39:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_616  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6345           {
// 6346             lu8_j=(lu8_i*34);
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, #0x22           ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
// 6347             
// 6348             if((info[k+2+lu8_j] != 0x02) || (info[k+3+lu8_j] != 0x03) 
// 6349                || (info[k+4+lu8_j] != 0x09) || (info[k+5+lu8_j] != 0x07) 
// 6350                  || (info[k+13+lu8_j]!= 0x09) || (info[k+14+lu8_j]!= 0x0C))
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, N:_k           ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+2)[BC]   ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BNZ       ??dlms_reset_data_617  ;; 4 cycles
        ; ------------------------------------- Block: 16 cycles
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, N:_k           ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+3)[BC]   ;; 1 cycle
        CMP       A, #0x3            ;; 1 cycle
        BNZ       ??dlms_reset_data_617  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, N:_k           ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+4)[BC]   ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BNZ       ??dlms_reset_data_617  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, N:_k           ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+5)[BC]   ;; 1 cycle
        CMP       A, #0x7            ;; 1 cycle
        BNZ       ??dlms_reset_data_617  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, N:_k           ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+13)[BC]  ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BNZ       ??dlms_reset_data_617  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, N:_k           ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+14)[BC]  ;; 1 cycle
        CMP       A, #0xC            ;; 1 cycle
        BZ        ??dlms_reset_data_618  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
// 6351             {
// 6352               conf_err(0x0C);
??dlms_reset_data_617:
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6353               return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6354             }
// 6355             
// 6356             uint_temp=isdatevalid(info[k+17+lu8_j], info[k+18+lu8_j],  bcd_to_hex(present_year)+0x07D0);
??dlms_reset_data_618:
        MOV       A, N:_Now+6        ;; 1 cycle
          CFI FunCall _bcd_to_hex
        CALL      _bcd_to_hex        ;; 3 cycles
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, #0x7D0         ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, N:_k           ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+18)[BC]  ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+38
        POP       HL                 ;; 1 cycle
          CFI CFA SP+36
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, N:_k           ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+17)[BC]  ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        PUSH      HL                 ;; 1 cycle
          CFI CFA SP+38
        POP       BC                 ;; 1 cycle
          CFI CFA SP+36
          CFI FunCall _isdatevalid
        CALL      _isdatevalid       ;; 3 cycles
        MOVW      [SP+0x04], AX      ;; 1 cycle
// 6357             
// 6358             if((0==uint_temp) || ((info[k+20+lu8_j]>23)&&(info[k+20+lu8_j]!=0xff)) || ((info[k+21+lu8_j]>59)&&(info[k+21+lu8_j]!=0xff)))
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        BZ        ??dlms_reset_data_619  ;; 4 cycles
        ; ------------------------------------- Block: 38 cycles
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, N:_k           ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+20)[BC]  ;; 1 cycle
        CMP       A, #0x18           ;; 1 cycle
        BC        ??dlms_reset_data_620  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, N:_k           ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+20)[BC]  ;; 1 cycle
        INC       A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_619  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
??dlms_reset_data_620:
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, N:_k           ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+21)[BC]  ;; 1 cycle
        CMP       A, #0x3C           ;; 1 cycle
        BC        ??dlms_reset_data_621  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, N:_k           ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+21)[BC]  ;; 1 cycle
        INC       A                  ;; 1 cycle
        BZ        ??dlms_reset_data_621  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
// 6359             {
// 6360               conf_err(250);
??dlms_reset_data_619:
        MOV       A, #0xFA           ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6361               return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6362             }
// 6363             
// 6364             if((info[k+27+lu8_j] != 0x09) || (info[k+28+lu8_j] != 0x07))
??dlms_reset_data_621:
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, N:_k           ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+27)[BC]  ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BNZ       ??dlms_reset_data_622  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, N:_k           ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info+28)[BC]  ;; 1 cycle
        CMP       A, #0x7            ;; 1 cycle
        BZ        ??dlms_reset_data_623  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
// 6365             {
// 6366               conf_err(0x0C);
??dlms_reset_data_622:
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6367               return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6368             }
// 6369             
// 6370             if(info[k+1]!=2)
??dlms_reset_data_623:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BZ        ??dlms_reset_data_624  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 6371             {
// 6372               lu8_i++;
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 6373             }
// 6374           }
??dlms_reset_data_624:
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        N:??data_dec_39    ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 6375           
// 6376           if(0==active_calendar)
??dlms_reset_data_616:
        CMP0      N:_active_calendar  ;; 1 cycle
        BNZ       ??dlms_reset_data_625  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6377           {
// 6378             lu16_addr=TOU_CAL_PASSIVE_ADD+0x10;
        MOVW      AX, #0x1450        ;; 1 cycle
        MOVW      [SP+0x0A], AX      ;; 1 cycle
        BR        S:??dlms_reset_data_626  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 6379           }
// 6380           else
// 6381           {
// 6382             lu16_addr=TOU_CAL_ACTIVE_ADD+0x10; 
??dlms_reset_data_625:
        MOVW      AX, #0x1410        ;; 1 cycle
        MOVW      [SP+0x0A], AX      ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 6383           }
// 6384           
// 6385           fill_oprzero(16);
??dlms_reset_data_626:
        MOV       A, #0x10           ;; 1 cycle
          CFI FunCall _fill_oprzero
        CALL      _fill_oprzero      ;; 3 cycles
// 6386           
// 6387           opr_data[0]=info[k+1];                //no. of seasons
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        MOV       N:_opr_data, A     ;; 1 cycle
// 6388           memcpy(&opr_data[1],&info[k+6],7);
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #LWRD(_info+6)  ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      HL, #LWRD(_opr_data+1)  ;; 1 cycle
        MOV       B, #0x7            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
// 6389           if(info[k+1]==2)
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BNZ       ??dlms_reset_data_627  ;; 4 cycles
        ; ------------------------------------- Block: 22 cycles
// 6390           {
// 6391             memcpy(&opr_data[8],&info[k+40],7);
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #LWRD(_info+40)  ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      HL, #LWRD(_opr_data+8)  ;; 1 cycle
        MOV       B, #0x7            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6392           }
// 6393           eprom_write(lu16_addr,0,16,PAGE_1,AUTO_CALC); //page-1
??dlms_reset_data_627:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x0C]      ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6394           
// 6395           fill_oprzero(16);
        MOV       A, #0x10           ;; 1 cycle
          CFI FunCall _fill_oprzero
        CALL      _fill_oprzero      ;; 3 cycles
// 6396           uint_temp = ((uint16_t)info[k+15]*256+info[k+16]) - 0x07D0;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+15)[BC]  ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      HL, AX             ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+16)[BC]  ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       D, #0x0            ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        ADDW      AX, #0xF830        ;; 1 cycle
        MOVW      [SP+0x06], AX      ;; 1 cycle
// 6397           opr_data[0]=0xff;                                            
        MOV       N:_opr_data, #0xFF  ;; 1 cycle
// 6398           opr_data[1]=0xff;                                            
        MOV       N:_opr_data+1, #0xFF  ;; 1 cycle
// 6399           opr_data[2]=0xff;                                            
        MOV       N:_opr_data+2, #0xFF  ;; 1 cycle
// 6400           if(info[k+1]==2)
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        CMP       A, #0x2            ;; 1 cycle
        BNZ       ??dlms_reset_data_628  ;; 4 cycles
        ; ------------------------------------- Block: 40 cycles
// 6401           {
// 6402             opr_data[3]=hex_to_bcd(info[k+17]);  //month
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+17)[BC]  ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       N:_opr_data+3, A   ;; 1 cycle
// 6403             opr_data[4]=hex_to_bcd(info[k+18]);  //date
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+18)[BC]  ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       N:_opr_data+4, A   ;; 1 cycle
// 6404             uint_temp = ((uint16_t)info[k+49]*256+info[k+50]) - 0x07D0;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+49)[BC]  ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      HL, AX             ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+50)[BC]  ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       D, #0x0            ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        ADDW      AX, #0xF830        ;; 1 cycle
        MOVW      [SP+0x04], AX      ;; 1 cycle
// 6405             opr_data[5]=0xff;                                          
        MOV       N:_opr_data+5, #0xFF  ;; 1 cycle
// 6406             opr_data[6]=0xff;                                          
        MOV       N:_opr_data+6, #0xFF  ;; 1 cycle
// 6407             opr_data[7]=0xff;                                          
        MOV       N:_opr_data+7, #0xFF  ;; 1 cycle
// 6408             opr_data[8]=hex_to_bcd(info[k+51]);  //month
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+51)[BC]  ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       N:_opr_data+8, A   ;; 1 cycle
// 6409             opr_data[9]=hex_to_bcd(info[k+52]);  //date		
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+52)[BC]  ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       N:_opr_data+9, A   ;; 1 cycle
        BR        S:??dlms_reset_data_629  ;; 3 cycles
        ; ------------------------------------- Block: 46 cycles
// 6410           }
// 6411           else
// 6412           {
// 6413             opr_data[3]=0xff;
??dlms_reset_data_628:
        MOV       N:_opr_data+3, #0xFF  ;; 1 cycle
// 6414             opr_data[4]=0xff;
        MOV       N:_opr_data+4, #0xFF  ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 6415           }
// 6416           
// 6417           lu16_addr+=0x10; //page-2
??dlms_reset_data_629:
        MOVW      AX, [SP+0x0A]      ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      [SP+0x0A], AX      ;; 1 cycle
// 6418           eprom_write(lu16_addr,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x0C]      ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6419           
// 6420           fill_oprzero(16);
        MOV       A, #0x10           ;; 1 cycle
          CFI FunCall _fill_oprzero
        CALL      _fill_oprzero      ;; 3 cycles
// 6421           memcpy(&opr_data[0],&info[k+29],7);
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #LWRD(_info+29)  ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      HL, #LWRD(_opr_data)  ;; 1 cycle
        MOV       B, #0x7            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
// 6422           
// 6423           if(info[k+1]==2)
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        CMP       A, #0x2            ;; 1 cycle
        BNZ       ??dlms_reset_data_630  ;; 4 cycles
        ; ------------------------------------- Block: 32 cycles
// 6424           {
// 6425             memcpy(&opr_data[7],&info[k+63],7);
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #LWRD(_info+63)  ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      HL, #LWRD(_opr_data+7)  ;; 1 cycle
        MOV       B, #0x7            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6426           }
// 6427           
// 6428           lu16_addr+=0x10; //page-3
??dlms_reset_data_630:
        MOVW      AX, [SP+0x0A]      ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      [SP+0x0A], AX      ;; 1 cycle
// 6429           eprom_write(lu16_addr,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x0C]      ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 16 cycles
// 6430         }
// 6431         
// 6432         
// 6433         // ****************************** 
// 6434         else if(attribute_id == 8)               //week profile
??dlms_reset_data_613:
        CMP       N:_attribute_id, #0x8  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_631  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6435         {
// 6436           if ((info[k] != 0x01) || (info[k+1] > 2)     || (info[k+2] != 0x02) 
// 6437               ||(info[k+3] != 0x08) || (info[k+4] != 0x09) || (info[k+5] != 0x07))
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_632  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP       A, #0x3            ;; 1 cycle
        BNC       ??dlms_reset_data_632  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+2)[BC]   ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BNZ       ??dlms_reset_data_632  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+3)[BC]   ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNZ       ??dlms_reset_data_632  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+4)[BC]   ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BNZ       ??dlms_reset_data_632  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+5)[BC]   ;; 1 cycle
        CMP       A, #0x7            ;; 1 cycle
        BZ        ??dlms_reset_data_633  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 6438           {
// 6439             conf_err(0x0C);
??dlms_reset_data_632:
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6440             return 0;
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6441           }
// 6442           
// 6443           if(0==active_calendar)
??dlms_reset_data_633:
        CMP0      N:_active_calendar  ;; 1 cycle
        BNZ       ??dlms_reset_data_634  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6444           {
// 6445             lu16_addr=TOU_WEEK_ACTIVE_ADD+0x40;
        MOVW      AX, #0x14C0        ;; 1 cycle
        MOVW      [SP+0x0A], AX      ;; 1 cycle
        BR        S:??dlms_reset_data_635  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 6446           }
// 6447           else
// 6448           {
// 6449             lu16_addr=TOU_WEEK_ACTIVE_ADD;
??dlms_reset_data_634:
        MOVW      AX, #0x1480        ;; 1 cycle
        MOVW      [SP+0x0A], AX      ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 6450           }
// 6451           
// 6452           fill_oprzero(16);
??dlms_reset_data_635:
        MOV       A, #0x10           ;; 1 cycle
          CFI FunCall _fill_oprzero
        CALL      _fill_oprzero      ;; 3 cycles
// 6453           
// 6454           week_profile=info[k+1];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        MOV       [SP+0x10], A       ;; 1 cycle
// 6455           
// 6456           k+=6;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x6           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 6457           for(lu8_i=0;  lu8_i<week_profile; lu8_i++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 12 cycles
??data_dec_40:
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x10]       ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_457  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 6458           {
// 6459             memcpy(&opr_data[0],&info[k],7);
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #LWRD(_info)   ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      HL, #LWRD(_opr_data)  ;; 1 cycle
        MOV       B, #0x7            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
// 6460             
// 6461             opr_data[14]=week_profile;
        MOV       A, [SP+0x10]       ;; 1 cycle
        MOV       N:_opr_data+14, A  ;; 1 cycle
// 6462             eprom_write(lu16_addr,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x0C]      ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6463             
// 6464             fill_oprzero(16);
        MOV       A, #0x10           ;; 1 cycle
          CFI FunCall _fill_oprzero
        CALL      _fill_oprzero      ;; 3 cycles
// 6465             lu8_k=k+8;
        MOVW      AX, N:_k           ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       A, #0x8            ;; 1 cycle
        MOV       [SP+0x11], A       ;; 1 cycle
// 6466             
// 6467             for(lu8_j=0; lu8_j<7; lu8_k+=2,lu8_j++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x04], A       ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        ; ------------------------------------- Block: 30 cycles
??data_dec_41:
        MOV       A, [SP+0x02]       ;; 1 cycle
        CMP       A, #0x7            ;; 1 cycle
        BNC       ??dlms_reset_data_636  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6468             {
// 6469               *(&opr_data[0]+lu8_j)=info[lu8_k];
        MOV       A, [SP+0x0F]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_info)[B]      ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_opr_data)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 6470             }
        MOV       A, [SP+0x0F]       ;; 1 cycle
        ADD       A, #0x2            ;; 1 cycle
        MOV       [SP+0x0F], A       ;; 1 cycle
        MOV       A, [SP+0x02]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
        BR        S:??data_dec_41    ;; 3 cycles
        ; ------------------------------------- Block: 18 cycles
// 6471             
// 6472             lu16_addr+=0x10;
??dlms_reset_data_636:
        MOVW      AX, [SP+0x0A]      ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      [SP+0x0A], AX      ;; 1 cycle
// 6473             eprom_write(lu16_addr,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x0C]      ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6474             fill_oprzero(16);
        MOV       A, #0x10           ;; 1 cycle
          CFI FunCall _fill_oprzero
        CALL      _fill_oprzero      ;; 3 cycles
// 6475             lu16_addr+=0x10;
        MOVW      AX, [SP+0x0C]      ;; 1 cycle
        ADDW      AX, #0x10          ;; 1 cycle
        MOVW      [SP+0x0C], AX      ;; 1 cycle
// 6476             k+=25;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x19          ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 6477           }  
        MOV       A, [SP+0x02]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x02], A       ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        BR        N:??data_dec_40    ;; 3 cycles
        ; ------------------------------------- Block: 29 cycles
// 6478         }
// 6479         
// 6480         //******************************************************************************************************************************************
// 6481         else if(attribute_id == 9)
??dlms_reset_data_631:
        CMP       N:_attribute_id, #0x9  ;; 1 cycle
        BNZ       ??dlms_reset_data_637  ;; 4 cycles
          CFI FunCall _tou_pssv_store
        ; ------------------------------------- Block: 5 cycles
// 6482         {
// 6483           m1= tou_pssv_store();
        CALL      _tou_pssv_store    ;; 3 cycles
        MOV       [SP+0x08], A       ;; 1 cycle
// 6484           if(last_block == 1)
        CMP       N:_last_block, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_638  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 6485           {
// 6486             mem_log1(COMPART_TRANSACTION,155);
        MOVW      BC, #0x9B          ;; 1 cycle
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _mem_log1
        CALL      _mem_log1          ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 6487           }
// 6488           
// 6489           if(m1 == 0)
??dlms_reset_data_638:
        MOV       A, [SP+0x08]       ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_639  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6490             return 0;
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 6491           else if(m1 == 2)
??dlms_reset_data_639:
        MOV       A, [SP+0x08]       ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BNZ       ??dlms_reset_data_640  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6492             return 2;
        MOV       A, #0x2            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 6493           else
// 6494           {
// 6495             mem_log1(COMPART_TRANSACTION,155);
??dlms_reset_data_640:
        MOVW      BC, #0x9B          ;; 1 cycle
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _mem_log1
        CALL      _mem_log1          ;; 3 cycles
// 6496             return (1);
        MOV       A, #0x1            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 6497           }
// 6498         }
// 6499         else if(attribute_id == 10)
??dlms_reset_data_637:
        CMP       N:_attribute_id, #0xA  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_641  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6500         {
// 6501           
// 6502           if(info[k] != 0x09 || info[k + 1] != 0x0C)
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BNZ       ??dlms_reset_data_642  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP       A, #0xC            ;; 1 cycle
        BZ        ??dlms_reset_data_643  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 6503           {
// 6504             conf_err(0x0C);
??dlms_reset_data_642:
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6505             return 0;
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6506           }
// 6507           
// 6508           k++;
??dlms_reset_data_643:
        INCW      N:_k               ;; 2 cycles
// 6509           
// 6510           k++;
        INCW      N:_k               ;; 2 cycles
// 6511           
// 6512           u16tem_yy= (unsigned int)info[k] * 256 + info[k + 1];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      HL, AX             ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       D, #0x0            ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        MOVW      [SP+0x16], AX      ;; 1 cycle
// 6513           
// 6514           u8tem_mm= info[k + 2];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+2)[BC]   ;; 1 cycle
        MOV       [SP+0x12], A       ;; 1 cycle
// 6515           
// 6516           u8tem_dd= info[k + 3];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+3)[BC]   ;; 1 cycle
        MOV       [SP+0x11], A       ;; 1 cycle
// 6517           
// 6518           uint_temp= isdatevalid(u8tem_mm, u8tem_dd, u16tem_yy);
        MOVW      AX, [SP+0x16]      ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [SP+0x11]       ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       A, [SP+0x12]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _isdatevalid
        CALL      _isdatevalid       ;; 3 cycles
        MOVW      [SP+0x04], AX      ;; 1 cycle
// 6519           u8tem_h= info[k + 5];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+5)[BC]   ;; 1 cycle
        MOV       [SP+0x14], A       ;; 1 cycle
// 6520           u8tem_m= info[k + 6];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+6)[BC]   ;; 1 cycle
        MOV       [SP+0x15], A       ;; 1 cycle
// 6521           u8tem_s= info[k + 7];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+7)[BC]   ;; 1 cycle
        MOV       [SP+0x13], A       ;; 1 cycle
// 6522           
// 6523           if((uint_temp == 0) || (u8tem_h > 23) || (u8tem_m > 59) || (u8tem_s > 59))
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        CMPW      AX, #0x0           ;; 1 cycle
        BZ        ??dlms_reset_data_644  ;; 4 cycles
        ; ------------------------------------- Block: 52 cycles
        MOV       A, [SP+0x14]       ;; 1 cycle
        CMP       A, #0x18           ;; 1 cycle
        BNC       ??dlms_reset_data_644  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x15]       ;; 1 cycle
        CMP       A, #0x3C           ;; 1 cycle
        BNC       ??dlms_reset_data_644  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x13]       ;; 1 cycle
        CMP       A, #0x3C           ;; 1 cycle
        BC        ??dlms_reset_data_645  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6524           {
// 6525             conf_err(250);
??dlms_reset_data_644:
        MOV       A, #0xFA           ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6526             return 0;
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6527           }
// 6528           fill_oprzero(16);
??dlms_reset_data_645:
        MOV       A, #0x10           ;; 1 cycle
          CFI FunCall _fill_oprzero
        CALL      _fill_oprzero      ;; 3 cycles
// 6529           UcharTemp= info[k++];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 6530           uint_temp= (unsigned int)UcharTemp * 256;
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      HL, AX             ;; 1 cycle
// 6531           uint_temp= uint_temp + info[k++] - 0x07D0;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, #0xF830        ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOVW      AX, HL             ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        MOVW      [SP+0x04], AX      ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 6532           UcharTemp= (unsigned char)(uint_temp % 256);
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
// 6533           opr_data[0]= hex_to_bcd(UcharTemp); //yr
        MOV       A, [SP+0x01]       ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       N:_opr_data, A     ;; 1 cycle
// 6534           
// 6535           UcharTemp= info[k++];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 6536           opr_data[1]= hex_to_bcd(UcharTemp); ////month
        MOV       A, [SP+0x01]       ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       N:_opr_data+1, A   ;; 1 cycle
// 6537           UcharTemp= info[k++];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 6538           opr_data[2]= hex_to_bcd(UcharTemp); ////day
        MOV       A, [SP+0x01]       ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       N:_opr_data+2, A   ;; 1 cycle
// 6539           
// 6540           k++;
        INCW      N:_k               ;; 2 cycles
// 6541           UcharTemp= info[k++];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 6542           opr_data[3]= hex_to_bcd(UcharTemp); ////hour
        MOV       A, [SP+0x01]       ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       N:_opr_data+3, A   ;; 1 cycle
// 6543           UcharTemp= info[k++];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 6544           opr_data[4]= hex_to_bcd(UcharTemp); ////min
        MOV       A, [SP+0x01]       ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       N:_opr_data+4, A   ;; 1 cycle
// 6545           
// 6546           for(i_data= 5; i_data < 15; i_data++)
        MOV       A, #0x5            ;; 1 cycle
        MOV       [SP+0x07], A       ;; 1 cycle
        ; ------------------------------------- Block: 79 cycles
??data_dec_42:
        MOV       A, [SP+0x07]       ;; 1 cycle
        CMP       A, #0xF            ;; 1 cycle
        BNC       ??dlms_reset_data_646  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6547             opr_data[i_data]= 0;
        MOV       A, [SP+0x07]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_opr_data)[B], A  ;; 1 cycle
        MOV       A, [SP+0x07]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x07], A       ;; 1 cycle
        BR        S:??data_dec_42    ;; 3 cycles
        ; ------------------------------------- Block: 10 cycles
// 6548           
// 6549           eprom_write(TOU_PassiveApliDate,0,16,PAGE_1,AUTO_CALC);
??dlms_reset_data_646:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x15C0        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6550           
// 6551           fill_oprzero(16);
        MOV       A, #0x10           ;; 1 cycle
          CFI FunCall _fill_oprzero
        CALL      _fill_oprzero      ;; 3 cycles
// 6552           calendar_change_f= 1;
        MOV       N:_calendar_change_f, #0x1  ;; 1 cycle
// 6553           
// 6554           opr_data[0]= calendar_change_f;
        MOV       A, N:_calendar_change_f  ;; 1 cycle
        MOV       N:_opr_data, A     ;; 1 cycle
// 6555           
// 6556           fill_ff(1);
        MOV       A, #0x1            ;; 1 cycle
          CFI FunCall _fill_ff
        CALL      _fill_ff           ;; 3 cycles
// 6557           
// 6558           eprom_write(TOU_CheckPassiveApli,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+40
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x15D0        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6559           
// 6560           check_active_calendar();
          CFI FunCall _check_active_calendar
        CALL      _check_active_calendar  ;; 3 cycles
// 6561           if(active_f != active_calendar)
        MOV       A, N:_active_f     ;; 1 cycle
        ADDW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+36
        CMP       A, N:_active_calendar  ;; 1 cycle
        BZ        ??dlms_reset_data_647  ;; 4 cycles
          CFI FunCall _deter_season
        ; ------------------------------------- Block: 39 cycles
// 6562           {
// 6563             deter_season();
        CALL      _deter_season      ;; 3 cycles
// 6564             zone_change_f= 0; //zonecng_f0=0;
        MOV       N:_zone_change_f, #0x0  ;; 1 cycle
// 6565             save_tod_data();
          CFI FunCall _save_tod_data
        CALL      _save_tod_data     ;; 3 cycles
// 6566             load_tod_data();
          CFI FunCall _load_tod_data
        CALL      _load_tod_data     ;; 3 cycles
// 6567             mri_bill_flag=1;
        MOVW      AX, #0x1           ;; 1 cycle
        MOVW      N:_mri_bill_flag, AX  ;; 1 cycle
// 6568             save_bill_data();
          CFI FunCall _save_bill_data
        CALL      _save_bill_data    ;; 3 cycles
// 6569             mri_bill_flag=0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_mri_bill_flag, AX  ;; 1 cycle
        ; ------------------------------------- Block: 17 cycles
// 6570             
// 6571           }
// 6572           
// 6573           mem_log1(COMPART_TRANSACTION,155);
??dlms_reset_data_647:
        MOVW      BC, #0x9B          ;; 1 cycle
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _mem_log1
        CALL      _mem_log1          ;; 3 cycles
        BR        S:??dlms_reset_data_648  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6574         }
// 6575         else
// 6576         {
// 6577           conf_err(0x0b);
??dlms_reset_data_641:
        MOV       A, #0xB            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6578           return( 0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6579         }
// 6580       }
// 6581       break;
??dlms_reset_data_648:
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 6582       
// 6583     case 0x000f0000:          /* Regular/Irragular Billing Date  (0,0,15,0,0,255) */
// 6584       if(attribute_id == 4) /* billing date */
??data_dec_43:
        CMP       N:_attribute_id, #0x4  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_649  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6585       {
// 6586         if((info[k] != 0x01)    || (info[k + 1] != 0x01) || (info[k + 2] != 0x02)  || (info[k + 3] != 0x02)
// 6587            ||(info[k + 4] != 0x09) || (info[k + 5] != 0x04) || (info[k + 10] != 0x09) || (info[k + 11] != 0x05))
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_650  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_650  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+2)[BC]   ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BNZ       ??dlms_reset_data_650  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+3)[BC]   ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BNZ       ??dlms_reset_data_650  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+4)[BC]   ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BNZ       ??dlms_reset_data_650  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+5)[BC]   ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        BNZ       ??dlms_reset_data_650  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+10)[BC]  ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BNZ       ??dlms_reset_data_650  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+11)[BC]  ;; 1 cycle
        CMP       A, #0x5            ;; 1 cycle
        BZ        ??dlms_reset_data_651  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 6588         {
// 6589           conf_err(0x0C);
??dlms_reset_data_650:
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6590           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6591         }
// 6592         
// 6593         
// 6594         if((info[k + 6] > 23) || (info[k + 7] > 59)
// 6595            ||(info[k + 15] > 31) || ((info[k + 15] == 0) && (asso2_flag != 0)))
??dlms_reset_data_651:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+6)[BC]   ;; 1 cycle
        CMP       A, #0x18           ;; 1 cycle
        BNC       ??dlms_reset_data_652  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+7)[BC]   ;; 1 cycle
        CMP       A, #0x3C           ;; 1 cycle
        BNC       ??dlms_reset_data_652  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+15)[BC]  ;; 1 cycle
        CMP       A, #0x20           ;; 1 cycle
        BNC       ??dlms_reset_data_652  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+15)[BC]  ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_653  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        CMP0      N:_asso2_flag      ;; 1 cycle
        BZ        ??dlms_reset_data_653  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6596         {
// 6597           conf_err(250);
??dlms_reset_data_652:
        MOV       A, #0xFA           ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6598           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6599         }
// 6600         
// 6601         
// 6602         bill_hr= hex_to_bcd(info[k + 6]);
??dlms_reset_data_653:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+6)[BC]   ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       N:_bill_hr, A      ;; 1 cycle
// 6603         bill_min= hex_to_bcd(info[k + 7]);
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+7)[BC]   ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       N:_bill_min, A     ;; 1 cycle
// 6604         
// 6605         bill_date= hex_to_bcd(info[k + 15]);
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+15)[BC]  ;; 1 cycle
          CFI FunCall _hex_to_bcd
        CALL      _hex_to_bcd        ;; 3 cycles
        MOV       N:_bill_date, A    ;; 1 cycle
// 6606         temp_bill_date=bill_date;
        MOV       A, N:_bill_date    ;; 1 cycle
        MOV       N:_temp_bill_date, A  ;; 1 cycle
// 6607         
// 6608         eprom_read(0x07F0, 0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x7F0         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 6609         
// 6610         opr_data[2]= bill_date; 
        MOV       A, N:_bill_date    ;; 1 cycle
        MOV       N:_opr_data+2, A   ;; 1 cycle
// 6611         opr_data[4]= bill_hr;   
        MOV       A, N:_bill_hr      ;; 1 cycle
        MOV       N:_opr_data+4, A   ;; 1 cycle
// 6612         opr_data[3]= bill_min;  
        MOV       A, N:_bill_min     ;; 1 cycle
        MOV       N:_opr_data+3, A   ;; 1 cycle
// 6613         opr_data[5]=temp_bill_date;
        MOV       A, N:_temp_bill_date  ;; 1 cycle
        MOV       N:_opr_data+5, A   ;; 1 cycle
// 6614         
// 6615         eprom_write(0x07F0,0,16,PAGE_1,AUTO_CALC);               
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x7F0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6616         
// 6617         GetNextDate(present_min, present_hr, present_date, present_month, present_year, bill_min, bill_hr, bill_date, 0);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+40
        MOV       A, N:_bill_date    ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+42
        XCH       A, X               ;; 1 cycle
        MOV       A, N:_bill_hr      ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+44
        XCH       A, X               ;; 1 cycle
        MOV       A, N:_bill_min     ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_Now+6        ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_Now+5        ;; 1 cycle
        MOV       C, N:_Now+3        ;; 1 cycle
        MOV       X, N:_Now+2        ;; 1 cycle
        MOV       A, N:_Now+1        ;; 1 cycle
          CFI FunCall _GetNextDate
        CALL      _GetNextDate       ;; 3 cycles
// 6618         mem_log1(COMPART_TRANSACTION,154);
        MOVW      BC, #0x9A          ;; 1 cycle
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _mem_log1
        CALL      _mem_log1          ;; 3 cycles
// 6619       }
// 6620       else
// 6621       {
// 6622         conf_err(0x0b);
// 6623         return (0);
// 6624       }
// 6625       
// 6626       break;
        ADDW      SP, #0x8           ;; 1 cycle
          CFI CFA SP+36
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 74 cycles
??dlms_reset_data_649:
        MOV       A, #0xB            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6627       
// 6628       /*         case 0x00160000: // meter address required to be use in case of RS485 comm.//
// 6629       if(attribute_id==9)
// 6630       {
// 6631       if(info[k]!=0x12) 
// 6632       {
// 6633       conf_err(0x0C);
// 6634       return( 0);
// 6635     } 
// 6636       
// 6637       k++;
// 6638       eprom_read(0x0FC0,0,PAGE_1,AUTO_CALC);
// 6639       opr_data[2]=info[k];
// 6640       opr_data[3]=info[k+1];
// 6641       uint_temp=(uint16_t)opr_data[2]*256+opr_data[3];
// 6642       if((uint_temp>0x000f)&&(uint_temp<0x3fff))
// 6643       {
// 6644       meter_address=uint_temp;
// 6645       eprom_write(0x0FC0,0,16,PAGE_1,AUTO_CALC);
// 6646       event_counter++;
// 6647       log_event(156);
// 6648     }
// 6649       else
// 6650       {
// 6651       conf_err(0x0C);
// 6652       return( 0);
// 6653     }
// 6654     }
// 6655       
// 6656       break;*/
// 6657       
// 6658     case 0x00280002:
// 6659       if(attribute_id == 7)
??data_dec_44:
        CMP       N:_attribute_id, #0x7  ;; 1 cycle
        BNZ       ??dlms_reset_data_654  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6660       {
// 6661         if((info[k] != 0x09) || (info[k + 1] != 0x08)) /* if9 */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BNZ       ??dlms_reset_data_655  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BZ        ??dlms_reset_data_656  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 6662         {
// 6663           conf_err(0x0C);
??dlms_reset_data_655:
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6664           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6665         } /* if9 */
// 6666         
// 6667         k++;
??dlms_reset_data_656:
        INCW      N:_k               ;; 2 cycles
// 6668         k++;
        INCW      N:_k               ;; 2 cycles
// 6669         for(lu8_i=0;  lu8_i<8;  lu8_i++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
??data_dec_45:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNC       ??dlms_reset_data_657  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6670         {
// 6671           aut_pswd[lu8_i]=info[k++];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_aut_pswd)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 6672           *(&opr_data[0]+lu8_i)=aut_pswd[lu8_i];
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_aut_pswd)[B]  ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_opr_data)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 6673         }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??data_dec_45    ;; 3 cycles
        ; ------------------------------------- Block: 25 cycles
// 6674         eprom_write(0x0150,0,16,PAGE_1,AUTO_CALC);
??dlms_reset_data_657:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x150         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        ; ------------------------------------- Block: 10 cycles
// 6675       }
// 6676       
// 6677       break;
??dlms_reset_data_654:
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 6678     case 0x0160803C://Calibration enable and reset(1.0.96.128.60.255)
// 6679       if(class_id == 0x01 && attribute_id == 0x02)
??data_dec_46:
        ONEW      AX                 ;; 1 cycle
        CMPW      AX, N:_class_id    ;; 1 cycle
        BNZ       ??dlms_reset_data_658  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_658  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6680       {        
// 6681         if(asso3_flag == 1)
        CMP       N:_asso3_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_659  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6682         {
// 6683           if((info[k]!=0x11)||(info[k+1]!=1))
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x11           ;; 1 cycle
        BNZ       ??dlms_reset_data_660  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BZ        ??dlms_reset_data_661  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 6684           {
// 6685             conf_err(0x0C);
??dlms_reset_data_660:
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6686             return 0;
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
          CFI FunCall _calibration_reset
        ; ------------------------------------- Block: 8 cycles
// 6687           }
// 6688           if(calibration_reset() == 0)
??dlms_reset_data_661:
        CALL      _calibration_reset  ;; 3 cycles
        CMP0      A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_662  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 6689           {
// 6690             conf_err(0x0C);
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6691             return 0;
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6692           }
// 6693         }
// 6694         else
// 6695         {
// 6696           conf_err(0x0D);
// 6697           return 0;
// 6698         } 
// 6699       }
// 6700       else
// 6701       {
// 6702         conf_err(0x0B);
// 6703         return 0;
// 6704       }
// 6705       break;
??dlms_reset_data_662:
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
??dlms_reset_data_659:
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
??dlms_reset_data_658:
        MOV       A, #0xB            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6706     case 0x0160803E:                                  //instant Eprom testing
// 6707       if(asso3_flag == 1 && class_id == 0x01 && attribute_id == 0x02 && 0==fg_done_f)
??data_dec_47:
        CMP       N:_asso3_flag, #0x1  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_663  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        ONEW      AX                 ;; 1 cycle
        CMPW      AX, N:_class_id    ;; 1 cycle
        BNZ       ??dlms_reset_data_663  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_663  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOVW      HL, #LWRD(_flag1)  ;; 1 cycle
        MOV1      CY, [HL].1         ;; 1 cycle
        BC        ??dlms_reset_data_663  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6708       {
// 6709         // info[17]--- No of Memories
// 6710         // info[19]--- Memory Type	1:16K, 2:256K, 3:512K, 4:1Mb, If Set 0, then no memory placed 
// 6711         // info[21]--- Memory Type
// 6712         // In GSL06A, only 1 Memory present, So SET data should be 02 02 11 04 11 00
// 6713 #if NoOfMemoryPresent ==2
// 6714         if((info[16]!=0x02)||(info[17]<=0x01)||(info[17]>0x02)||(info[18]!=0x11)||(info[20]!=0x11)||(info[19]<=0x01)||(info[21]==0x01)||(info[19]>0x04)||(info[21]>0x04))
        CMP       N:_info+16, #0x2   ;; 1 cycle
        BNZ       ??dlms_reset_data_664  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOV       A, N:_info+17      ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BC        ??dlms_reset_data_664  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_info+17      ;; 1 cycle
        CMP       A, #0x3            ;; 1 cycle
        BNC       ??dlms_reset_data_664  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        CMP       N:_info+18, #0x11  ;; 1 cycle
        BNZ       ??dlms_reset_data_664  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_info+20, #0x11  ;; 1 cycle
        BNZ       ??dlms_reset_data_664  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOV       A, N:_info+19      ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BC        ??dlms_reset_data_664  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        CMP       N:_info+21, #0x1   ;; 1 cycle
        BZ        ??dlms_reset_data_664  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOV       A, N:_info+19      ;; 1 cycle
        CMP       A, #0x5            ;; 1 cycle
        BNC       ??dlms_reset_data_664  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, N:_info+21      ;; 1 cycle
        CMP       A, #0x5            ;; 1 cycle
        BC        ??dlms_reset_data_665  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6715 #elif NoOfMemoryPresent ==1
// 6716           if((info[16]!=0x02)||(info[17]!=0x01)||(info[18]!=0x11)||(info[19]<=0x01)||(info[19]>0x04))
// 6717 #endif
// 6718           {
// 6719             conf_err(0x0C);
??dlms_reset_data_664:
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6720             return 0;
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6721           }
// 6722         temp_us8 = findDeviceAddress(info[19],1);
??dlms_reset_data_665:
        MOV       X, #0x1            ;; 1 cycle
        MOV       A, N:_info+19      ;; 1 cycle
          CFI FunCall _findDeviceAddress
        CALL      _findDeviceAddress  ;; 3 cycles
        MOV       S:_temp_us8, A     ;; 1 cycle
// 6723         MemoryStatus1 = eprom_diagnostic(info[19],temp_us8);
        MOV       X, S:_temp_us8     ;; 1 cycle
        MOV       A, N:_info+19      ;; 1 cycle
          CFI FunCall _eprom_diagnostic
        CALL      _eprom_diagnostic  ;; 3 cycles
        MOV       N:_MemoryStatus1, A  ;; 1 cycle
// 6724 #if NoOfMemoryPresent == 2
// 6725         temp_us8 = findDeviceAddress(info[21], 2);
        MOV       X, #0x2            ;; 1 cycle
        MOV       A, N:_info+21      ;; 1 cycle
          CFI FunCall _findDeviceAddress
        CALL      _findDeviceAddress  ;; 3 cycles
        MOV       S:_temp_us8, A     ;; 1 cycle
// 6726         MemoryStatus2 = eprom_diagnostic(info[21],temp_us8);
        MOV       X, S:_temp_us8     ;; 1 cycle
        MOV       A, N:_info+21      ;; 1 cycle
          CFI FunCall _eprom_diagnostic
        CALL      _eprom_diagnostic  ;; 3 cycles
        MOV       N:_MemoryStatus2, A  ;; 1 cycle
        BR        S:??dlms_reset_data_666  ;; 3 cycles
          CFI FunCall _fill_0d
        ; ------------------------------------- Block: 27 cycles
// 6727 #endif
// 6728       }
// 6729       else
// 6730       {
// 6731         fill_0d();
??dlms_reset_data_663:
        CALL      _fill_0d           ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 6732       }
// 6733       break;
??dlms_reset_data_666:
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 6734       
// 6735     case 0x00600100:
// 6736       if((asso0_flag == 1) || (asso1_flag == 1) || (asso2_flag == 1)) /* if9 */
??data_dec_48:
        CMP       N:_asso0_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_667  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_667  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_668  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6737       {
// 6738         conf_err(0x0D);
??dlms_reset_data_667:
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6739         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6740       } /* if9 */
// 6741       
// 6742       if(attribute_id == 2)
??dlms_reset_data_668:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_457  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6743       {
// 6744         if((info[k] != 0x02) || (info[k + 1] != 0x02) || (info[k + 2] != 0x09) || (info[k + 3] != 0x0f)) /* if9 */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BNZ       ??dlms_reset_data_669  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BNZ       ??dlms_reset_data_669  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+2)[BC]   ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BNZ       ??dlms_reset_data_669  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+3)[BC]   ;; 1 cycle
        CMP       A, #0xF            ;; 1 cycle
        BZ        ??dlms_reset_data_670  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 6745         {
// 6746           conf_err(0x0C);
??dlms_reset_data_669:
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6747           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6748         } /* if9 */
// 6749         
// 6750         k= k + 4;
??dlms_reset_data_670:
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x4           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 6751         for(lu8_i= 0; lu8_i < 7; lu8_i++)
        MOV       X, #0x0            ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
??data_dec_49:
        MOV       A, X               ;; 1 cycle
        CMP       A, #0x7            ;; 1 cycle
        BNC       ??dlms_reset_data_671  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6752         {
// 6753           opr_data[8 + lu8_i]= info[k];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_opr_data+8)[B], A  ;; 1 cycle
// 6754           if(lu8_i>1)
        MOV       A, X               ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BC        ??dlms_reset_data_672  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 6755           {
// 6756             *(serial_no + (lu8_i-2))= info[k];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_serial_no-2)[B], A  ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
// 6757           }
// 6758           k++;
??dlms_reset_data_672:
        INCW      N:_k               ;; 2 cycles
// 6759         }
        INC       X                  ;; 1 cycle
        BR        S:??data_dec_49    ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 6760         for(lu8_i= 5; lu8_i < 13; lu8_i++)
??dlms_reset_data_671:
        MOV       A, #0x5            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??data_dec_50:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0xD            ;; 1 cycle
        BNC       ??dlms_reset_data_673  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6761         {
// 6762           opr_data[lu8_i-5]= info[k];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_opr_data-5)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 6763           *(serial_no + lu8_i)= info[k];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_serial_no)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 6764           k++;
        INCW      N:_k               ;; 2 cycles
// 6765         }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??data_dec_50    ;; 3 cycles
        ; ------------------------------------- Block: 24 cycles
// 6766         eprom_write(SERIAL_NO_CONFIG_ADD,0,16,PAGE_1,AUTO_CALC);
??dlms_reset_data_673:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFE0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6767         eprom_write(ALTERNATE_SERIAL_NO_CONFIG_ADD,2,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+40
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x2            ;; 1 cycle
        MOVW      AX, #0xFE00        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6768         
// 6769         
// 6770         k= k + 2;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x2           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 6771         
// 6772         eprom_read(SET_PAR_ADDRESS,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFF0         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 6773         
// 6774         for(lu8_i= 0; lu8_i < 2; lu8_i++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x04], A       ;; 1 cycle
        ADDW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+36
        ; ------------------------------------- Block: 31 cycles
??data_dec_51:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BNC       ??dlms_reset_data_674  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6775         {
// 6776           meter_type[lu8_i]= info[k];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_meter_type)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 6777           opr_data[lu8_i+4]= info[k];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_opr_data+4)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 6778           k++;
        INCW      N:_k               ;; 2 cycles
// 6779         }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??data_dec_51    ;; 3 cycles
        ; ------------------------------------- Block: 24 cycles
// 6780         eprom_write(SET_PAR_ADDRESS,0,16,PAGE_1,AUTO_CALC);
??dlms_reset_data_674:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFF0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6781         eprom_write(ALTERNATE_SET_PAR_ADDRESS,2,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+40
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x2            ;; 1 cycle
        MOVW      AX, #0xFE10        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6782         
// 6783         invalid_serial_no=0;
        CLR1      N:_flag_system1.0  ;; 2 cycles
        ADDW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+36
// 6784       }
// 6785       
// 6786       break;
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 24 cycles
// 6787     case 0x01608000:
// 6788       if((asso0_flag == 1) || (asso1_flag == 1) || (asso2_flag == 1)) /* if9 */
??data_dec_52:
        CMP       N:_asso0_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_675  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_675  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_676  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6789       {
// 6790         conf_err(0x0D);
??dlms_reset_data_675:
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6791         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6792       } /* if9 */
// 6793       
// 6794       if(attribute_id == 2)
??dlms_reset_data_676:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_677  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6795       {
// 6796         if(info[k] != 0x09)
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BZ        ??dlms_reset_data_678  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 6797         {
// 6798           conf_err(0x0C);
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6799           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6800         }
// 6801         
// 6802         if(info[k + 1] < 240)
??dlms_reset_data_678:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP       A, #0xF0           ;; 1 cycle
        BNC       ??dlms_reset_data_679  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 6803         {
// 6804           fill_disp(0x0500, info[k + 1], 'a');
        MOV       B, #0x61           ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, D               ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOVW      AX, #0x500         ;; 1 cycle
          CFI FunCall _fill_disp
        CALL      _fill_disp         ;; 3 cycles
        ; ------------------------------------- Block: 16 cycles
// 6805         }
// 6806         mem_log1(COMPART_TRANSACTION,199);
??dlms_reset_data_679:
        MOVW      BC, #0xC7          ;; 1 cycle
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _mem_log1
        CALL      _mem_log1          ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 6807       }
// 6808       
// 6809       break;
??dlms_reset_data_677:
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 6810       
// 6811     case 0x01608001:
// 6812       if((asso0_flag == 1) || (asso1_flag == 1)) /* if9 */
??data_dec_53:
        CMP       N:_asso0_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_680  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_681  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6813       {
// 6814         conf_err(0x0D);
??dlms_reset_data_680:
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6815         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6816       } /* if9 */
// 6817       
// 6818       if(attribute_id == 2)
??dlms_reset_data_681:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_682  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6819       {
// 6820         if(info[k] != 0x09)
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BZ        ??dlms_reset_data_683  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 6821         {
// 6822           conf_err(0x0C);
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6823           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6824         }
// 6825         
// 6826         if(info[k + 1] < 240) //no of parameters configured in push mode
??dlms_reset_data_683:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP       A, #0xF0           ;; 1 cycle
        BNC       ??dlms_reset_data_684  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 6827         {
// 6828           fill_disp(0x0600, info[k + 1], 'p');
        MOV       B, #0x70           ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, D               ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOVW      AX, #0x600         ;; 1 cycle
          CFI FunCall _fill_disp
        CALL      _fill_disp         ;; 3 cycles
        ; ------------------------------------- Block: 16 cycles
// 6829         }
// 6830         mem_log1(COMPART_TRANSACTION,197);
??dlms_reset_data_684:
        MOVW      BC, #0xC5          ;; 1 cycle
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _mem_log1
        CALL      _mem_log1          ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 6831       }
// 6832       
// 6833       break;
??dlms_reset_data_682:
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 6834       
// 6835     case 0x01608002:
// 6836       if((asso0_flag == 1) || (asso1_flag == 1) || (asso2_flag == 1)) /* if9 */
??data_dec_54:
        CMP       N:_asso0_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_685  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_685  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_686  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6837       {
// 6838         conf_err(0x0D);
??dlms_reset_data_685:
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6839         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6840       } /* if9 */
// 6841       
// 6842       if(attribute_id == 2)
??dlms_reset_data_686:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_687  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6843       {
// 6844         if(info[k] != 0x11)
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x11           ;; 1 cycle
        BZ        ??dlms_reset_data_688  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 6845         {
// 6846           conf_err(0x0C);
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6847           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6848         }
// 6849         
// 6850         k++;
??dlms_reset_data_688:
        INCW      N:_k               ;; 2 cycles
// 6851         lcd_scroll_time= info[k]; 
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       N:_lcd_scroll_time, A  ;; 1 cycle
// 6852         if(lcd_scroll_time == 0)
        CMP0      N:_lcd_scroll_time  ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 7 cycles
// 6853         {
// 6854           lcd_scroll_time = 2;
        MOV       N:_lcd_scroll_time, #0x2  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 6855         }
// 6856         eprom_read(0x0FC0,0,PAGE_1,AUTO_CALC);
??data_dec_55:
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFC0         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 6857         opr_data[4]= lcd_scroll_time;
        MOV       A, N:_lcd_scroll_time  ;; 1 cycle
        MOV       N:_opr_data+4, A   ;; 1 cycle
// 6858         eprom_write(0x0FC0,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFC0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        ; ------------------------------------- Block: 19 cycles
// 6859       }
// 6860       
// 6861       break;
??dlms_reset_data_687:
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 6862       
// 6863     case 0x01608003: //pending
// 6864       if((asso0_flag == 1) || (asso1_flag == 1) || (asso2_flag == 1))//|| ((asso2_flag == 1) && (3 != obis_code[4])))
??data_dec_56:
        CMP       N:_asso0_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_689  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_689  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_690  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6865       {
// 6866         conf_err(0x0D);
??dlms_reset_data_689:
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6867         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6868       } /* if9 */
// 6869       
// 6870       if(attribute_id == 2)
??dlms_reset_data_690:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_691  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6871       {
// 6872         if(info[k] != 0x11)
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x11           ;; 1 cycle
        BZ        ??dlms_reset_data_692  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 6873         {
// 6874           conf_err(0x0C);
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6875           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6876         }
// 6877         
// 6878         k++;
??dlms_reset_data_692:
        INCW      N:_k               ;; 2 cycles
        ; ------------------------------------- Block: 2 cycles
// 6879         //                          cal_config= info[k];
// 6880         //                          read_from_16(0x0c10);
// 6881         //                          OPR11[2]= cal_config;
// 6882         //                          //                OPR11[14]= cal_chksum(&OPR10, 15);
// 6883         //                          write_data_16(16, 0x0c10);
// 6884       }
// 6885       
// 6886       break;
??dlms_reset_data_691:
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 6887       
// 6888     case 0x01608004: //pending
// 6889       if((asso0_flag == 1) || (asso1_flag == 1) || (asso2_flag == 1)) /* if9 */
??data_dec_57:
        CMP       N:_asso0_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_693  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_693  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_694  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6890       {
// 6891         conf_err(0x0D);
??dlms_reset_data_693:
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6892         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6893       } /* if9 */
// 6894       
// 6895       if(attribute_id == 2)
??dlms_reset_data_694:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_457  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6896       {
// 6897         if((info[k] != 0x02) || (info[k + 1] != 0x05) || (info[k + 2] != 0x12)) /* if9 */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BNZ       ??dlms_reset_data_695  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP       A, #0x5            ;; 1 cycle
        BNZ       ??dlms_reset_data_695  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+2)[BC]   ;; 1 cycle
        CMP       A, #0x12           ;; 1 cycle
        BZ        ??dlms_reset_data_696  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 6898         {
// 6899           conf_err(0x0C);
??dlms_reset_data_695:
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6900           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6901         } /* if9 */
// 6902         
// 6903         //                          read_from_16(0x0c00);
// 6904         k= k + 3;
??dlms_reset_data_696:
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x3           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 6905         for(lu8_i=0;  lu8_i<4;  lu8_i++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 5 cycles
??data_dec_58:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        BNC       ??dlms_reset_data_697  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6906         {
// 6907           //                              OPR11[(lu8_i*2)]=info[k];
// 6908           //                              OPR11[(lu8_i*2)+1]=info[k+1];
// 6909           k=k+3;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x3           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 6910         }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??data_dec_58    ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 6911         
// 6912         //                          write_data_16(16, 0x0c00);
// 6913         //                          tamper_occur_time1= OPR11[0] * 256 + OPR11[1];
// 6914         //                          tamper_restore_time1= OPR11[2] * 256 + OPR11[3];
// 6915         //                          tamper_occur_time2= OPR11[4] * 256 + OPR11[5];
// 6916         //                          tamper_restore_time2= OPR11[6] * 256 + OPR11[7];
// 6917         
// 6918         if((info[k - 1] == 0x02) && (info[k] == 0x03))
??dlms_reset_data_697:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info-1)[BC]   ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BNZ       ??dlms_reset_data_698  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x3            ;; 1 cycle
        BNZ       ??dlms_reset_data_698  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 6919         {
// 6920           //                              read_from_16(0x0c20);
// 6921           
// 6922           k= k + 2;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x2           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 6923           for(lu8_i=0;  lu8_i<3;  lu8_i++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 5 cycles
??data_dec_59:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x3            ;; 1 cycle
        BNC       ??dlms_reset_data_698  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6924           {
// 6925             //                                  *(&OPR10+(lu8_i*2))=info[k];
// 6926             //                                  OPR11[(lu8_i*2)]=info[k+1];
// 6927             k=k+3;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x3           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 6928           }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??data_dec_59    ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 6929           
// 6930           //                              write_data_16(16, 0x0c20);
// 6931           //                              tamper_occur_time_magnet= (uint16_t)OPR10 * 256 + OPR11[0];
// 6932           //                              tamper_restore_time_magnet= (uint16_t)OPR11[1] * 256 + OPR11[2];
// 6933           //                              config_tamper_time= (uint16_t)OPR11[3] * 256 + OPR11[4];
// 6934         }
// 6935       }
// 6936       
// 6937       break;
??dlms_reset_data_698:
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 6938       
// 6939     case 0x01608005:
// 6940       if((asso0_flag == 1) || (asso1_flag == 1) || (asso2_flag == 1)) /* if9 */
??data_dec_60:
        CMP       N:_asso0_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_699  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_699  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_700  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6941       {
// 6942         conf_err(0x0D);
??dlms_reset_data_699:
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6943         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6944       } /* if9 */
// 6945       
// 6946       if(attribute_id == 2)
??dlms_reset_data_700:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_701  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6947       {
// 6948         if(info[k] != 0x11)
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x11           ;; 1 cycle
        BZ        ??dlms_reset_data_702  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 6949         {
// 6950           conf_err(0x0C);
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6951           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6952         }
// 6953         
// 6954         k++;
??dlms_reset_data_702:
        INCW      N:_k               ;; 2 cycles
// 6955         md_type= info[k];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       N:_md_type, A      ;; 1 cycle
// 6956         
// 6957         eprom_read(0x0FC0,0,PAGE_1,AUTO_CALC);//read_from_16(0x0c10);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFC0         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 6958         temp_us8= opr_data[1];
        MOV       A, N:_opr_data+1   ;; 1 cycle
        MOV       S:_temp_us8, A     ;; 1 cycle
// 6959         opr_data[1]= md_type;
        MOV       A, N:_md_type      ;; 1 cycle
        MOV       N:_opr_data+1, A   ;; 1 cycle
// 6960         /* ***************** */
// 6961         if(temp_us8 != md_type)
        MOV       A, S:_temp_us8     ;; 1 cycle
        CMP       A, N:_md_type      ;; 1 cycle
        BZ        ??dlms_reset_data_703  ;; 4 cycles
        ; ------------------------------------- Block: 22 cycles
// 6962         {
// 6963           if(md_type == 1)
        CMP       N:_md_type, #0x1   ;; 1 cycle
        BNZ       ??dlms_reset_data_704  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6964           {
// 6965             mdi_sel= (opr_data[0])*3;
        MOV       A, N:_opr_data     ;; 1 cycle
        MOV       X, #0x3            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       N:_mdi_sel, A      ;; 1 cycle
        BR        S:??dlms_reset_data_703  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6966           }
// 6967           else
// 6968           {
// 6969             mdi_sel= opr_data[0];
??dlms_reset_data_704:
        MOV       A, N:_opr_data     ;; 1 cycle
        MOV       N:_mdi_sel, A      ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 6970           }
// 6971         }
// 6972         eprom_write(0x0FC0,0,16,PAGE_1,AUTO_CALC);
??dlms_reset_data_703:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFC0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 6973         md_variable_update();
          CFI FunCall _md_variable_update
        CALL      _md_variable_update  ;; 3 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        ; ------------------------------------- Block: 13 cycles
// 6974       }
// 6975       
// 6976       break;
??dlms_reset_data_701:
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 6977       
// 6978     case 0x01608006:  
// 6979       if((asso0_flag == 1) || (asso1_flag == 1) || (asso2_flag == 1)) /* if9 */
??data_dec_61:
        CMP       N:_asso0_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_705  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_705  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_706  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6980       {
// 6981         conf_err(0x0D);
??dlms_reset_data_705:
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6982         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6983       } /* if9 */
// 6984       
// 6985       if(attribute_id == 2)
??dlms_reset_data_706:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_707  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 6986       {
// 6987         if(info[k] < 5)
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x5            ;; 1 cycle
        BNC       ??dlms_reset_data_708  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 6988         {
// 6989           conf_err(0x0C);
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 6990           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 6991         }
// 6992         
// 6993         k++;
??dlms_reset_data_708:
        INCW      N:_k               ;; 2 cycles
// 6994         opr_data[0]= info[k++];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       N:_opr_data, A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 6995         ls_max_obj= opr_data[0];
        MOV       A, N:_opr_data     ;; 1 cycle
        MOV       N:_ls_max_obj, A   ;; 1 cycle
// 6996         for(t1= 0; t1 < opr_data[0]; t1++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x09], A       ;; 1 cycle
        ; ------------------------------------- Block: 11 cycles
??data_dec_62:
        MOV       A, [SP+0x09]       ;; 1 cycle
        CMP       A, N:_opr_data     ;; 1 cycle
        BNC       ??dlms_reset_data_709  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 6997         {
// 6998           opr_data[t1+1]= info[k++];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x09]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_opr_data+1)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 6999           ls_conf_obj[t1]= opr_data[t1+1];
        MOV       A, [SP+0x09]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_opr_data+1)[B]  ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x09]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_ls_conf_obj)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 7000         }
        MOV       A, [SP+0x09]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x09], A       ;; 1 cycle
        BR        S:??data_dec_62    ;; 3 cycles
        ; ------------------------------------- Block: 25 cycles
// 7001         eprom_write(0x6310,0,16,PAGE_1,AUTO_CALC);
??dlms_reset_data_709:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x6310        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        ; ------------------------------------- Block: 10 cycles
// 7002       }
// 7003       
// 7004       break;
??dlms_reset_data_707:
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 7005       
// 7006     case 0x01608007:        //pending
// 7007       if((asso0_flag == 1) || (asso1_flag == 1) || (asso2_flag == 1)) /* if9 */
??data_dec_63:
        CMP       N:_asso0_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_710  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_710  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_711  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7008       {
// 7009         conf_err(0x0D);
??dlms_reset_data_710:
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7010         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7011       } /* if9 */
// 7012       
// 7013       if(attribute_id == 2)
??dlms_reset_data_711:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_712  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7014       {
// 7015         if((info[k] != 0x09) || (info[k + 1] != 0x04))
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BNZ       ??dlms_reset_data_713  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        BZ        ??dlms_reset_data_714  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 7016         {
// 7017           conf_err(0x0C);
??dlms_reset_data_713:
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7018           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7019         }
// 7020         
// 7021         k++;
??dlms_reset_data_714:
        INCW      N:_k               ;; 2 cycles
// 7022         k++;
        INCW      N:_k               ;; 2 cycles
        ; ------------------------------------- Block: 4 cycles
// 7023         //                        char_array_ptr= &info[k];
// 7024         //                        char_array_to_long();
// 7025         //                        tamper_sel= long_int;
// 7026         //                        
// 7027         //                        read_from_16(0x0c10);
// 7028         //                        for(lu8_i=0;  lu8_i<4;  lu8_i++)
// 7029         //                        {
// 7030         //                            OPR11[6+lu8_i]=info[k+lu8_i]; 
// 7031         //                        }
// 7032         //                        write_data_16(16, 0x0c10);
// 7033       }
// 7034       
// 7035       break;
??dlms_reset_data_712:
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 7036       
// 7037     case 0x01608008:  //pending
// 7038       if((asso0_flag == 1) || (asso1_flag == 1) || (asso2_flag == 1)) /* if9 */
??data_dec_64:
        CMP       N:_asso0_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_715  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_715  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_716  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7039       {
// 7040         conf_err(0x0D);
??dlms_reset_data_715:
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7041         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7042       } /* if9 */
// 7043       
// 7044       if(attribute_id == 2)
??dlms_reset_data_716:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_717  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7045       {
// 7046         if((info[k] != 0x02) || (info[k + 1] != 0x03))
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BNZ       ??dlms_reset_data_718  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP       A, #0x3            ;; 1 cycle
        BZ        ??dlms_reset_data_719  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 7047         {
// 7048           conf_err(0x0C);
??dlms_reset_data_718:
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7049           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7050         }
// 7051         
// 7052         k++;
??dlms_reset_data_719:
        INCW      N:_k               ;; 2 cycles
// 7053         k++;
        INCW      N:_k               ;; 2 cycles
        ; ------------------------------------- Block: 4 cycles
// 7054         
// 7055         //                      read_from_16(0x0c30);
// 7056         //                      OPR10= info[k + 1];
// 7057         //                      OPR11[0]= info[k + 2];
// 7058         //                      MAX_LS_MEM1= (uint16_t)OPR10 * 256 + OPR11[0];
// 7059         //                      OPR11[1]= info[k + 4];
// 7060         //                      OPR11[2]= info[k + 5];
// 7061         //                      MAX_LS_MEM2= (uint16_t)OPR11[1] * 256 + OPR11[2];
// 7062         //                      OPR11[3]= info[k + 7];
// 7063         //                      OPR11[4]= info[k + 8];
// 7064         //                      //				MAX_LS_MEM3=(uint16_t)OPR11[3]*256 + OPR11[4];
// 7065         //                      //				OPR11[3]=info[k+9];
// 7066         //                      //				OPR11[4]=info[k+10];
// 7067         //                      
// 7068         //                      MAX_LS= (uint16_t)OPR11[3] * 256 + OPR11[4]; /* maximum load survey */
// 7069         //                      //                OPR11[14]= cal_chksum(&OPR10, 15);
// 7070         //                      write_data_16(16, 0x0c30);
// 7071       }
// 7072       
// 7073       break;
??dlms_reset_data_717:
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 7074     case 0x01608009: /* PCB tracking write case */
// 7075       if((asso0_flag == 1) || (asso1_flag == 1) || (asso2_flag == 1))
??data_dec_65:
        CMP       N:_asso0_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_720  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_720  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_721  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7076       {
// 7077         conf_err(0x0D);
??dlms_reset_data_720:
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7078         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7079       }
// 7080       
// 7081       if((info[k] != 0x06))
??dlms_reset_data_721:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x6            ;; 1 cycle
        BZ        ??dlms_reset_data_722  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 7082       {
// 7083         conf_err(0x0C);
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7084         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7085       }
// 7086       
// 7087       k++;
??dlms_reset_data_722:
        INCW      N:_k               ;; 2 cycles
// 7088       eprom_read(TOU_VAR_SAVE,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x7F0         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 7089       for(lu8_i=0;  lu8_i<4;  lu8_i++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 11 cycles
??data_dec_66:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        BNC       ??dlms_reset_data_723  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 7090       {
// 7091         opr_data[6+lu8_i]=info[k+lu8_i]; 
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, N:_k           ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_opr_data+6)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 7092       }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??data_dec_66    ;; 3 cycles
        ; ------------------------------------- Block: 18 cycles
// 7093       opr_data[10]= 0x01;
??dlms_reset_data_723:
        MOV       N:_opr_data+10, #0x1  ;; 1 cycle
// 7094       eprom_write(TOU_VAR_SAVE,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x7F0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 7095       break;
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 14 cycles
// 7096       
// 7097     case 0x0160800B:    //pending
// 7098       if((asso0_flag == 1) || (asso1_flag == 1) || (asso2_flag == 1)) /* if9 */
??data_dec_67:
        CMP       N:_asso0_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_724  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_724  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_725  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7099       {
// 7100         conf_err(0x0D);
??dlms_reset_data_724:
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7101         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7102       } /* if9 */
// 7103       
// 7104       if(attribute_id == 2)
??dlms_reset_data_725:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_726  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7105       {
// 7106         if((info[k] != 0x09)) /* ||(info[k+1]!=48)) */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BZ        ??dlms_reset_data_727  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 7107         {
// 7108           conf_err(0x0C);
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7109           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7110         }
// 7111         
// 7112         k++;
??dlms_reset_data_727:
        INCW      N:_k               ;; 2 cycles
// 7113         k++;
        INCW      N:_k               ;; 2 cycles
        ; ------------------------------------- Block: 4 cycles
// 7114         
// 7115         //                    for(tem_m= 0, tem_h= 0; tem_h < 4; tem_h++)
// 7116         //                    {
// 7117         //                        for(tem_s= 0; tem_s < 15; tem_s++)
// 7118         //                        {
// 7119         //                            *(&OPR10 + tem_s)= info[k + tem_m];
// 7120         //                            if(((tem_h == 0) && (tem_s > 13)) || ((tem_h == 3) && (tem_s > 9)))
// 7121         //                            {
// 7122         //                                *(&OPR10 + tem_s)= 0;
// 7123         //                            }
// 7124         //                            else
// 7125         //                            {
// 7126         //                                tem_m++;
// 7127         //                            }
// 7128         //                        }
// 7129         //                        
// 7130         //                        lu16_addr=(0x7f00 + (0x10 * tem_h)); 
// 7131         //                        write_data_256(m256e2p1w,16,lu16_addr);
// 7132         //                    }
// 7133         //                    read_config_tamper_thresholds();
// 7134       }
// 7135       
// 7136       break;
??dlms_reset_data_726:
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 7137       
// 7138     case 0x0160800C: 
// 7139       if((asso0_flag == 1) || (asso1_flag == 1) || (asso2_flag == 1)) /* if9 */
??data_dec_68:
        CMP       N:_asso0_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_728  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_728  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_729  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7140       {
// 7141         conf_err(0x0D);
??dlms_reset_data_728:
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7142         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7143       } /* if9 */
// 7144       
// 7145       if(attribute_id == 2)
??dlms_reset_data_729:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_457  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7146       {
// 7147         if((info[k] != 0x09) || (info[k + 1] != 45))
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BNZ       ??dlms_reset_data_730  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP       A, #0x2D           ;; 1 cycle
        BZ        ??dlms_reset_data_731  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 7148         {
// 7149           conf_err(0x0C);
??dlms_reset_data_730:
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7150           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7151         }
// 7152         
// 7153         k++;
??dlms_reset_data_731:
        INCW      N:_k               ;; 2 cycles
// 7154         k++;
        INCW      N:_k               ;; 2 cycles
// 7155         
// 7156         
// 7157         for(tem_m= 0, tem_h= 0; tem_h < 3; tem_h++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x06], A       ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x0C], A       ;; 1 cycle
        ; ------------------------------------- Block: 8 cycles
??data_dec_69:
        MOV       A, [SP+0x0C]       ;; 1 cycle
        CMP       A, #0x3            ;; 1 cycle
        BNC       ??dlms_reset_data_732  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 7158         {
// 7159           for(tem_s= 0; tem_s < 15; tem_s++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x03], A       ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??data_dec_70:
        MOV       A, [SP+0x03]       ;; 1 cycle
        CMP       A, #0xF            ;; 1 cycle
        BNC       ??dlms_reset_data_733  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 7160           {
// 7161             opr_data[tem_s]= info[k + tem_m];
        MOV       A, [SP+0x06]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, N:_k           ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x03]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_opr_data)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 7162             if((tem_h == 2) && (tem_s > 14))
        MOV       A, [SP+0x0C]       ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BNZ       ??dlms_reset_data_734  ;; 4 cycles
        ; ------------------------------------- Block: 18 cycles
        MOV       A, [SP+0x03]       ;; 1 cycle
        CMP       A, #0xF            ;; 1 cycle
        BC        ??dlms_reset_data_734  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 7163             {
// 7164               opr_data[tem_s]=0;
        MOV       A, [SP+0x03]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_opr_data)[B], A  ;; 1 cycle
        BR        S:??dlms_reset_data_735  ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 7165             }
// 7166             else
// 7167             {
// 7168               tem_m++;
??dlms_reset_data_734:
        MOV       A, [SP+0x06]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x06], A       ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 7169             }
// 7170           }
??dlms_reset_data_735:
        MOV       A, [SP+0x03]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x03], A       ;; 1 cycle
        BR        S:??data_dec_70    ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 7171           
// 7172           lu16_addr=(READ_CONFIG_PARA_ADD + (0x10 * tem_h)); 
??dlms_reset_data_733:
        MOV       A, [SP+0x0C]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x10          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x6400        ;; 1 cycle
        MOVW      [SP+0x0A], AX      ;; 1 cycle
// 7173           eprom_write(lu16_addr,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x0C]      ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 7174         }
        MOV       A, [SP+0x0E]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x0E], A       ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        BR        S:??data_dec_69    ;; 3 cycles
          CFI FunCall _read_config_parameters
        ; ------------------------------------- Block: 24 cycles
// 7175         
// 7176         read_config_parameters();
??dlms_reset_data_732:
        CALL      _read_config_parameters  ;; 3 cycles
// 7177       }
// 7178       
// 7179       break;
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 7180       
// 7181     case 0x0160800D:                                                    /* Firmware version */
// 7182       if((asso0_flag == 1) || (asso1_flag == 1) || (asso2_flag == 1)) /* if9 */
??data_dec_71:
        CMP       N:_asso0_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_736  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_736  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_737  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7183       {
// 7184         conf_err(0x0D);
??dlms_reset_data_736:
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7185         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7186       } /* if9 */
// 7187       
// 7188       if(attribute_id == 2)
??dlms_reset_data_737:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_457  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7189       {
// 7190         if((info[k] != 0x09))
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BZ        ??dlms_reset_data_738  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 7191         {
// 7192           conf_err(0x0C);
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7193           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7194         }
// 7195         
// 7196         k++;
??dlms_reset_data_738:
        INCW      N:_k               ;; 2 cycles
// 7197         k++;
        INCW      N:_k               ;; 2 cycles
// 7198         eprom_read(SET_PAR_ADDRESS,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFF0         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 7199         for(tem_s= 0; tem_s < 8; tem_s++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x03], A       ;; 1 cycle
        ; ------------------------------------- Block: 13 cycles
??data_dec_72:
        MOV       A, [SP+0x03]       ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BNC       ??dlms_reset_data_739  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 7200         {
// 7201           opr_data[6 + tem_s]= info[k + tem_s];
        MOV       A, [SP+0x03]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, N:_k           ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x03]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_opr_data+6)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 7202           dlms_firm_ver[tem_s]= info[k + tem_s];
        MOV       A, [SP+0x03]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, N:_k           ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x03]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_dlms_firm_ver)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 7203         }
        MOV       A, [SP+0x03]       ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP+0x03], A       ;; 1 cycle
        BR        S:??data_dec_72    ;; 3 cycles
        ; ------------------------------------- Block: 30 cycles
// 7204         eprom_write(SET_PAR_ADDRESS,0,16,PAGE_1,AUTO_CALC);
??dlms_reset_data_739:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFF0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 7205         eprom_write(ALTERNATE_SET_PAR_ADDRESS,2,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+40
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x2            ;; 1 cycle
        MOVW      AX, #0xFE10        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
        ADDW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+36
// 7206       }
// 7207       break;
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 22 cycles
// 7208       
// 7209     case 0x01608012: /* utility id */
// 7210       if((asso0_flag == 1) || (asso1_flag == 1) || (asso2_flag == 1))
??data_dec_73:
        CMP       N:_asso0_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_740  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_740  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_741  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7211       {
// 7212         conf_err(0x0D);
??dlms_reset_data_740:
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7213         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7214       }
// 7215       
// 7216       if(attribute_id == 2)
??dlms_reset_data_741:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_742  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7217       {
// 7218         if((info[k] != 0x0a) || (info[k + 1] != 0x04))
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0xA            ;; 1 cycle
        BNZ       ??dlms_reset_data_743  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info+1)[BC]   ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        BZ        ??dlms_reset_data_744  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 7219         {
// 7220           conf_err(0x0C);
??dlms_reset_data_743:
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7221           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7222         }
// 7223         
// 7224         k++;
??dlms_reset_data_744:
        INCW      N:_k               ;; 2 cycles
// 7225         k++;
        INCW      N:_k               ;; 2 cycles
// 7226         eprom_read(FG_DATE_AND_TIME,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFD0         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 7227         for(lu8_i=0;  lu8_i<4;  lu8_i++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 13 cycles
??data_dec_74:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        BNC       ??dlms_reset_data_745  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 7228         {
// 7229           opr_data[lu8_i+5]=info[k+lu8_i];
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, N:_k           ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_opr_data+5)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 7230           utility_id[lu8_i]=info[k+lu8_i]; 
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, N:_k           ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       (_utility_id)[B], A  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 7231         }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??data_dec_74    ;; 3 cycles
        ; ------------------------------------- Block: 30 cycles
// 7232         eprom_write(FG_DATE_AND_TIME,0,16,PAGE_1,AUTO_CALC);
??dlms_reset_data_745:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFD0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        ; ------------------------------------- Block: 10 cycles
// 7233       }
// 7234       break;
??dlms_reset_data_742:
        BR        S:??dlms_reset_data_746  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 7235       
// 7236     case 0x01608016: /* top_cover restore */  
// 7237       if((asso0_flag == 1) || (asso1_flag == 1))
??data_dec_75:
        CMP       N:_asso0_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_747  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_748  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7238       {
// 7239         conf_err(0x0D);
??dlms_reset_data_747:
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7240         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7241       }
// 7242       if(info[k] != 0x11)
??dlms_reset_data_748:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x11           ;; 1 cycle
        BZ        ??dlms_reset_data_749  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 7243       {
// 7244         conf_err(0x0C);
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7245         return 0;
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7246       }
// 7247       k++;
??dlms_reset_data_749:
        INCW      N:_k               ;; 2 cycles
// 7248       
// 7249       top_cover_restore_command = info[k];
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        MOV       N:_top_cover_restore_command, A  ;; 1 cycle
// 7250       top_cover_restore();
          CFI FunCall _top_cover_restore
        CALL      _top_cover_restore  ;; 3 cycles
// 7251       if(bitIsSet(tpr.top_cover.flag,event_f))
        MOVW      HL, #LWRD(_tpr+592)  ;; 1 cycle
        MOV1      CY, [HL].0         ;; 1 cycle
        BNC       ??dlms_reset_data_746  ;; 4 cycles
        ; ------------------------------------- Block: 14 cycles
// 7252       {
// 7253         top_cover_restore_command= 0;
        MOV       N:_top_cover_restore_command, #0x0  ;; 1 cycle
// 7254         conf_err(0x0C);
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7255         return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 7256       }
// 7257       break;
// 7258       
// 7259     case 0x01608032: /* md reset switch */    //pending
// 7260       if(info[k] == 0x11)
??data_dec_76:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, (_info)[BC]     ;; 1 cycle
        CMP       A, #0x11           ;; 1 cycle
        BNZ       ??dlms_reset_data_750  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 7261       {
// 7262         conf_err(0x0C);
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7263         return 0;
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7264       }
// 7265       k++;
??dlms_reset_data_750:
        INCW      N:_k               ;; 2 cycles
// 7266       /* md_reset_disable=info[k];
// 7267       read_from_16(0x0c90);  
// 7268       OPR11[0]=md_reset_disable;              
// 7269       OPR11[14]=cal_chksum(&OPR11[0],15);
// 7270       write_data_16(16,0x0c90);*/
// 7271       
// 7272       break;
        BR        S:??dlms_reset_data_746  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 7273       
// 7274       /* ************************************************************** */
// 7275     default:
// 7276       conf_err(0x0B);
??data_dec_77:
        MOV       A, #0xB            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7277       return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7278     }
// 7279     break;
??dlms_reset_data_746:
        BR        N:??dlms_reset_data_457  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 7280     
// 7281   case 0xc3:
// 7282     invo_prio= info[5]; /* invoke_id,priority */
??dlms_reset_data_456:
        MOV       A, N:_info+5       ;; 1 cycle
        MOV       N:_invo_prio, A    ;; 1 cycle
// 7283     
// 7284     if((info[4] > 0x03) || (info[4] == 0x00)) /* ifasslen */
        MOV       A, N:_info+4       ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        BNC       ??dlms_reset_data_751  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
        CMP0      N:_info+4          ;; 1 cycle
        BNZ       ??dlms_reset_data_752  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7285     {
// 7286       conf_err(0x0C);
??dlms_reset_data_751:
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7287       return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7288     }                       /* ifasslen */
// 7289     else if(byte_cont < 15) /* byte_cont */
??dlms_reset_data_752:
        MOVW      AX, N:_byte_cont   ;; 1 cycle
        CMPW      AX, #0xF           ;; 1 cycle
        BNC       ??dlms_reset_data_753  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 7290     {                       /* elifbyte_cont */
// 7291       conf_err(0x0B);
        MOV       A, #0xB            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7292       return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7293     } /* elifbyte_cont */
// 7294     
// 7295     if(info[4] != 0x03)
??dlms_reset_data_753:
        CMP       N:_info+4, #0x3    ;; 1 cycle
        BZ        ??dlms_reset_data_754  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7296     {
// 7297       class_id= (uint16_t)info[6] * 256 + info[7];
        MOV       X, N:_info+6       ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOV       C, N:_info+7       ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        ADDW      AX, BC             ;; 1 cycle
        MOVW      N:_class_id, AX    ;; 1 cycle
// 7298       for(global_i= 0; global_i < 6; global_i++)
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_global_i, AX    ;; 1 cycle
        ; ------------------------------------- Block: 11 cycles
??data_dec_78:
        MOVW      AX, N:_global_i    ;; 1 cycle
        CMPW      AX, #0x6           ;; 1 cycle
        BNC       ??dlms_reset_data_755  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 7299       {
// 7300         obis_code[global_i]= info[global_i + 8];
        MOVW      BC, N:_global_i    ;; 1 cycle
        MOV       A, (_info+8)[BC]   ;; 1 cycle
        MOVW      BC, N:_global_i    ;; 1 cycle
        MOV       (_obis_code)[BC], A  ;; 1 cycle
// 7301       }
        INCW      N:_global_i        ;; 2 cycles
        BR        S:??data_dec_78    ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 7302       attribute_id= info[14];
??dlms_reset_data_755:
        MOV       A, N:_info+14      ;; 1 cycle
        MOV       N:_attribute_id, A  ;; 1 cycle
// 7303       obis_short= obis_short_cal(obis_code);
        MOVW      AX, #LWRD(_obis_code)  ;; 1 cycle
          CFI FunCall _obis_short_cal
        CALL      _obis_short_cal    ;; 3 cycles
        MOVW      N:_obis_short, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      N:_obis_short+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        ; ------------------------------------- Block: 10 cycles
// 7304     }
// 7305     
// 7306     k= 16;
??dlms_reset_data_754:
        MOVW      AX, #0x10          ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 7307     
// 7308     for(global_i= 0; global_i < 6; global_i++)
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_global_i, AX    ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
??data_dec_79:
        MOVW      AX, N:_global_i    ;; 1 cycle
        CMPW      AX, #0x6           ;; 1 cycle
        BNC       ??dlms_reset_data_756  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 7309     {
// 7310       if(obis_code[global_i] != 0xff)
        MOVW      BC, N:_global_i    ;; 1 cycle
        MOV       A, (_obis_code)[BC]  ;; 1 cycle
        INC       A                  ;; 1 cycle
        BNZ       ??dlms_reset_data_756  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 7311       {
// 7312         break;
// 7313       }
// 7314     }
        INCW      N:_global_i        ;; 2 cycles
        BR        S:??data_dec_79    ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 7315     
// 7316     if(global_i == 0x06)
??dlms_reset_data_756:
        MOVW      AX, N:_global_i    ;; 1 cycle
        CMPW      AX, #0x6           ;; 1 cycle
        BNZ       ??dlms_reset_data_757  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 7317     {
// 7318       conf_err(0x04);
        MOV       A, #0x4            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7319       return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7320     }
// 7321     
// 7322     if((asso0_flag != 0) || ((asso1_flag != 0) && ((obis_code[2] != 22) && (obis_code[1] != 0) && (obis_code[0] != 0))))
??dlms_reset_data_757:
        CMP0      N:_asso0_flag      ;; 1 cycle
        BNZ       ??dlms_reset_data_758  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_asso1_flag      ;; 1 cycle
        BZ        ??dlms_reset_data_759  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+2, #0x16  ;; 1 cycle
        BZ        ??dlms_reset_data_759  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_obis_code+1     ;; 1 cycle
        BZ        ??dlms_reset_data_759  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_obis_code       ;; 1 cycle
        BZ        ??dlms_reset_data_759  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7323     {
// 7324       conf_err(0x0D);
??dlms_reset_data_758:
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7325       return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7326     } /* if9 */
// 7327     
// 7328     if(cosem_flag == 1)
??dlms_reset_data_759:
        CMP       N:_cosem_flag, #0x1  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_760  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7329     {
// 7330       if((obis_code[0] == 0) && (obis_code[1] == 0) && (obis_code[2] == 13) && (obis_code[3] == 0) && (obis_code[4] == 0) && (obis_code[5] == 255))
        CMP0      N:_obis_code       ;; 1 cycle
        BNZ       ??dlms_reset_data_761  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_obis_code+1     ;; 1 cycle
        BNZ       ??dlms_reset_data_761  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+2, #0xD  ;; 1 cycle
        BNZ       ??dlms_reset_data_761  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_obis_code+3     ;; 1 cycle
        BNZ       ??dlms_reset_data_761  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_obis_code+4     ;; 1 cycle
        BNZ       ??dlms_reset_data_761  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+5, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_761  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7331       {
// 7332         if(attribute_id == 1)
        CMP       N:_attribute_id, #0x1  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_760  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7333         {
// 7334           if(active_calendar == 0)
        CMP0      N:_active_calendar  ;; 1 cycle
        ONEB      A                  ;; 1 cycle
        SKZ                          ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
        CLRB      A                  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??data_dec_80:
        MOV       N:_active_calendar, A  ;; 1 cycle
// 7335           {
// 7336             active_calendar= 1;
// 7337           }
// 7338           else
// 7339           {
// 7340             active_calendar= 0;
// 7341           }
// 7342           
// 7343           mem_log1(COMPART_TRANSACTION,155);
        MOVW      BC, #0x9B          ;; 1 cycle
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _mem_log1
        CALL      _mem_log1          ;; 3 cycles
// 7344           deter_zone();
          CFI FunCall _deter_zone
        CALL      _deter_zone        ;; 3 cycles
// 7345           save_tod_flag= 0;
        MOV       N:_save_tod_flag, #0x0  ;; 1 cycle
// 7346           zone_change_f= 0;
        MOV       N:_zone_change_f, #0x0  ;; 1 cycle
// 7347           
// 7348           save_tod_data();
          CFI FunCall _save_tod_data
        CALL      _save_tod_data     ;; 3 cycles
// 7349           load_tod_data();
          CFI FunCall _load_tod_data
        CALL      _load_tod_data     ;; 3 cycles
// 7350           mri_bill_flag=1;
        MOVW      AX, #0x1           ;; 1 cycle
        MOVW      N:_mri_bill_flag, AX  ;; 1 cycle
// 7351           save_bill_data();
          CFI FunCall _save_bill_data
        CALL      _save_bill_data    ;; 3 cycles
// 7352           mri_bill_flag=0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_mri_bill_flag, AX  ;; 1 cycle
// 7353           //					for(global_i=0; global_i<15; global_i++)
// 7354           //					{
// 7355           //						*(&OPR10+global_i)=0xff;
// 7356           //					}
// 7357           //					OPR11[14]=cal_chksum(&OPR10,15);
// 7358           //					if(active_calendar==0)
// 7359           //					{
// 7360           //						write_data_256(m256e2p1w,16,passive);
// 7361           //					}
// 7362           //					else
// 7363           //					{
// 7364           //						write_data_256(m256e2p1w,16,active);
// 7365           //					}
// 7366           
// 7367           opr_data[0]= active_calendar;
        MOV       A, N:_active_calendar  ;; 1 cycle
        MOV       N:_opr_data, A     ;; 1 cycle
// 7368           eprom_write(TOU_ActiveCalPtr,0,16,PAGE_1,AUTO_CALC); 
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x15E0        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        BR        N:??dlms_reset_data_760  ;; 3 cycles
        ; ------------------------------------- Block: 39 cycles
// 7369         }
// 7370       }
// 7371       else if((obis_code[0] == 0) && (obis_code[1] == 0) && (obis_code[2] == 40) && (obis_code[3] == 0) && (obis_code[4] == 3) && (obis_code[5] == 255))
??dlms_reset_data_761:
        CMP0      N:_obis_code       ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_762  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_obis_code+1     ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_762  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+2, #0x28  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_762  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_obis_code+3     ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_762  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+4, #0x3  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_762  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+5, #0xFF  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_762  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7372       {
// 7373         if(attribute_id == 2)
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_760  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7374         {
// 7375           if((info[16] != 0x09) || (info[17] != 0x10))
        CMP       N:_info+16, #0x9   ;; 1 cycle
        BNZ       ??dlms_reset_data_763  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_info+17, #0x10  ;; 1 cycle
        BZ        ??dlms_reset_data_764  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7376           {
// 7377             conf_err(0x0C);
??dlms_reset_data_763:
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7378             return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7379           }
// 7380           
// 7381           for(global_i= 0; global_i < 16; global_i++)
??dlms_reset_data_764:
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_global_i, AX    ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??data_dec_81:
        MOVW      AX, N:_global_i    ;; 1 cycle
        CMPW      AX, #0x10          ;; 1 cycle
        BNC       ??dlms_reset_data_765  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 7382           {
// 7383             aut_pswd1[global_i]= info[global_i + 18];
        MOVW      BC, N:_global_i    ;; 1 cycle
        MOV       A, (_info+18)[BC]  ;; 1 cycle
        MOVW      BC, N:_global_i    ;; 1 cycle
        MOV       (_aut_pswd1)[BC], A  ;; 1 cycle
// 7384           }
        INCW      N:_global_i        ;; 2 cycles
        BR        S:??data_dec_81    ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 7385           for(global_i= 0; global_i < 8; global_i++)
??dlms_reset_data_765:
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_global_i, AX    ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??data_dec_82:
        MOVW      AX, N:_global_i    ;; 1 cycle
        CMPW      AX, #0x8           ;; 1 cycle
        BNC       ??dlms_reset_data_766  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 7386           {
// 7387             *(&opr_data[0] + global_i)= aut_pswd1[global_i];
        MOVW      BC, N:_global_i    ;; 1 cycle
        MOV       A, (_aut_pswd1)[BC]  ;; 1 cycle
        MOVW      BC, N:_global_i    ;; 1 cycle
        MOV       (_opr_data)[BC], A  ;; 1 cycle
// 7388           }
        INCW      N:_global_i        ;; 2 cycles
        BR        S:??data_dec_82    ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 7389           
// 7390           eprom_write(0x0160,0,16,PAGE_1,AUTO_CALC);
??dlms_reset_data_766:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x160         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 7391           for(global_i= 0; global_i < 8; global_i++)
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_global_i, AX    ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        ; ------------------------------------- Block: 12 cycles
??data_dec_83:
        MOVW      AX, N:_global_i    ;; 1 cycle
        CMPW      AX, #0x8           ;; 1 cycle
        BNC       ??dlms_reset_data_767  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 7392           {
// 7393             *(&opr_data[0] + global_i)= aut_pswd1[global_i + 8];
        MOVW      BC, N:_global_i    ;; 1 cycle
        MOV       A, (_aut_pswd1+8)[BC]  ;; 1 cycle
        MOVW      BC, N:_global_i    ;; 1 cycle
        MOV       (_opr_data)[BC], A  ;; 1 cycle
// 7394           }
        INCW      N:_global_i        ;; 2 cycles
        BR        S:??data_dec_83    ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 7395           eprom_write(0x0170,0,16,PAGE_1,AUTO_CALC);
??dlms_reset_data_767:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+38
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x170         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+36
        BR        N:??dlms_reset_data_760  ;; 3 cycles
        ; ------------------------------------- Block: 13 cycles
// 7396           /*           event_counter++; */
// 7397         }
// 7398       }
// 7399       else if((obis_code[0] == 1) && (obis_code[1] == 0) && (obis_code[2] == 98) && (obis_code[3] == 1) && (obis_code[4] == 0) && (obis_code[5] == 255))
??dlms_reset_data_762:
        CMP       N:_obis_code, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_768  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_obis_code+1     ;; 1 cycle
        BNZ       ??dlms_reset_data_768  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+2, #0x62  ;; 1 cycle
        BNZ       ??dlms_reset_data_768  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+3, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_768  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_obis_code+4     ;; 1 cycle
        BNZ       ??dlms_reset_data_768  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+5, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_768  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7400       {
// 7401         if(attribute_id == 2) /* md reset */
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_760  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7402         {
// 7403           if(md_reset_ip_flag == 1)
        CMP       N:_md_reset_ip_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_769  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7404           {
// 7405             conf_err(0x0C);
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7406             return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7407           }
// 7408           
// 7409           mri_bill_flag= 1;
??dlms_reset_data_769:
        MOVW      AX, #0x1           ;; 1 cycle
        MOVW      N:_mri_bill_flag, AX  ;; 1 cycle
// 7410           mdreset_type= 2; /* md reset by MRI */
        MOV       N:_mdreset_type, #0x2  ;; 1 cycle
// 7411           mem_log1(COMPART_TRANSACTION,181);
        MOVW      BC, #0xB5          ;; 1 cycle
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _mem_log1
        CALL      _mem_log1          ;; 3 cycles
        BR        N:??dlms_reset_data_760  ;; 3 cycles
        ; ------------------------------------- Block: 11 cycles
// 7412         }
// 7413       }
// 7414       
// 7415       else if((obis_code[0] == 0) && (obis_code[1] == 0) && (obis_code[2] == 1) // RTC sync
// 7416               && (obis_code[3] == 0) && (obis_code[4] == 0) && (obis_code[5] == 255))
??dlms_reset_data_768:
        CMP0      N:_obis_code       ;; 1 cycle
        BNZ       ??dlms_reset_data_770  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_obis_code+1     ;; 1 cycle
        BNZ       ??dlms_reset_data_770  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+2, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_770  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_obis_code+3     ;; 1 cycle
        BNZ       ??dlms_reset_data_770  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_obis_code+4     ;; 1 cycle
        BNZ       ??dlms_reset_data_770  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+5, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_770  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7417       {
// 7418         if(attribute_id == 6)
        CMP       N:_attribute_id, #0x6  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_760  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7419         {
// 7420           conf_err(0x0C);
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7421           return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7422         }
// 7423       }
// 7424       
// 7425       else if((obis_code[0] == 0) && (obis_code[1] == 0) && (obis_code[2] == 10) && (obis_code[3] == 0) && (obis_code[4] == 0) && (obis_code[5] == 255))
??dlms_reset_data_770:
        CMP0      N:_obis_code       ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_771  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_obis_code+1     ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_771  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+2, #0xA  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_771  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_obis_code+3     ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_771  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_obis_code+4     ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_771  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+5, #0xFF  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_771  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7426       {
// 7427         if((attribute_id == 1) && (asso3_flag == 1)) /* reset all */
        CMP       N:_attribute_id, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_772  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso3_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_772  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7428         {                                            /* data_reset_flag=1; */
// 7429           lcd_write_msg(324,1);
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x144         ;; 1 cycle
          CFI FunCall _lcd_write_msg
        CALL      _lcd_write_msg     ;; 3 cycles
// 7430           dlms_reset_data();         
          CFI FunCall _dlms_reset_data
        CALL      _dlms_reset_data   ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7431         }
// 7432         
// 7433         if((attribute_id == 2) && (asso3_flag == 1)) /* reset all */
??dlms_reset_data_772:
        CMP       N:_attribute_id, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_773  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso3_flag, #0x1  ;; 1 cycle
        SKNZ                         ;; 1 cycle
          CFI FunCall _memory_log_reset_non_roll
        ; ------------------------------------- Block: 2 cycles
// 7434         {                                            /* data_reset_flag=1; */
// 7435           memory_log_reset_non_roll();
        CALL      _memory_log_reset_non_roll  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 7436         }
// 7437         
// 7438         if((attribute_id == 3) && (asso3_flag == 1))                            /* eeprom read */
??dlms_reset_data_773:
        CMP       N:_attribute_id, #0x3  ;; 1 cycle
        BNZ       ??dlms_reset_data_774  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso3_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_774  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7439         {
// 7440           data_dump_dlms(info[16], info[17], info[18]);
        MOV       C, N:_info+18      ;; 1 cycle
        MOV       X, N:_info+17      ;; 1 cycle
        MOV       A, N:_info+16      ;; 1 cycle
          CFI FunCall _data_dump_dlms
        CALL      _data_dump_dlms    ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 7441         }
// 7442         
// 7443         //////////                if((attribute_id == 5) && (asso3_flag == 1))
// 7444         //////////                {
// 7445         //////////                    if((info[16] != 0x02) || (info[17] != 0x02))
// 7446         //////////                    {
// 7447         //////////                        conf_err(0x0C);
// 7448         //////////                        return 0;
// 7449         //////////                    }
// 7450         //////////                    if((info[18] != 0x09) || (info[19] != 24))
// 7451         //////////                    {
// 7452         //////////                        conf_err(0x0C);
// 7453         //////////                        return 0;
// 7454         //////////                    }
// 7455         //////////                    if(strncmp((char *)key, (char *)&info[20], 24) == 0)
// 7456         //////////                    {
// 7457         //////////                        
// 7458         //////////                        for(global_i= 0; global_i < 24; global_i++)
// 7459         //////////                        {
// 7460         //////////                            key[global_i]= info[global_i + 46];
// 7461         //////////                        }
// 7462         //////////                    }
// 7463         //////////                }
// 7464         if((attribute_id == 6) && (asso3_flag == 1))
??dlms_reset_data_774:
        CMP       N:_attribute_id, #0x6  ;; 1 cycle
        BNZ       ??dlms_reset_data_775  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso3_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_775  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7465         {
// 7466           if((info[16] != 0x09) || (info[17] != 24))
        CMP       N:_info+16, #0x9   ;; 1 cycle
        BNZ       ??dlms_reset_data_776  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_info+17, #0x18  ;; 1 cycle
        BZ        ??dlms_reset_data_777  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7467           {
// 7468             conf_err(0x0C);
??dlms_reset_data_776:
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7469             return 0;
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7470           }
// 7471           
// 7472           /* pending, initialise FSL_key */
// 7473           if(strncmp((char *)FSL_key, (char *)&info[18], 24) == 0)
??dlms_reset_data_777:
        MOVW      DE, #0x18          ;; 1 cycle
        MOVW      BC, #LWRD(_info+18)  ;; 1 cycle
        MOVW      AX, #LWRD(_FSL_key)  ;; 1 cycle
          CFI FunCall _strncmp
        CALL      _strncmp           ;; 3 cycles
        CMPW      AX, #0x0           ;; 1 cycle
        BNZ       ??dlms_reset_data_778  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
// 7474           {
// 7475             //TXD0 = 0x06;
// 7476             //////            PDwrite_detect_f=1;
// 7477             //////            StorePDTime();
// 7478             //////            save_pd();
// 7479             //////            MET_u8CircularPtr=0;
// 7480             //////            store_energy();
// 7481             //////            stopmode_backup();
// 7482             //////            bat_enable;
// 7483             //////            disp_vDispString(LCD_BOOT,7);
// 7484             e2416_byte = 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_e2416_byte, AX  ;; 1 cycle
// 7485             e2416_q2_byte=0;
        MOV       N:_e2416_q2_byte, #0x0  ;; 1 cycle
// 7486             sleep_saving_early_detection();
          CFI FunCall _sleep_saving_early_detection
        CALL      _sleep_saving_early_detection  ;; 3 cycles
// 7487             BAT_CTRL_ENABLE;
        CLR1      S:0xFFF07.4        ;; 2 cycles
// 7488             Self_Programming_main();
          CFI FunCall _Self_Programming_main
        CALL      _Self_Programming_main  ;; 3 cycles
// 7489             BAT_CTRL_DISABLE;
        SET1      S:0xFFF07.4        ;; 2 cycles
        BR        S:??dlms_reset_data_775  ;; 3 cycles
        ; ------------------------------------- Block: 16 cycles
// 7490           }
// 7491           else
// 7492           {
// 7493             conf_err(0x0C);
??dlms_reset_data_778:
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7494             return 0;
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7495           }
// 7496         }
// 7497         
// 7498         if((attribute_id == 9) && (asso3_flag == 1 || asso2_flag == 1)) /* reset only tamper data */
??dlms_reset_data_775:
        CMP       N:_attribute_id, #0x9  ;; 1 cycle
        BNZ       ??dlms_reset_data_779  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso3_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_780  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_779  ;; 4 cycles
          CFI FunCall _memory_log_reset
        ; ------------------------------------- Block: 5 cycles
// 7499         {
// 7500           memory_log_reset();
??dlms_reset_data_780:
        CALL      _memory_log_reset  ;; 3 cycles
// 7501           mem_log1(COMPART_TRANSACTION,198);
        MOVW      BC, #0xC6          ;; 1 cycle
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _mem_log1
        CALL      _mem_log1          ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7502         }
// 7503         
// 7504         if((attribute_id == 10) && (asso3_flag == 1)) /* reset only tamper data */
??dlms_reset_data_779:
        CMP       N:_attribute_id, #0xA  ;; 1 cycle
        BNZ       ??dlms_reset_data_760  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso3_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_760  ;; 4 cycles
          CFI FunCall _energy_clear
        ; ------------------------------------- Block: 5 cycles
// 7505         {
// 7506           energy_clear();
        CALL      _energy_clear      ;; 3 cycles
        BR        S:??dlms_reset_data_760  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 7507         }
// 7508       }
// 7509       else if((obis_code[0] == 1) && (obis_code[1] == 0) && (obis_code[2] == 96) && (obis_code[3] == 128) && (obis_code[4] == 21) && (obis_code[5] == 255))
??dlms_reset_data_771:
        CMP       N:_obis_code, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_760  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_obis_code+1     ;; 1 cycle
        BNZ       ??dlms_reset_data_760  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+2, #0x60  ;; 1 cycle
        BNZ       ??dlms_reset_data_760  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+3, #0x80  ;; 1 cycle
        BNZ       ??dlms_reset_data_760  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+4, #0x15  ;; 1 cycle
        BNZ       ??dlms_reset_data_760  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+5, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_760  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7510       {
// 7511           if(class_id == 0x01 && attribute_id == 0x01)
        ONEW      AX                 ;; 1 cycle
        CMPW      AX, N:_class_id    ;; 1 cycle
        BNZ       ??dlms_reset_data_781  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        CMP       N:_attribute_id, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_781  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7512           {        
// 7513               if(asso3_flag)
        CMP0      N:_asso3_flag      ;; 1 cycle
        BZ        ??dlms_reset_data_782  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7514               {
// 7515                   soft_reset_f = 1;
        SET1      N:_flag1.6         ;; 2 cycles
        BR        S:??dlms_reset_data_760  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 7516               }
// 7517               else
// 7518               {
// 7519                   conf_err(0x0D);
??dlms_reset_data_782:
        MOV       A, #0xD            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7520                   return 0;
        MOV       A, #0x0            ;; 1 cycle
        BR        N:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7521               }
// 7522           }
// 7523           else 
// 7524           {
// 7525               conf_err(0x0B);
??dlms_reset_data_781:
        MOV       A, #0xB            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7526               return 0;
        MOV       A, #0x0            ;; 1 cycle
        BR        S:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7527           }
// 7528       }
// 7529     }
// 7530     
// 7531     if(four_pass_f == 1)
??dlms_reset_data_760:
        CMP       N:_four_pass_f, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_457  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7532     {
// 7533       if((obis_code[0] == 0) && (obis_code[1] == 0) && (obis_code[2] == 40) && (obis_code[3] == 0) && (obis_code[4] == 0) && (obis_code[5] == 255))
        CMP0      N:_obis_code       ;; 1 cycle
        BNZ       ??dlms_reset_data_457  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_obis_code+1     ;; 1 cycle
        BNZ       ??dlms_reset_data_457  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+2, #0x28  ;; 1 cycle
        BNZ       ??dlms_reset_data_457  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_obis_code+3     ;; 1 cycle
        BNZ       ??dlms_reset_data_457  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP0      N:_obis_code+4     ;; 1 cycle
        BNZ       ??dlms_reset_data_457  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+5, #0xFF  ;; 1 cycle
        BNZ       ??dlms_reset_data_457  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7534       {
// 7535         if(attribute_id == 1)
        CMP       N:_attribute_id, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_457  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7536         {
// 7537           KeyExpansion(aut_pswd1);
        MOVW      AX, #LWRD(_aut_pswd1)  ;; 1 cycle
          CFI FunCall _KeyExpansion
        CALL      _KeyExpansion      ;; 3 cycles
// 7538           Cipher(aut_pswd1_2);
        MOVW      AX, #LWRD(_aut_pswd1_2)  ;; 1 cycle
          CFI FunCall _Cipher
        CALL      _Cipher            ;; 3 cycles
// 7539           if((info[16] != 0x09) || (info[17] != 0x10))
        CMP       N:_info+16, #0x9   ;; 1 cycle
        BNZ       ??dlms_reset_data_783  ;; 4 cycles
        ; ------------------------------------- Block: 13 cycles
        CMP       N:_info+17, #0x10  ;; 1 cycle
        BZ        ??dlms_reset_data_784  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7540           {
// 7541             conf_err(0x0C);
??dlms_reset_data_783:
        MOV       A, #0xC            ;; 1 cycle
          CFI FunCall _conf_err
        CALL      _conf_err          ;; 3 cycles
// 7542             return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        S:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7543           }
// 7544           
// 7545           for(global_i= 0; global_i < 16; global_i++)
??dlms_reset_data_784:
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_global_i, AX    ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??data_dec_84:
        MOVW      AX, N:_global_i    ;; 1 cycle
        CMPW      AX, #0x10          ;; 1 cycle
        BNC       ??dlms_reset_data_785  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 7546           {
// 7547             if(out[global_i] != info[global_i + 18])
        MOVW      BC, N:_global_i    ;; 1 cycle
        MOV       A, (_info+18)[BC]  ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOVW      BC, N:_global_i    ;; 1 cycle
        MOV       A, (_out)[BC]      ;; 1 cycle
        CMP       A, X               ;; 1 cycle
        BZ        ??dlms_reset_data_786  ;; 4 cycles
        ; ------------------------------------- Block: 10 cycles
// 7548             {
// 7549               four_pass_f= 0;
        MOV       N:_four_pass_f, #0x0  ;; 1 cycle
// 7550               return (0);
        MOV       A, #0x0            ;; 1 cycle
        BR        S:??dlms_reset_data_459  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 7551               /* four_pass_f=0; */
// 7552             }
// 7553           }
??dlms_reset_data_786:
        INCW      N:_global_i        ;; 2 cycles
        BR        S:??data_dec_84    ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 7554           cosem_flag= 1;
??dlms_reset_data_785:
        MOV       N:_cosem_flag, #0x1  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 7555         }
// 7556       }
// 7557     }
// 7558     
// 7559     break;
// 7560   default:
// 7561     break;
// 7562   } /* swda */
// 7563   return (1);
??dlms_reset_data_457:
        MOV       A, #0x1            ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??dlms_reset_data_459:
        ADDW      SP, #0x20          ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock81
        ; ------------------------------------- Block: 7 cycles
        ; ------------------------------------- Total: 7881 cycles
        REQUIRE __A_P7
// 7564 }

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock82 Using cfiCommon0
          CFI Function _asso_status
          CFI NoCalls
        CODE
// 7565 void asso_status(void)
// 7566 { /* asso_status */
_asso_status:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 7567   info[k++]= 0x00;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 7568   info[k++]= 0x16; /* enum(0->non_associated,1->association_pending,2->associated) */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x16           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 7569   
// 7570   if(obis_code[4] == 0) /* ifobis0 */
        CMP0      N:_obis_code+4     ;; 1 cycle
        BNZ       ??dlms_reset_data_787  ;; 4 cycles
        ; ------------------------------------- Block: 15 cycles
// 7571   {
// 7572     if((asso0_flag == 1) || (asso1_flag == 1) || (asso2_flag == 1))
        CMP       N:_asso0_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_788  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_788  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_789  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7573     {
// 7574       info[k++]= 0x02;
??dlms_reset_data_788:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x2            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        BR        S:??dlms_reset_data_787  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7575     }
// 7576     else
// 7577     {
// 7578       info[k++]= 0x00;
??dlms_reset_data_789:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        ; ------------------------------------- Block: 5 cycles
// 7579     }
// 7580   } /* ifobis0 */
// 7581   
// 7582   if(obis_code[4] == 1) /* ifobis0 */
??dlms_reset_data_787:
        CMP       N:_obis_code+4, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_790  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7583   {
// 7584     if(asso0_flag == 1)
        CMP       N:_asso0_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_791  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7585     {
// 7586       info[k++]= 0x02;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x2            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        BR        S:??dlms_reset_data_790  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7587     }
// 7588     else
// 7589     {
// 7590       info[k++]= 0x00;
??dlms_reset_data_791:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        ; ------------------------------------- Block: 5 cycles
// 7591     }
// 7592   } /* ifobis0 */
// 7593   
// 7594   if(obis_code[4] == 2) /* ifobis0 */
??dlms_reset_data_790:
        CMP       N:_obis_code+4, #0x2  ;; 1 cycle
        BNZ       ??dlms_reset_data_792  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7595   {
// 7596     if(asso1_flag == 1)
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_793  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7597     {
// 7598       info[k++]= 0x02;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x2            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        BR        S:??dlms_reset_data_792  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 7599     }
// 7600     else
// 7601     {
// 7602       info[k++]= 0x00;
??dlms_reset_data_793:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        ; ------------------------------------- Block: 5 cycles
// 7603     }
// 7604   } /* ifobis0 */
// 7605   
// 7606   if(obis_code[4] == 3) /* ifobis0 */
??dlms_reset_data_792:
        CMP       N:_obis_code+4, #0x3  ;; 1 cycle
        BNZ       ??dlms_reset_data_794  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7607   {
// 7608     if(asso2_flag == 1)
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_795  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7609     {
// 7610       info[k++]= 0x02;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x2            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        RET                          ;; 6 cycles
        ; ------------------------------------- Block: 11 cycles
// 7611     }
// 7612     else
// 7613     {
// 7614       info[k++]= 0x00;
??dlms_reset_data_795:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
        ; ------------------------------------- Block: 5 cycles
// 7615     }
// 7616   } /* ifobis0 */
// 7617   
// 7618   /* 130807 info_total=k; */
// 7619 } /* asso_stat`s */
??dlms_reset_data_794:
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock82
        ; ------------------------------------- Block: 6 cycles
        ; ------------------------------------- Total: 121 cycles
// 7620 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock83 Using cfiCommon0
          CFI Function _object_list
        CODE
// 7621 void object_list(void) /* object_list for association_1 */
// 7622 {
_object_list:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 8
        SUBW      SP, #0x8           ;; 1 cycle
          CFI CFA SP+12
// 7623   /* ******************************* */
// 7624   uint16_t buffer_filled_u16= 0, m_element_2fill= 0, temp_buff_size= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [SP+0x06], AX      ;; 1 cycle
// 7625   unsigned char u8temp= 0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x04], A       ;; 1 cycle
// 7626   k= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 7627   if(asso0_flag == 1)
        CMP       N:_asso0_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_796  ;; 4 cycles
          CFI FunCall _Start_Info
        ; ------------------------------------- Block: 16 cycles
// 7628   {
// 7629     Start_Info();
        CALL      _Start_Info        ;; 3 cycles
// 7630     k= 7;
        MOVW      AX, #0x7           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
        BR        S:??dlms_reset_data_797  ;; 3 cycles
          CFI FunCall _Start_Info2
        ; ------------------------------------- Block: 8 cycles
// 7631   }
// 7632   else
// 7633   {
// 7634     Start_Info2();
??dlms_reset_data_796:
        CALL      _Start_Info2       ;; 3 cycles
// 7635     k= 15;
        MOVW      AX, #0xF           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
        ; ------------------------------------- Block: 5 cycles
// 7636   }
// 7637   
// 7638   buffer_filled_u16= k;
??dlms_reset_data_797:
        MOVW      AX, N:_k           ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 7639   if(buffer_first_not_fill_f == 0)
        CMP0      N:_buffer_first_not_fill_f  ;; 1 cycle
        BNZ       ??dlms_reset_data_798  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 7640   {
// 7641     if((asso2_flag == 1))
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_799  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7642     {
// 7643       if(1 == CUM_MAX_DEMAND)
        CMP       N:_CUM_MAX_DEMAND, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_800  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7644       {
// 7645         array((OBJ_LIST[2] - 1), 0);
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, N:_OBJ_LIST+2   ;; 1 cycle
        DEC       A                  ;; 1 cycle
          CFI FunCall _array
        CALL      _array             ;; 3 cycles
        BR        S:??dlms_reset_data_801  ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 7646         
// 7647       }
// 7648       else
// 7649       {
// 7650         array((OBJ_LIST[2] - 3), 0);
??dlms_reset_data_800:
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, N:_OBJ_LIST+2   ;; 1 cycle
        ADD       A, #0xFD           ;; 1 cycle
          CFI FunCall _array
        CALL      _array             ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 7651       }
// 7652       element_filled= 1;
??dlms_reset_data_801:
        MOVW      AX, #0x1           ;; 1 cycle
        MOVW      N:_element_filled, AX  ;; 1 cycle
        BR        S:??dlms_reset_data_802  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 7653     }
// 7654     else if((asso1_flag == 1))
??dlms_reset_data_799:
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_803  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7655     {
// 7656       if(1 == CUM_MAX_DEMAND)
        CMP       N:_CUM_MAX_DEMAND, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_804  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7657       {
// 7658         array((OBJ_LIST[1] - 1), 0);
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, N:_OBJ_LIST+1   ;; 1 cycle
        DEC       A                  ;; 1 cycle
          CFI FunCall _array
        CALL      _array             ;; 3 cycles
        BR        S:??dlms_reset_data_805  ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 7659       }
// 7660       else
// 7661       {
// 7662         array((OBJ_LIST[1] - 3), 0);
??dlms_reset_data_804:
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, N:_OBJ_LIST+1   ;; 1 cycle
        ADD       A, #0xFD           ;; 1 cycle
          CFI FunCall _array
        CALL      _array             ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 7663       }
// 7664       element_filled= 1;
??dlms_reset_data_805:
        MOVW      AX, #0x1           ;; 1 cycle
        MOVW      N:_element_filled, AX  ;; 1 cycle
        BR        S:??dlms_reset_data_802  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 7665     }
// 7666     else
// 7667     {
// 7668       array(OBJ_LIST[0], 0);
??dlms_reset_data_803:
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, N:_OBJ_LIST     ;; 1 cycle
          CFI FunCall _array
        CALL      _array             ;; 3 cycles
// 7669       element_filled= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_element_filled, AX  ;; 1 cycle
        ; ------------------------------------- Block: 7 cycles
// 7670     }
// 7671     
// 7672     block_no= 1;
??dlms_reset_data_802:
        MOVW      AX, #0x1           ;; 1 cycle
        MOVW      N:_block_no, AX    ;; 1 cycle
// 7673     
// 7674     multi_filling_f= 1;
        MOV       N:_multi_filling_f, #0x1  ;; 1 cycle
// 7675     buffer_first_not_fill_f= 1;
        MOV       N:_buffer_first_not_fill_f, #0x1  ;; 1 cycle
// 7676     buffer_filled_u16=k;
        MOVW      AX, N:_k           ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
// 7677   }
// 7678   
// 7679   if(asso1_flag == 1)
??dlms_reset_data_798:
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_806  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7680   {
// 7681     m_element_2fill= OBJ_LIST[1];
        MOV       X, N:_OBJ_LIST+1   ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
        BR        S:??dlms_reset_data_807  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 7682   }
// 7683   else if(asso2_flag == 1)
??dlms_reset_data_806:
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_808  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7684   {
// 7685     m_element_2fill= OBJ_LIST[2];
        MOV       X, N:_OBJ_LIST+2   ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
        BR        S:??dlms_reset_data_807  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 7686   }
// 7687   else
// 7688   {
// 7689     m_element_2fill= OBJ_LIST[0];
??dlms_reset_data_808:
        MOV       X, N:_OBJ_LIST     ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
// 7690   }
// 7691   
// 7692   for(; element_filled < m_element_2fill; element_filled++)
??dlms_reset_data_807:
        MOVW      AX, [SP]           ;; 1 cycle
        MOVW      HL, N:_element_filled  ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        SKH                          ;; 4 cycles
        BR        N:??dlms_reset_data_809  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 7693   {
// 7694     //    if((3==element_filled) && ((asso1_flag==1)||(asso2_flag==1)))
// 7695     //    {
// 7696     //      element_filled++;
// 7697     //    }
// 7698     if((69 == element_filled) && ((asso1_flag == 1) || (asso2_flag == 1)) && (CUM_MAX_DEMAND != 1))
        MOVW      AX, N:_element_filled  ;; 1 cycle
        CMPW      AX, #0x45          ;; 1 cycle
        BNZ       ??dlms_reset_data_810  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_811  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_810  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
??dlms_reset_data_811:
        CMP       N:_CUM_MAX_DEMAND, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_810  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7699     {
// 7700       //element_filled=72;
// 7701       element_filled++;
        INCW      N:_element_filled  ;; 2 cycles
// 7702       element_filled++;
        INCW      N:_element_filled  ;; 2 cycles
        ; ------------------------------------- Block: 4 cycles
// 7703     }
// 7704     
// 7705     buffer_filled_u16+= OBJ_LIST[3 + element_filled * 9];
??dlms_reset_data_810:
        MOVW      AX, N:_element_filled  ;; 1 cycle
        MOVW      BC, #0x9           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_OBJ_LIST+3)[BC]  ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        MOV       H, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        ADDW      AX, HL             ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 7706     class_sel(OBJ_LIST[4 + element_filled * 9], OBJ_LIST[4 + element_filled * 9 + 1],
// 7707               OBJ_LIST[4 + element_filled * 9 + 2], OBJ_LIST[4 + element_filled * 9 + 3],
// 7708               OBJ_LIST[4 + element_filled * 9 + 4], OBJ_LIST[4 + element_filled * 9 + 5],
// 7709               OBJ_LIST[4 + element_filled * 9 + 6], OBJ_LIST[4 + element_filled * 9 + 7]);
        MOVW      AX, N:_element_filled  ;; 1 cycle
        MOVW      BC, #0x9           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_OBJ_LIST+11)[BC]  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        XCH       A, X               ;; 1 cycle
        MOVW      AX, N:_element_filled  ;; 1 cycle
        MOVW      BC, #0x9           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_OBJ_LIST+10)[BC]  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        XCH       A, X               ;; 1 cycle
        MOVW      AX, N:_element_filled  ;; 1 cycle
        MOVW      BC, #0x9           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_OBJ_LIST+9)[BC]  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        XCH       A, X               ;; 1 cycle
        MOVW      AX, N:_element_filled  ;; 1 cycle
        MOVW      BC, #0x9           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_OBJ_LIST+8)[BC]  ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOVW      AX, N:_element_filled  ;; 1 cycle
        MOVW      BC, #0x9           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_OBJ_LIST+7)[BC]  ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOVW      AX, N:_element_filled  ;; 1 cycle
        MOVW      BC, #0x9           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_OBJ_LIST+6)[BC]  ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       H, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOVW      AX, N:_element_filled  ;; 1 cycle
        MOVW      BC, #0x9           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_OBJ_LIST+5)[BC]  ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       H, A               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOVW      AX, N:_element_filled  ;; 1 cycle
        MOVW      BC, #0x9           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_OBJ_LIST+4)[BC]  ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, E               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
        XCH       A, L               ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        XCH       A, L               ;; 1 cycle
          CFI FunCall _class_sel
        CALL      _class_sel         ;; 3 cycles
// 7710     
// 7711     temp_buff_size= (17 + buffer_filled_u16 + OBJ_LIST[3 + (element_filled + 1) * 9]);
        MOVW      AX, N:_element_filled  ;; 1 cycle
        MOVW      BC, #0x9           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      BC, AX             ;; 1 cycle
        MOV       A, (_OBJ_LIST+12)[BC]  ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        MOV       H, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x08]      ;; 1 cycle
        ADDW      AX, HL             ;; 1 cycle
        ADDW      AX, #0x11          ;; 1 cycle
        MOVW      [SP+0x0C], AX      ;; 1 cycle
// 7712     if(DLMS_MAX_BUFF_SIZE < temp_buff_size)
        MOVW      AX, [SP+0x0C]      ;; 1 cycle
        ADDW      SP, #0x6           ;; 1 cycle
          CFI CFA SP+12
        CMPW      AX, #0x201         ;; 1 cycle
        BNC       ??dlms_reset_data_809  ;; 4 cycles
        ; ------------------------------------- Block: 134 cycles
// 7713     {
// 7714       break;
// 7715     }
// 7716   }
        INCW      N:_element_filled  ;; 2 cycles
        BR        N:??dlms_reset_data_807  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 7717   element_filled++;
??dlms_reset_data_809:
        INCW      N:_element_filled  ;; 2 cycles
// 7718   
// 7719   if(element_filled >= m_element_2fill)
        MOVW      AX, [SP]           ;; 1 cycle
        MOVW      HL, N:_element_filled  ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BH        ??dlms_reset_data_812  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 7720   {
// 7721     multi_filling_f= 0;
        MOV       N:_multi_filling_f, #0x0  ;; 1 cycle
// 7722     buffer_first_not_fill_f= 0;
        MOV       N:_buffer_first_not_fill_f, #0x0  ;; 1 cycle
// 7723     u8temp= 1;
        MOV       A, #0x1            ;; 1 cycle
        MOV       [SP+0x04], A       ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
// 7724   }
// 7725   
// 7726   if(asso0_flag != 1)
??dlms_reset_data_812:
        CMP       N:_asso0_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_813  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7727   {
// 7728     info[6]= u8temp;
        MOV       A, [SP+0x04]       ;; 1 cycle
        MOV       N:_info+6, A       ;; 1 cycle
// 7729     info[10]= block_no;
        MOVW      AX, N:_block_no    ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       N:_info+10, A      ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 7730     info[13]= (k - 15) / 256;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0xFFF1        ;; 1 cycle
        CLRB      X                  ;; 1 cycle
        MOV       N:_info+13, A      ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 7731     info[14]= (uint8_t)(k - 15);
        MOVW      AX, N:_k           ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       A, #0xF1           ;; 1 cycle
        MOV       N:_info+14, A      ;; 1 cycle
// 7732     block_no++;
        INCW      N:_block_no        ;; 2 cycles
// 7733     if(block_no == 5)
        MOVW      AX, N:_block_no    ;; 1 cycle
        CMPW      AX, #0x5           ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 20 cycles
// 7734     {
// 7735       NOP();
        NOP                          ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 7736     }
// 7737   }
// 7738   
// 7739   info_send= k;
??dlms_reset_data_813:
        MOVW      AX, N:_k           ;; 1 cycle
        MOVW      N:_info_send, AX   ;; 1 cycle
// 7740   info_sended= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_info_sended, AX  ;; 1 cycle
// 7741   send_type_multi();
          CFI FunCall _send_type_multi
        CALL      _send_type_multi   ;; 3 cycles
// 7742   
// 7743 } /* object_list0 */
        ADDW      SP, #0x8           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock83
        ; ------------------------------------- Block: 14 cycles
        ; ------------------------------------- Total: 358 cycles
// 7744 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock84 Using cfiCommon1
          CFI Function _class_sel
        CODE
// 7745 void class_sel(uint16_t ic, unsigned char ver, unsigned char obis_a, unsigned char obis_b, unsigned char obis_c, unsigned char obis_d, unsigned char obis_e, unsigned char obis_f)
// 7746 { /* class_sel */
_class_sel:
        ; * Stack frame (at entry) *
        ; Param size: 6
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+10
        ; Auto size: 6
// 7747   /* info[k++]=0x02;//structure(object 1)//logical_device_name//1 */
// 7748   /* info[k++]=0x04;//length of structure */
// 7749   structure(0x04);
        MOV       A, #0x4            ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 7750   info[k]= 0x12;         /* long_unsigned16(Interface Class) structure element 1 */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x12           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
// 7751   info[k + 1]= ic / 256; /* 4 */
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        CLRB      X                  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+1)[BC], A   ;; 1 cycle
// 7752   info[k + 2]= ic % 256; /* 5 */
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+2)[BC], A   ;; 1 cycle
// 7753   info[k + 3]= 0x11;     /* unsigned8(version)//structure element 2 */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x11           ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
// 7754   info[k + 4]= ver;      /* 7 */
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+4)[BC], A   ;; 1 cycle
// 7755   /* k=k+5; */
// 7756   info_l5();
          CFI FunCall _info_l5
        CALL      _info_l5           ;; 3 cycles
// 7757   obiscode(obis_a, obis_b, obis_c, obis_d, obis_e, obis_f);
        MOV       A, [SP+0x0E]       ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, [SP+0x0C]       ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       A, [SP+0x0A]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x03]       ;; 1 cycle
          CFI FunCall _obiscode
        CALL      _obiscode          ;; 3 cycles
// 7758   /* info[k++]=0x02;//struct(access rights) structure element 4 */
// 7759   /* info[k++]=0x02;//length of structure */
// 7760   structure(0x02);
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 7761   info[k++]= 0x01; /* array(attribute access descriptor) */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x1            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 7762   
// 7763   switch(ic) /* swic */
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        MOVW      HL, #LWRD(??class_sel_0)  ;; 1 cycle
        MOV       ES, #BYTE3(??class_sel_0)  ;; 1 cycle
        MOV       CS, #BYTE3(_class_sel)  ;; 1 cycle
        BR        N:?I_VSWITCH_L10   ;; 3 cycles
        ; ------------------------------------- Block: 59 cycles
// 7764   {
// 7765   case 1: /* data class */
// 7766     /*			cnt_att=2; */
// 7767     if((asso2_flag == 1) && ((obis_d == 8) || (obis_d == 128))) /* ((obis_a==0x01)&&(obis_b==0x00)&&(obis_c==0x00)&&(obis_d==0x08)&&((obis_e==0x00)||(obis_e==0x04)))) */
??class_sel_1:
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_814  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOV       A, [SP+0x0A]       ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        BZ        ??dlms_reset_data_815  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x0A]       ;; 1 cycle
        CMP       A, #0x80           ;; 1 cycle
        BNZ       ??dlms_reset_data_814  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 7768     {
// 7769       access_rights(2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); /* meter_id */
??dlms_reset_data_815:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x0            ;; 1 cycle
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x3            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x2           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        S:??dlms_reset_data_816  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7770     }
// 7771     else
// 7772     {
// 7773       access_rights(2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); /* meter_id */
??dlms_reset_data_814:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x0            ;; 1 cycle
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x2           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        ; ------------------------------------- Block: 35 cycles
// 7774     }
// 7775     
// 7776     break;
??dlms_reset_data_816:
        BR        N:??dlms_reset_data_817  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 7777   case 3: /* register class */
// 7778     /* cnt_att=3; */
// 7779     //        if((obis_a == 0x00) && (obis_b == 0x00) && (obis_c == 0x00) && (obis_d == 0x01) && (obis_e == 0x02) && (obis_f == 0xff))
// 7780     //        {
// 7781     //            access_rights(3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
// 7782     //        }
// 7783     //        else
// 7784     //        {
// 7785     access_rights(3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
??class_sel_2:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x0            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x3           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
// 7786     //        }
// 7787     
// 7788     break;
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        N:??dlms_reset_data_817  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7789   case 4: /* extended register class */
// 7790     /* cnt_att=5; */
// 7791     if((obis_a == 0x01) && ((obis_c == 0x01) || (obis_c == 0x09)) && (obis_d == 0x06))
??class_sel_3:
        MOV       A, [SP+0x03]       ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_818  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BZ        ??dlms_reset_data_819  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, #0x9            ;; 1 cycle
        BNZ       ??dlms_reset_data_818  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
??dlms_reset_data_819:
        MOV       A, [SP+0x0A]       ;; 1 cycle
        CMP       A, #0x6            ;; 1 cycle
        BNZ       ??dlms_reset_data_818  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 7792     {
// 7793       access_rights(5, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x0            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x5           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        S:??dlms_reset_data_820  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7794     }
// 7795     else
// 7796     {
// 7797       access_rights(5, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
??dlms_reset_data_818:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x1            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x5           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        ; ------------------------------------- Block: 35 cycles
// 7798     }
// 7799     
// 7800     break;
??dlms_reset_data_820:
        BR        N:??dlms_reset_data_817  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 7801   case 5: /* Demand Register */
// 7802     /* cnt_att=9; */
// 7803     access_rights(9, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0);
??class_sel_4:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x1            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x9           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
// 7804     break;
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        N:??dlms_reset_data_817  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7805   case 6: /* register activation class */
// 7806     /* cnt_att=4; */
// 7807     access_rights(4, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
??class_sel_5:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x1            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x4           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
// 7808     break;
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        N:??dlms_reset_data_817  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7809   case 7: /* profile generic class */
// 7810     /* cnt_att=8; */
// 7811     if((asso1_flag == 1) || (asso2_flag == 1))
??class_sel_6:
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_821  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_822  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7812     {
// 7813       if((obis_c == 0x63) && ((obis_d == 0x01) || (obis_d == 0x02))) /* ||((obis_c == 0x63)&&(obis_d == 0x62)&&(obis_e == 0x04))) */
??dlms_reset_data_821:
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, #0x63           ;; 1 cycle
        BNZ       ??dlms_reset_data_823  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x0A]       ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BZ        ??dlms_reset_data_824  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x0A]       ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BNZ       ??dlms_reset_data_823  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 7814       {
// 7815         access_rights(8, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0);
??dlms_reset_data_824:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x1            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x8           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        N:??dlms_reset_data_817  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7816       }
// 7817       else if(((obis_c == 0x63) && (obis_d == 0x62))) /* &&(obis_e != 0x02)&&(obis_e != 0x05) */
??dlms_reset_data_823:
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, #0x63           ;; 1 cycle
        BNZ       ??dlms_reset_data_825  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x0A]       ;; 1 cycle
        CMP       A, #0x62           ;; 1 cycle
        BNZ       ??dlms_reset_data_825  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 7818       {
// 7819         access_rights(8, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x2            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x1            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x8           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        N:??dlms_reset_data_817  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7820       }
// 7821       else if((obis_c == 0x62) && (obis_d == 0x01))
??dlms_reset_data_825:
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, #0x62           ;; 1 cycle
        BNZ       ??dlms_reset_data_826  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x0A]       ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_826  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 7822       {
// 7823         access_rights(8, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x2            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x1            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x8           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        S:??dlms_reset_data_827  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7824       }
// 7825       else
// 7826       {
// 7827         access_rights(8, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0);
??dlms_reset_data_826:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x1            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x8           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        S:??dlms_reset_data_827  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7828       }
// 7829     }
// 7830     else
// 7831     {
// 7832       access_rights(8, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0);
??dlms_reset_data_822:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x1            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x8           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        ; ------------------------------------- Block: 35 cycles
// 7833     }
// 7834     
// 7835     break;
??dlms_reset_data_827:
        BR        N:??dlms_reset_data_817  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 7836   case 8: /* clock class */
// 7837     /* cnt_att=9; */
// 7838     if(asso2_flag == 1)
??class_sel_7:
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_828  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7839     {
// 7840       access_rights(9, 1, 3, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0); /* clock */
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x1            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x3            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x9           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        S:??dlms_reset_data_829  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7841     }
// 7842     else
// 7843     {
// 7844       access_rights(9, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0); /* clock */
??dlms_reset_data_828:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x1            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x9           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        ; ------------------------------------- Block: 35 cycles
// 7845     }
// 7846     
// 7847     break;
??dlms_reset_data_829:
        BR        N:??dlms_reset_data_817  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 7848   case 9: /* script table class */
// 7849     /* cnt_att=2; */
// 7850     access_rights(2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
??class_sel_8:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x0            ;; 1 cycle
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x2           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
// 7851     break;
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        N:??dlms_reset_data_817  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7852   case 11: /* special days table class */
// 7853     /* cnt_att=2; */
// 7854     if(asso0_flag == 1)
??class_sel_9:
        CMP       N:_asso0_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_830  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7855     {
// 7856       access_rights(2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); /*  */
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x0            ;; 1 cycle
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x2           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        S:??dlms_reset_data_831  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7857     }
// 7858     else
// 7859     {
// 7860       access_rights(2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); /*  */
??dlms_reset_data_830:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x0            ;; 1 cycle
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x2           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        ; ------------------------------------- Block: 35 cycles
// 7861     }
// 7862     
// 7863     break;
??dlms_reset_data_831:
        BR        N:??dlms_reset_data_817  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 7864   case 20: /* activity calender class */
// 7865     /* cnt_att=10; */
// 7866     if(asso2_flag == 1)
??class_sel_10:
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_832  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7867     {
// 7868       access_rights(10, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x3            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x3            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x3            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x3            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x3            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x1            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0xA           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        S:??dlms_reset_data_833  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7869     }
// 7870     else
// 7871     {
// 7872       access_rights(10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0); /* (10,1,1,1,1,1,0,0,0,0,0,0);//(10,1,3,3,3,3,3,1,1,1,3); */
??dlms_reset_data_832:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x1            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0xA           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        ; ------------------------------------- Block: 35 cycles
// 7873     }
// 7874     
// 7875     break;
??dlms_reset_data_833:
        BR        N:??dlms_reset_data_817  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 7876   case 15: /* association LN class */
// 7877     /* cnt_att=8; */
// 7878     if((asso1_flag == 1) && (obis_c == 0x28) && (obis_e == 0x01))
??class_sel_11:
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_834  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, #0x28           ;; 1 cycle
        BNZ       ??dlms_reset_data_834  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x0C]       ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_834  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 7879     {
// 7880       access_rights(9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x0            ;; 1 cycle
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x9           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        N:??dlms_reset_data_817  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7881     }
// 7882     else if((asso2_flag == 1) && (obis_c == 0x28) && (obis_e == 0x02))
??dlms_reset_data_834:
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_835  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, #0x28           ;; 1 cycle
        BNZ       ??dlms_reset_data_835  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x0C]       ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BNZ       ??dlms_reset_data_835  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 7883     {
// 7884       access_rights(9, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x2            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x0            ;; 1 cycle
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x9           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        N:??dlms_reset_data_817  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7885     }
// 7886     else if((asso2_flag == 1) && (obis_c == 0x28) && (obis_e == 0x03))
??dlms_reset_data_835:
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_836  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       A, #0x28           ;; 1 cycle
        BNZ       ??dlms_reset_data_836  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x0C]       ;; 1 cycle
        CMP       A, #0x3            ;; 1 cycle
        BNZ       ??dlms_reset_data_836  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 7887     {
// 7888       access_rights(9, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 4, 1, 1, 0, 0);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x4            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x1            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x9           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        S:??dlms_reset_data_837  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7889     }
// 7890     else
// 7891     {
// 7892       if((ver==1)&&(asso0_flag!=1))
??dlms_reset_data_836:
        MOV       A, [SP+0x02]       ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_838  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        CMP       N:_asso0_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_838  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7893       {
// 7894         access_rights(9, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x1            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x9           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        S:??dlms_reset_data_837  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7895       }
// 7896       else
// 7897       {
// 7898         access_rights(9, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0);
??dlms_reset_data_838:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x1            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x9           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        ; ------------------------------------- Block: 35 cycles
// 7899       }
// 7900     }
// 7901     
// 7902     break;
??dlms_reset_data_837:
        BR        N:??dlms_reset_data_817  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 7903   case 17: /* SAP assignment class */
// 7904     /* cnt_att=2; */
// 7905     access_rights(2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
??class_sel_12:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x0            ;; 1 cycle
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x2           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
// 7906     break;
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        N:??dlms_reset_data_817  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7907   case 22: /* single action schedule class */
// 7908     /* cnt_att=4; */
// 7909     if(asso2_flag == 1)
??class_sel_13:
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_839  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 7910     {
// 7911       access_rights(4, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x3            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x4           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        S:??dlms_reset_data_840  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7912     }
// 7913     else
// 7914     {
// 7915       access_rights(4, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
??dlms_reset_data_839:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x1            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x4           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        ; ------------------------------------- Block: 35 cycles
// 7916     }
// 7917     
// 7918     /*			if(asso2_flag==1)
// 7919     access_rights(4,1,1,1,3,0,0,0,0,0,0);
// 7920 		                                    else
// 7921     access_rights(4,1,1,1,1,0,0,0,0,0,0);*/
// 7922     break;
??dlms_reset_data_840:
        BR        N:??dlms_reset_data_817  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 7923   case 19: /* IEC local port setup */
// 7924     /* cnt_att=9; */
// 7925     access_rights(9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0);
??class_sel_14:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x1            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x9           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
// 7926     break;
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        N:??dlms_reset_data_817  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7927   case 23: /* IEC HDLC setup class */
// 7928     /* cnt_att=9; */
// 7929     access_rights(9, 1, 1, 1, 1, 1, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0);
??class_sel_15:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x3            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x1            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x9           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
// 7930     
// 7931     /*			if(asso2_flag==1)
// 7932     access_rights(9,1,1,1,1,1,1,1,1,3,0);
// 7933 		                                    else
// 7934     access_rights(9,1,1,1,1,1,1,1,1,1,0); */
// 7935     break;
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        N:??dlms_reset_data_817  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7936   case 27: /* PSTN modem configuration */
// 7937     /* cnt_att=4; */
// 7938     access_rights(4, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
??class_sel_16:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x1            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x4           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
// 7939     break;
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        N:??dlms_reset_data_817  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7940   case 28: /* PSTN auto answer */
// 7941     /* cnt_att=6; */
// 7942     access_rights(6, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0);
??class_sel_17:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x1            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x1            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x6           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
// 7943     /*access_rights(6,1,1,1,1,1,1,0,0,0,0);*/
// 7944     break;
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        S:??dlms_reset_data_817  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7945   case 63: /* status mapping */
// 7946     if(obis_e == 0x04)
??class_sel_18:
        MOV       A, [SP+0x0C]       ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        BNZ       ??dlms_reset_data_841  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 7947     {
// 7948       access_rights(3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x0            ;; 1 cycle
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x3           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        BR        S:??dlms_reset_data_817  ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 7949     }
// 7950     else
// 7951     {
// 7952       access_rights(3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
??dlms_reset_data_841:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       D, #0x0            ;; 1 cycle
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x1            ;; 1 cycle
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x3           ;; 1 cycle
          CFI FunCall _access_rights
        CALL      _access_rights     ;; 3 cycles
        ADDW      SP, #0x1A          ;; 1 cycle
          CFI CFA SP+10
        ; ------------------------------------- Block: 35 cycles
// 7953     }
// 7954     
// 7955     break;
// 7956   default:
// 7957     break;
// 7958   } /* swic */
// 7959   
// 7960 } /* class_sel */
??dlms_reset_data_817:
        ADDW      SP, #0x6           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock84
        ; ------------------------------------- Block: 7 cycles
        ; ------------------------------------- Total: 1498 cycles
// 7961 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock85 Using cfiCommon1
          CFI Function _access_rights
        CODE
// 7962 void access_rights(uint16_t cnt_att, unsigned char att1, unsigned char att2, unsigned char att3, unsigned char att4, unsigned char att5, unsigned char att6, unsigned char att7, unsigned char att8, unsigned char att9, unsigned char att10, unsigned char att11, unsigned char sec_ass, unsigned char method, unsigned char m1, unsigned char m2, unsigned char m3, unsigned char m4)
// 7963 { /* access_rights */
_access_rights:
        ; * Stack frame (at entry) *
        ; Param size: 26
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+10
        ; Auto size: 10
        SUBW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+14
// 7964   uint16_t at;
// 7965   unsigned char i_f;
// 7966   info[k++]= cnt_att; /* length of array which shows attribute */
        MOVW      AX, [SP+0x08]      ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 7967   
// 7968   for(at= 0; at < cnt_att; at++) /* foracce */
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
        ; ------------------------------------- Block: 12 cycles
??access_rights_1:
        MOVW      AX, [SP+0x08]      ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_842  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 7969   {
// 7970     structure(0x03);
        MOV       A, #0x3            ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 7971     info[k]= 0x0F;       /* integer */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xF            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
// 7972     info[k + 1]= at + 1; /* attribute_id-->1 */
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+1)[BC], A   ;; 1 cycle
// 7973     info[k + 2]= 0x16;   /* enum */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x16           ;; 1 cycle
        MOV       (_info+2)[BC], A   ;; 1 cycle
// 7974     switch(at)           /* swat */
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      HL, #LWRD(??access_rights_0)  ;; 1 cycle
        MOV       ES, #BYTE3(??access_rights_0)  ;; 1 cycle
        MOV       CS, #BYTE3(_access_rights)  ;; 1 cycle
        BR        N:?I_SSWITCH_L10   ;; 3 cycles
        ; ------------------------------------- Block: 22 cycles
// 7975     {
// 7976     case 0:
// 7977       info[k + 3]= att1;
??access_rights_2:
        MOV       A, [SP+0x06]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
// 7978       break;
        BR        S:??dlms_reset_data_843  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 7979     case 1:
// 7980       info[k + 3]= att2;
??access_rights_3:
        MOV       A, [SP+0x07]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
// 7981       break;
        BR        S:??dlms_reset_data_843  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 7982     case 2:
// 7983       info[k + 3]= att3;
??access_rights_4:
        MOV       A, [SP+0x04]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
// 7984       break;
        BR        S:??dlms_reset_data_843  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 7985     case 3:
// 7986       info[k + 3]= att4;
??access_rights_5:
        MOV       A, [SP+0x05]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
// 7987       break;
        BR        S:??dlms_reset_data_843  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 7988     case 4:
// 7989       info[k + 3]= att5;
??access_rights_6:
        MOV       A, [SP+0x0E]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
// 7990       break;
        BR        S:??dlms_reset_data_843  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 7991     case 5:
// 7992       info[k + 3]= att6;
??access_rights_7:
        MOV       A, [SP+0x10]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
// 7993       break;
        BR        S:??dlms_reset_data_843  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 7994     case 6:
// 7995       info[k + 3]= att7;
??access_rights_8:
        MOV       A, [SP+0x12]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
// 7996       break;
        BR        S:??dlms_reset_data_843  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 7997     case 7:
// 7998       info[k + 3]= att8;
??access_rights_9:
        MOV       A, [SP+0x14]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
// 7999       break;
        BR        S:??dlms_reset_data_843  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 8000     case 8:
// 8001       info[k + 3]= att9;
??access_rights_10:
        MOV       A, [SP+0x16]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
// 8002       break;
        BR        S:??dlms_reset_data_843  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 8003     case 9:
// 8004       info[k + 3]= att10;
??access_rights_11:
        MOV       A, [SP+0x18]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
// 8005       break;
        BR        S:??dlms_reset_data_843  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 8006     case 10:
// 8007       info[k + 3]= att11;
??access_rights_12:
        MOV       A, [SP+0x1A]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
// 8008       break;
        ; ------------------------------------- Block: 3 cycles
// 8009     default:
// 8010       break;
// 8011     } /* swat */
// 8012     if((at == 1) && (sec_ass != 0))
??dlms_reset_data_843:
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        CMPW      AX, #0x1           ;; 1 cycle
        BNZ       ??dlms_reset_data_844  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, [SP+0x1C]       ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BZ        ??dlms_reset_data_844  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 8013     {
// 8014       info[k + 4]= 0x01;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x1            ;; 1 cycle
        MOV       (_info+4)[BC], A   ;; 1 cycle
// 8015       info[k + 5]= 0x01;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x1            ;; 1 cycle
        MOV       (_info+5)[BC], A   ;; 1 cycle
// 8016       info[k + 6]= 0x0f;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xF            ;; 1 cycle
        MOV       (_info+6)[BC], A   ;; 1 cycle
// 8017       info[k + 7]= sec_ass;
        MOV       A, [SP+0x1C]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+7)[BC], A   ;; 1 cycle
// 8018       k= k + 3;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x3           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
        BR        S:??dlms_reset_data_845  ;; 3 cycles
        ; ------------------------------------- Block: 18 cycles
// 8019     }
// 8020     else
// 8021     {
// 8022       info[k + 4]= 0x00; /* no_access_selector */
??dlms_reset_data_844:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info+4)[BC], A   ;; 1 cycle
          CFI FunCall _info_l5
        ; ------------------------------------- Block: 3 cycles
// 8023     }
// 8024     
// 8025     info_l5();
??dlms_reset_data_845:
        CALL      _info_l5           ;; 3 cycles
// 8026   } /* foracce */
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
        BR        N:??access_rights_1  ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 8027   
// 8028   info[k++]= 0x01; /* method_access_descriptor */
??dlms_reset_data_842:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x1            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 8029   info[k++]= method;
        MOV       A, [SP+0x1E]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 8030   for(i_f= 0; i_f < method; i_f++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 12 cycles
??access_rights_13:
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x1E]       ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BNC       ??dlms_reset_data_846  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 8031   {
// 8032     structure(2);
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 8033     info[k]= 0x0f;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xF            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
// 8034     info[k + 1]= i_f + 1;
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+1)[BC], A   ;; 1 cycle
// 8035     info[k + 2]= 0x16;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x16           ;; 1 cycle
        MOV       (_info+2)[BC], A   ;; 1 cycle
// 8036     switch(i_f) /* swat */
        MOV       A, [SP]            ;; 1 cycle
        CMP0      A                  ;; 1 cycle
        BZ        ??dlms_reset_data_847  ;; 4 cycles
        ; ------------------------------------- Block: 20 cycles
        DEC       A                  ;; 1 cycle
        BZ        ??dlms_reset_data_848  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        DEC       A                  ;; 1 cycle
        BZ        ??dlms_reset_data_849  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        DEC       A                  ;; 1 cycle
        BZ        ??dlms_reset_data_850  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        BR        S:??dlms_reset_data_851  ;; 3 cycles
        ; ------------------------------------- Block: 3 cycles
// 8037     {
// 8038     case 0:
// 8039       info[k + 3]= m1;
??dlms_reset_data_847:
        MOV       A, [SP+0x20]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
// 8040       break;
        BR        S:??dlms_reset_data_851  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 8041     case 1:
// 8042       info[k + 3]= m2;
??dlms_reset_data_848:
        MOV       A, [SP+0x22]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
// 8043       break;
        BR        S:??dlms_reset_data_851  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 8044     case 2:
// 8045       info[k + 3]= m3;
??dlms_reset_data_849:
        MOV       A, [SP+0x24]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
// 8046       break;
        BR        S:??dlms_reset_data_851  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 8047     case 3:
// 8048       info[k + 3]= m4;
??dlms_reset_data_850:
        MOV       A, [SP+0x26]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
// 8049       break;
        ; ------------------------------------- Block: 3 cycles
// 8050     default:
// 8051       break;
// 8052     } /* swat */
// 8053     /* info[k+3]=access[i_f]; */
// 8054     k= k + 4;
??dlms_reset_data_851:
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0x4           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 8055   }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??access_rights_13  ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 8056 } /* access_rights */
??dlms_reset_data_846:
        ADDW      SP, #0xA           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock85
        ; ------------------------------------- Block: 7 cycles
        ; ------------------------------------- Total: 242 cycles
// 8057 
// 8058 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock86 Using cfiCommon0
          CFI Function _app_con
        CODE
// 8059 void app_con(void)
// 8060 { /* app_con */
_app_con:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 2
        SUBW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+6
// 8061   unsigned char u8i;
// 8062   for(u8i= 0; u8i < 14; u8i++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
??app_con_0:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0xE            ;; 1 cycle
        BNC       ??dlms_reset_data_852  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 8063   {
// 8064     info[k++]= *(auth_fill + u8i);
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_auth_fill)[B]  ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 8065   }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??app_con_0      ;; 3 cycles
        ; ------------------------------------- Block: 13 cycles
// 8066   /*	info[k++]=0x00;
// 8067   info[k++]=0x02;//structure
// 8068   info[k++]=0x07;//length of structure
// 8069   info[k++]=0x11;//joint-iso-ctt-ele(unsigned)
// 8070   info[k++]=0x02;//joint-iso-ctt-ele[0]
// 8071   info[k++]=0x11;//country-ele(unsigned)
// 8072   info[k++]=0x10;//country-ele[0]
// 8073   info[k++]=0x12;//country-name-ele(long-unsigned)
// 8074   info[k++]=0x02;//country-name-ele[0]
// 8075   info[k++]=0xF4;//country-name-ele[1]
// 8076   info[k++]=0x11;//idea_org_ele(unsigned)
// 8077   info[k++]=0x05;//idea_org_ele[0]
// 8078   info[k++]=0x11;//DLMS_UA_ele(unsigned)
// 8079   info[k++]=0x08;//DLMS_UA_ele[0]
// 8080   */ /* fill_gen(); */
// 8081   info[k]= 0x11;       /* app_con_ele(unsigned) */
??dlms_reset_data_852:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x11           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
// 8082   info[k + 1]= 0x01;   /* app_con_ele[0] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x1            ;; 1 cycle
        MOV       (_info+1)[BC], A   ;; 1 cycle
// 8083   info[k + 2]= 0x11;   /* context_id_ele(unsigned) */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x11           ;; 1 cycle
        MOV       (_info+2)[BC], A   ;; 1 cycle
// 8084   info[k + 3]= 0x01;   /* context_id_ele[0] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x1            ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
// 8085   /* k=k+4; */
// 8086   /* info_total=k; */
// 8087   info_l();
          CFI FunCall _info_l
        CALL      _info_l            ;; 3 cycles
// 8088 } /* app_con */
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock86
        ; ------------------------------------- Block: 22 cycles
        ; ------------------------------------- Total: 44 cycles
// 8089 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock87 Using cfiCommon0
          CFI Function _xdlms_type
        CODE
// 8090 void xdlms_type(void)
// 8091 { /* xdlms_type */
_xdlms_type:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 8092   info[k++]= 0x00;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 8093   structure(0x06);
        MOV       A, #0x6            ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 8094   info[k++]= 0x04;        /* conformance(bit string(24)) */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x4            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 8095   info[k++]= 0x18;        /* length 3 */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x18           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 8096   info[k++]= conf_blk[0]; /* conformance[0] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, N:_conf_blk     ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 8097   info[k++]= conf_blk[1]; /* conformance[1] */
        MOV       A, N:_conf_blk+1   ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 8098   info[k++]= conf_blk[2]; /* conformance[3] */
        MOV       A, N:_conf_blk+2   ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 8099   val_2byt(max_info_rec/256,max_info_rec%256); //max-rec-PDU-size(long-unsigned)
        MOVW      AX, N:_max_info_rec  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOVW      AX, N:_max_info_rec  ;; 1 cycle
        CLRB      X                  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
// 8100   val_2byt(max_info_tra/256,max_info_tra%256); //max-send-PDU-size(long-unsigned)
        MOVW      AX, N:_max_info_tra  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOVW      AX, N:_max_info_tra  ;; 1 cycle
        CLRB      X                  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
// 8101   info[k++]= 0x11;        /* DLMS-version-number(unsigned) */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x11           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 8102   info[k++]= 0x06;        /* DLMS-version-number[0] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x6            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 8103   /*	info[k++]=0x00;//quality-of-service(null)//optional */
// 8104   info[k++]= 0x0F; /* integer8 */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xF            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 8105   info[k++]= 0x00; /* value */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 8106   /*	info[k++]=0x00;//chypering_info(null)//optional */
// 8107   octet_s(0, 0);/* chypering_info(octet-string) */ /* length */
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _octet_s
        CALL      _octet_s           ;; 3 cycles
// 8108   
// 8109   /*	unsigned char i;
// 8110   for(i=0;i<20;i++)
// 8111   info[k++] = *(Xdlms_type + i);
// 8112   */
// 8113   /* 130807 info_total=k; */
// 8114 } /* xdlms_type */
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock87
        ; ------------------------------------- Block: 93 cycles
        ; ------------------------------------- Total: 93 cycles
// 8115 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock88 Using cfiCommon0
          CFI Function _auth_name
        CODE
// 8116 void auth_name(void)
// 8117 { /* auth_name */
_auth_name:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 2
        SUBW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+6
// 8118   unsigned char u8i;
// 8119   for(u8i= 0; u8i < 14; u8i++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 3 cycles
??auth_name_0:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0xE            ;; 1 cycle
        BNC       ??dlms_reset_data_853  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 8120   {
// 8121     info[k++]= *(auth_fill + u8i);
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_auth_fill)[B]  ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 8122   }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??auth_name_0    ;; 3 cycles
        ; ------------------------------------- Block: 13 cycles
// 8123   /*	info[k++]=0x00;
// 8124   info[k++]=0x02;//structure
// 8125   info[k++]=0x07;//length of structure
// 8126   info[k++]=0x11;//joint-iso-ctt-ele(unsigned)
// 8127   info[k++]=0x02;//joint-iso-ctt-ele[0]
// 8128   info[k++]=0x11;//country-ele(unsigned)
// 8129   info[k++]=0x10;//country-ele[0]
// 8130   info[k++]=0x12;//country-name-ele(long-unsigned)
// 8131   info[k++]=0x02;//country-name-ele[0]
// 8132   info[k++]=0xF4;//country-name-ele[1]
// 8133   info[k++]=0x11;//idea_org_ele(unsigned)
// 8134   info[k++]=0x05;//idea_org_ele[0]
// 8135   info[k++]=0x11;//DLMS_UA_ele(unsigned)
// 8136   info[k++]=0x08;//DLMS_UA_ele[0]
// 8137   */ /*	fill_gen(); */
// 8138   info[k]= 0x11;       /* aut-mech-name(unsigned) */
??dlms_reset_data_853:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x11           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
// 8139   info[k + 1]= 0x02;   /* aut-mech-name[0] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x2            ;; 1 cycle
        MOV       (_info+1)[BC], A   ;; 1 cycle
// 8140   info[k + 2]= 0x11;   /* aut-mech-id(unsigned) */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x11           ;; 1 cycle
        MOV       (_info+2)[BC], A   ;; 1 cycle
// 8141   /*if(obis_code[4]==0)//without_security
// 8142   info[k+3]=0x00;//aut-mech-id[0]
// 8143 	         else//low_level_security
// 8144   info[k+3]=0x01;//aut-mech-id[0]*/
// 8145   if((asso1_flag == 1) || (asso3_flag == 1))
        CMP       N:_asso1_flag, #0x1  ;; 1 cycle
        BZ        ??dlms_reset_data_854  ;; 4 cycles
        ; ------------------------------------- Block: 14 cycles
        CMP       N:_asso3_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_855  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8146   {
// 8147     info[k + 3]= 0x01;
??dlms_reset_data_854:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x1            ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
        BR        S:??dlms_reset_data_856  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 8148   }
// 8149   else if(asso2_flag == 1)
??dlms_reset_data_855:
        CMP       N:_asso2_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_857  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8150   {
// 8151     info[k + 3]= 0x02;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x2            ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
        BR        S:??dlms_reset_data_856  ;; 3 cycles
        ; ------------------------------------- Block: 6 cycles
// 8152   }
// 8153   else
// 8154   {
// 8155     info[k + 3]= 0x00;
??dlms_reset_data_857:
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
          CFI FunCall _info_l
        ; ------------------------------------- Block: 3 cycles
// 8156   }
// 8157   
// 8158   /* k=k+4; */
// 8159   /* info_total=k; */
// 8160   info_l();
??dlms_reset_data_856:
        CALL      _info_l            ;; 3 cycles
// 8161 } /* auth_name */
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock88
        ; ------------------------------------- Block: 10 cycles
        ; ------------------------------------- Total: 71 cycles
// 8162 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock89 Using cfiCommon0
          CFI Function _sap_assg_list
        CODE
// 8163 void sap_assg_list(void)
// 8164 {                    /* sap__assg_list */
_sap_assg_list:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 0
// 8165   array(0x03, 1);  /* length of array */
        MOV       X, #0x1            ;; 1 cycle
        MOV       A, #0x3            ;; 1 cycle
          CFI FunCall _array
        CALL      _array             ;; 3 cycles
// 8166   structure(0x02); /* length of structure */
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 8167   long_unsign();   /* SAP address(long_unsigned) */
          CFI FunCall _long_unsign
        CALL      _long_unsign       ;; 3 cycles
// 8168   info[k++]= 0x01; /* SAP address[1] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x1            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 8169   
// 8170   logical_device_name(2);
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _logical_device_name
        CALL      _logical_device_name  ;; 3 cycles
// 8171   
// 8172   /*	k=k+7; */
// 8173   
// 8174   structure(0x02);
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 8175   long_unsign();
          CFI FunCall _long_unsign
        CALL      _long_unsign       ;; 3 cycles
// 8176   info[k++]= 0x10; /* SAP address[1] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x10           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 8177   logical_device_name(0);
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _logical_device_name
        CALL      _logical_device_name  ;; 3 cycles
// 8178   
// 8179   structure(0x02);
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 8180   long_unsign();
          CFI FunCall _long_unsign
        CALL      _long_unsign       ;; 3 cycles
// 8181   info[k++]= 0x20; /* SAP address[1] */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x20           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 8182   logical_device_name(1);
        MOV       A, #0x1            ;; 1 cycle
          CFI FunCall _logical_device_name
        CALL      _logical_device_name  ;; 3 cycles
// 8183   /*	k=k+7; */
// 8184   
// 8185 }
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock89
        ; ------------------------------------- Block: 59 cycles
        ; ------------------------------------- Total: 59 cycles
// 8186 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock90 Using cfiCommon1
          CFI Function _profile_sel
        CODE
// 8187 void profile_sel(uint16_t ic, unsigned char att, unsigned char obis_a, unsigned char obis_b, unsigned char obis_c, unsigned char obis_d, unsigned char obis_e, unsigned char obis_f)
// 8188 { /* profile_sel */
_profile_sel:
        ; * Stack frame (at entry) *
        ; Param size: 6
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+10
        ; Auto size: 6
// 8189   /* info[k++]=0x02;//structure */
// 8190   /* info[k++]=0x04;//length of structure */
// 8191   structure(0x04);
        MOV       A, #0x4            ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
// 8192   info[k++]= 0x12;     /* IC(long_unsigned) */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x12           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 8193   info[k++]= ic / 256; /* data class */
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        CLRB      X                  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 8194   info[k++]= ic % 256; /* data class */
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 8195   obiscode(obis_a, obis_b, obis_c, obis_d, obis_e, obis_f);
        MOV       A, [SP+0x0E]       ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, [SP+0x0C]       ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       A, [SP+0x0A]       ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x03]       ;; 1 cycle
          CFI FunCall _obiscode
        CALL      _obiscode          ;; 3 cycles
// 8196   info[k]= 0x0F;     /* attribute index(integer8) */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0xF            ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
// 8197   info[k + 1]= att;  /* attribute */
        MOV       A, [SP+0x02]       ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info+1)[BC], A   ;; 1 cycle
// 8198   info[k + 2]= 0x12; /* data index(long unsigned) */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x12           ;; 1 cycle
        MOV       (_info+2)[BC], A   ;; 1 cycle
// 8199   info[k + 3]= 0x00; /*  */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info+3)[BC], A   ;; 1 cycle
// 8200   info[k + 4]= 0x00; /*  */
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV       (_info+4)[BC], A   ;; 1 cycle
// 8201   /* k=k+5; */
// 8202   info_l5();
          CFI FunCall _info_l5
        CALL      _info_l5           ;; 3 cycles
// 8203 } /* profile_sel */
        ADDW      SP, #0x6           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock90
        ; ------------------------------------- Block: 65 cycles
        ; ------------------------------------- Total: 65 cycles
// 8204 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock91 Using cfiCommon0
          CFI Function _inst_data_fill
        CODE
// 8205 void inst_data_fill(void)
// 8206 {
_inst_data_fill:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 8
        SUBW      SP, #0x8           ;; 1 cycle
          CFI CFA SP+12
// 8207   date_time(present_date, present_month, present_year, present_hr, present_min, present_sec, 0x02);
        MOV       X, #0x2            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       A, N:_Now          ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_Now+1        ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_Now+2        ;; 1 cycle
        MOV       C, N:_Now+6        ;; 1 cycle
        MOV       X, N:_Now+5        ;; 1 cycle
        MOV       A, N:_Now+3        ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
// 8208   
// 8209   long_int= curr.Rph.rms_signed;
        MOVW      BC, N:_curr+14     ;; 1 cycle
        MOVW      AX, N:_curr+12     ;; 1 cycle
        MOVW      S:_long_int, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_long_int+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8210   
// 8211   long_into_char_array4(long_int,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, S:_long_int+2  ;; 1 cycle
        MOVW      AX, S:_long_int    ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 8212   val_signed_4byt(char_array[0],char_array[1],char_array[2],char_array[3]);
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_signed_4byt
        CALL      _val_signed_4byt   ;; 3 cycles
// 8213   /* 3 */
// 8214   
// 8215   long_int= curr.Yph.rms_signed;
        MOVW      BC, N:_curr+30     ;; 1 cycle
        MOVW      AX, N:_curr+28     ;; 1 cycle
        MOVW      S:_long_int, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_long_int+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8216   
// 8217   long_into_char_array4(long_int,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, S:_long_int+2  ;; 1 cycle
        MOVW      AX, S:_long_int    ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 8218   val_signed_4byt(char_array[0],char_array[1],char_array[2],char_array[3]);
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_signed_4byt
        CALL      _val_signed_4byt   ;; 3 cycles
// 8219   /* 4 */
// 8220   long_int= curr.Bph.rms_signed;
        MOVW      BC, N:_curr+46     ;; 1 cycle
        MOVW      AX, N:_curr+44     ;; 1 cycle
        MOVW      S:_long_int, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_long_int+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8221   
// 8222   long_into_char_array4(long_int,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, S:_long_int+2  ;; 1 cycle
        MOVW      AX, S:_long_int    ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 8223   val_signed_4byt(char_array[0],char_array[1],char_array[2],char_array[3]);
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_signed_4byt
        CALL      _val_signed_4byt   ;; 3 cycles
// 8224   /* 5 */
// 8225   long_int= vol.Rph.rms;
        MOVW      AX, N:_vol         ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_long_int, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_long_int+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8226   int_into_char_array(long_int,char_array);
        MOVW      BC, #LWRD(_char_array)  ;; 1 cycle
        MOVW      HL, S:_long_int+2  ;; 1 cycle
        MOVW      DE, S:_long_int    ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
          CFI FunCall _int_into_char_array
        CALL      _int_into_char_array  ;; 3 cycles
// 8227   val_2byt(char_array[0], char_array[1]);
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
// 8228   /* 6 */
// 8229   long_int= vol.Yph.rms;
        MOVW      AX, N:_vol+6       ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_long_int, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_long_int+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8230   int_into_char_array(long_int,char_array);
        MOVW      BC, #LWRD(_char_array)  ;; 1 cycle
        MOVW      HL, S:_long_int+2  ;; 1 cycle
        MOVW      DE, S:_long_int    ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
          CFI FunCall _int_into_char_array
        CALL      _int_into_char_array  ;; 3 cycles
// 8231   val_2byt(char_array[0], char_array[1]);
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
// 8232   /* 7 */
// 8233   long_int= vol.Bph.rms;
        MOVW      AX, N:_vol+12      ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_long_int, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_long_int+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8234   int_into_char_array(long_int,char_array);
        MOVW      BC, #LWRD(_char_array)  ;; 1 cycle
        MOVW      HL, S:_long_int+2  ;; 1 cycle
        MOVW      DE, S:_long_int    ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
          CFI FunCall _int_into_char_array
        CALL      _int_into_char_array  ;; 3 cycles
// 8235   val_2byt(char_array[0], char_array[1]);
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
// 8236   /* 8 */
// 8237   signed_integer(pf.Rph_signed);
        MOVW      AX, N:_pf+8        ;; 1 cycle
          CFI FunCall _signed_integer
        CALL      _signed_integer    ;; 3 cycles
// 8238   /* 9 */
// 8239   signed_integer(pf.Yph_signed);
        MOVW      AX, N:_pf+10       ;; 1 cycle
          CFI FunCall _signed_integer
        CALL      _signed_integer    ;; 3 cycles
// 8240   /* 10 */
// 8241   signed_integer(pf.Bph_signed);;
        MOVW      AX, N:_pf+12       ;; 1 cycle
          CFI FunCall _signed_integer
        CALL      _signed_integer    ;; 3 cycles
// 8242   /* 11 */
// 8243   if(METERING_MODE == NET)
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+12
        CMP       N:_METERING_MODE, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_858  ;; 4 cycles
        ; ------------------------------------- Block: 143 cycles
// 8244   {
// 8245     if(quadrant.Allph == Q2 || quadrant.Allph == Q3)
        CMP       N:_quadrant+3, #0x2  ;; 1 cycle
        BZ        ??dlms_reset_data_859  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_quadrant+3, #0x3  ;; 1 cycle
        BNZ       ??dlms_reset_data_860  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8246     {
// 8247       signed_integer(-pf.Net_signed);
??dlms_reset_data_859:
        MOVW      AX, N:_pf+14       ;; 1 cycle
        XOR       A, #0xFF           ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        XOR       A, #0xFF           ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        INCW      AX                 ;; 1 cycle
          CFI FunCall _signed_integer
        CALL      _signed_integer    ;; 3 cycles
        BR        S:??dlms_reset_data_861  ;; 3 cycles
        ; ------------------------------------- Block: 12 cycles
// 8248     }
// 8249     else
// 8250     {
// 8251       signed_integer(pf.Net_signed);
??dlms_reset_data_860:
        MOVW      AX, N:_pf+14       ;; 1 cycle
          CFI FunCall _signed_integer
        CALL      _signed_integer    ;; 3 cycles
        BR        S:??dlms_reset_data_861  ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 8252     }
// 8253   }
// 8254   else
// 8255   {
// 8256     if(quadrant.Allph == Q2 || quadrant.Allph == Q4)
??dlms_reset_data_858:
        CMP       N:_quadrant+3, #0x2  ;; 1 cycle
        BZ        ??dlms_reset_data_862  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_quadrant+3, #0x4  ;; 1 cycle
        BNZ       ??dlms_reset_data_863  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8257     {
// 8258       signed_integer(-pf.Net_signed);
??dlms_reset_data_862:
        MOVW      AX, N:_pf+14       ;; 1 cycle
        XOR       A, #0xFF           ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        XOR       A, #0xFF           ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        INCW      AX                 ;; 1 cycle
          CFI FunCall _signed_integer
        CALL      _signed_integer    ;; 3 cycles
        BR        S:??dlms_reset_data_861  ;; 3 cycles
        ; ------------------------------------- Block: 12 cycles
// 8259     }
// 8260     else
// 8261     {
// 8262       signed_integer(pf.Net_signed);
??dlms_reset_data_863:
        MOVW      AX, N:_pf+14       ;; 1 cycle
          CFI FunCall _signed_integer
        CALL      _signed_integer    ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 8263     }
// 8264   }
// 8265   
// 8266   /* 12 */
// 8267   long_int= freq.Net;
??dlms_reset_data_861:
        MOVW      AX, N:_freq+6      ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_long_int, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_long_int+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8268   int_into_char_array(long_int,char_array);
        MOVW      BC, #LWRD(_char_array)  ;; 1 cycle
        MOVW      HL, S:_long_int+2  ;; 1 cycle
        MOVW      DE, S:_long_int    ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
          CFI FunCall _int_into_char_array
        CALL      _int_into_char_array  ;; 3 cycles
// 8269   val_2byt(char_array[0], char_array[1]);
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
// 8270   
// 8271   long_int= power.Allph.apparent_net;
        MOVW      BC, N:_power+74    ;; 1 cycle
        MOVW      AX, N:_power+72    ;; 1 cycle
        MOVW      S:_long_int, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_long_int+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8272   long_into_char_array4(long_int,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, S:_long_int+2  ;; 1 cycle
        MOVW      AX, S:_long_int    ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 8273   val_4byt(char_array[0], char_array[1], char_array[2], char_array[3]);
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 8274   
// 8275   long_int= power.Allph.active_signed; 
        MOVW      BC, N:_power+82    ;; 1 cycle
        MOVW      AX, N:_power+80    ;; 1 cycle
        MOVW      S:_long_int, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_long_int+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8276   long_into_char_array4(long_int,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, S:_long_int+2  ;; 1 cycle
        MOVW      AX, S:_long_int    ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 8277   val_signed_4byt(char_array[0],char_array[1],char_array[2],char_array[3]);
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_signed_4byt
        CALL      _val_signed_4byt   ;; 3 cycles
// 8278   
// 8279   long_int= power.Allph.reactive_signed;
        MOVW      BC, N:_power+86    ;; 1 cycle
        MOVW      AX, N:_power+84    ;; 1 cycle
        MOVW      S:_long_int, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_long_int+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8280   long_into_char_array4(long_int,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, S:_long_int+2  ;; 1 cycle
        MOVW      AX, S:_long_int    ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 8281   val_signed_4byt(char_array[0],char_array[1],char_array[2],char_array[3]);
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_signed_4byt
        CALL      _val_signed_4byt   ;; 3 cycles
// 8282   
// 8283   /****/
// 8284   if(0 == dlms_category)
// 8285   {
// 8286     long_int= tpr.power_fail.count; //no of power failures
        MOV       X, N:_tpr+605      ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x0           ;; 1 cycle
        MOVW      S:_long_int, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_long_int+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8287     int_into_char_array(long_int,char_array);
        MOVW      BC, #LWRD(_char_array)  ;; 1 cycle
        MOVW      HL, S:_long_int+2  ;; 1 cycle
        MOVW      DE, S:_long_int    ;; 1 cycle
        MOVW      AX, DE             ;; 1 cycle
          CFI FunCall _int_into_char_array
        CALL      _int_into_char_array  ;; 3 cycles
// 8288     val_2byt(char_array[0], char_array[1]);
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
// 8289     
// 8290     long_into_char_array4(power_off_min , char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, N:_power_off_min+2  ;; 1 cycle
        MOVW      AX, N:_power_off_min  ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 8291     val_4byt(char_array[0],char_array[1],char_array[2],char_array[3]); //cumulative power failure duration
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 8292     
// 8293     val_2byt(tpr.cum_tpr_count/256, tpr.cum_tpr_count%256); //cumulative tamper count
        MOVW      AX, N:_tpr+30      ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOVW      AX, N:_tpr+30      ;; 1 cycle
        CLRB      X                  ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
// 8294     
// 8295     val_4byt(0, 0, 0, md_reset_count); //Billing count
        MOV       B, N:_md_reset_count  ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOV       X, #0x0            ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 8296     
// 8297     info[k++]= 0x11;
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       A, #0x11           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 8298     info[k++]= (us8)seq_no_transaction; //programming count
        MOVW      AX, N:_seq_no_transaction  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOVW      BC, N:_k           ;; 1 cycle
        MOV       (_info)[BC], A     ;; 1 cycle
        INCW      N:_k               ;; 2 cycles
// 8299     
// 8300     fill_oprzero(16);
        MOV       A, #0x10           ;; 1 cycle
          CFI FunCall _fill_oprzero
        CALL      _fill_oprzero      ;; 3 cycles
// 8301     
// 8302     if(bill_count != 0)
        CMP0      N:_bill_count      ;; 1 cycle
        BZ        ??dlms_reset_data_864  ;; 4 cycles
        ; ------------------------------------- Block: 148 cycles
// 8303     {
// 8304       dlms_address= BILL_START_ADD + (bill_count - 1) * BILL_JUMP_PG;
        MOV       X, N:_bill_count   ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0xA0          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x1760        ;; 1 cycle
        MOVW      N:_dlms_address, AX  ;; 1 cycle
// 8305       eprom_read(dlms_address,0,PAGE_5,AUTO_CALC);      //page1-5 read
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x4            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, N:_dlms_address  ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
        ; ------------------------------------- Block: 14 cycles
// 8306     }
// 8307     TempTime = char_array_into_time4(&opr_data[0]);
??dlms_reset_data_864:
        MOVW      BC, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
          CFI FunCall _char_array_into_time4
        CALL      _char_array_into_time4  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
// 8308     date_time(TempTime.day,TempTime.month,TempTime.year,TempTime.hour,TempTime.min,TempTime.sec,0); //Billing Date
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       A, N:_TempTime     ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_TempTime+1   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_TempTime+2   ;; 1 cycle
        MOV       C, N:_TempTime+6   ;; 1 cycle
        MOV       X, N:_TempTime+5   ;; 1 cycle
        MOV       A, N:_TempTime+3   ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
// 8309     
// 8310     
// 8311     long_int= energy.Allph.active_imp;
        MOVW      BC, N:_energy+54   ;; 1 cycle
        MOVW      AX, N:_energy+52   ;; 1 cycle
        MOVW      S:_long_int, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_long_int+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8312     long_into_char_array4(long_int,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, S:_long_int+2  ;; 1 cycle
        MOVW      AX, S:_long_int    ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 8313     val_4byt(char_array[0], char_array[1], char_array[2], char_array[3]); /* kwh */
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 8314     
// 8315     long_int= energy.Allph.reactive_q1; /* + reactive_energy_q3; */
        MOVW      BC, N:_energy+78   ;; 1 cycle
        MOVW      AX, N:_energy+76   ;; 1 cycle
        MOVW      S:_long_int, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_long_int+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8316     long_into_char_array4(long_int,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, S:_long_int+2  ;; 1 cycle
        MOVW      AX, S:_long_int    ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 8317     val_4byt(char_array[0], char_array[1], char_array[2], char_array[3]); /* kvarh lag */
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 8318     
// 8319     long_int= energy.Allph.reactive_q4; /* + reactive_energy_q4; */
        MOVW      BC, N:_energy+90   ;; 1 cycle
        MOVW      AX, N:_energy+88   ;; 1 cycle
        MOVW      S:_long_int, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_long_int+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8320     long_into_char_array4(long_int,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, S:_long_int+2  ;; 1 cycle
        MOVW      AX, S:_long_int    ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 8321     val_4byt(char_array[0], char_array[1], char_array[2], char_array[3]); /* kvarh lead */
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 8322     
// 8323     long_int= energy.Allph.apparent_imp;
        MOVW      BC, N:_energy+70   ;; 1 cycle
        MOVW      AX, N:_energy+68   ;; 1 cycle
        MOVW      S:_long_int, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_long_int+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8324     long_into_char_array4(long_int,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, S:_long_int+2  ;; 1 cycle
        MOVW      AX, S:_long_int    ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 8325     val_4byt(char_array[0], char_array[1], char_array[2], char_array[3]); /* kvarh lead */
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 8326   }
// 8327   else
// 8328   {
// 8329     long_int= energy.Allph.active_imp;;
// 8330     long_into_char_array4(long_int,char_array);
// 8331     val_4byt(char_array[0], char_array[1], char_array[2], char_array[3]); /* kwh */
// 8332     
// 8333     long_int= energy.Allph.reactive_q1;
// 8334     long_into_char_array4(long_int,char_array);
// 8335     val_4byt(char_array[0], char_array[1], char_array[2], char_array[3]); /* kvarh lag */
// 8336     
// 8337     long_int= energy.Allph.reactive_q4;
// 8338     long_into_char_array4(long_int,char_array);
// 8339     val_4byt(char_array[0], char_array[1], char_array[2], char_array[3]); /* kvarh lead */
// 8340     
// 8341     long_int= energy.Allph.apparent_imp;
// 8342     long_into_char_array4(long_int,char_array);
// 8343     val_4byt(char_array[0], char_array[1], char_array[2], char_array[3]); /* kvah  */
// 8344     
// 8345     long_int= tpr.power_fail.count; //no of power failures
// 8346     int_into_char_array(long_int,char_array);
// 8347     val_2byt(char_array[0], char_array[1]);
// 8348     
// 8349     long_into_char_array4(power_off_min , char_array);
// 8350     val_4byt(char_array[0],char_array[1],char_array[2],char_array[3]); //cumulative power failure duration
// 8351     
// 8352     val_2byt(tpr.cum_tpr_count/256, tpr.cum_tpr_count%256); //cumulative tamper count
// 8353     
// 8354     val_4byt(0, 0, 0, md_reset_count); //Billing count
// 8355     
// 8356     info[k++]= 0x11;
// 8357     info[k++]= (us8)seq_no_transaction; 
// 8358     
// 8359     fill_oprzero(16);
// 8360     
// 8361     if(bill_count != 0)
// 8362     {
// 8363       dlms_address= BILL_START_ADD + (bill_count - 1) * BILL_JUMP_PG;
// 8364       eprom_read(dlms_address,0,PAGE_5,AUTO_CALC);      //page1-5 read
// 8365     }
// 8366     TempTime = char_array_into_time4(&opr_data[0]);
// 8367     date_time(TempTime.day,TempTime.month,TempTime.year,TempTime.hour,TempTime.min,TempTime.sec,0); //Billing Date
// 8368   }
// 8369   /*****/
// 8370   
// 8371   long_into_char_array4(demand.Allph.act_imp.max.value,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, N:_demand+142  ;; 1 cycle
        MOVW      AX, N:_demand+140  ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 8372   val_4byt(char_array[0],char_array[1],char_array[2],char_array[3]); /* md kw */
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 8373   eprom_read(0x03E0,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x3E0         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 8374   TempTime = char_array_into_time4(&opr_data[3]);
        MOVW      BC, #LWRD(_opr_data+3)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x2           ;; 1 cycle
          CFI FunCall _char_array_into_time4
        CALL      _char_array_into_time4  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+12
        MOVW      AX, SP             ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
// 8375   date_time(TempTime.day,TempTime.month,TempTime.year,TempTime.hour,TempTime.min,TempTime.sec,0);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       A, N:_TempTime     ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_TempTime+1   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_TempTime+2   ;; 1 cycle
        MOV       C, N:_TempTime+6   ;; 1 cycle
        MOV       X, N:_TempTime+5   ;; 1 cycle
        MOV       A, N:_TempTime+3   ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
// 8376   
// 8377   long_into_char_array4(demand.Allph.app_imp.max.value,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, N:_demand+190  ;; 1 cycle
        MOVW      AX, N:_demand+188  ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 8378   val_4byt(char_array[0],char_array[1],char_array[2],char_array[3]); /* md kva */
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 8379   eprom_read(0x03F0,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x3F0         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 8380   TempTime = char_array_into_time4(&opr_data[3]);
        MOVW      BC, #LWRD(_opr_data+3)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x2           ;; 1 cycle
          CFI FunCall _char_array_into_time4
        CALL      _char_array_into_time4  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+12
        MOVW      AX, SP             ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
// 8381   date_time(TempTime.day,TempTime.month,TempTime.year,TempTime.hour,TempTime.min,TempTime.sec,0);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       A, N:_TempTime     ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_TempTime+1   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_TempTime+2   ;; 1 cycle
        MOV       C, N:_TempTime+6   ;; 1 cycle
        MOV       X, N:_TempTime+5   ;; 1 cycle
        MOV       A, N:_TempTime+3   ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
// 8382   
// 8383   //    long_into_char_array4(power_on_min , char_array);
// 8384   //    val_4byt(char_array[0],char_array[1],char_array[2],char_array[3]); //cumulative power failure duration
// 8385   
// 8386   
// 8387   if(CUM_MAX_DEMAND == 1)
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+12
        CMP       N:_CUM_MAX_DEMAND, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_865  ;; 4 cycles
        ; ------------------------------------- Block: 231 cycles
// 8388   {
// 8389     long_int= cum_max_demand_kw;
        MOVW      BC, N:_cum_max_demand_kw+2  ;; 1 cycle
        MOVW      AX, N:_cum_max_demand_kw  ;; 1 cycle
        MOVW      S:_long_int, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_long_int+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8390     long_into_char_array4(long_int,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, S:_long_int+2  ;; 1 cycle
        MOVW      AX, S:_long_int    ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 8391     val_4byt(char_array[0], char_array[1], char_array[2], char_array[3]); /* cum md kw */
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
// 8392     
// 8393     long_int= cum_max_demand_kva;
        MOVW      BC, N:_cum_max_demand_kva+2  ;; 1 cycle
        MOVW      AX, N:_cum_max_demand_kva  ;; 1 cycle
        MOVW      S:_long_int, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_long_int+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8394     long_into_char_array4(long_int,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, S:_long_int+2  ;; 1 cycle
        MOVW      AX, S:_long_int    ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 8395     val_4byt(char_array[0], char_array[1], char_array[2], char_array[3]); /* cum md kva */
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
        ; ------------------------------------- Block: 38 cycles
// 8396   }
// 8397 }
??dlms_reset_data_865:
        ADDW      SP, #0x8           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock91
        ; ------------------------------------- Block: 7 cycles
        ; ------------------------------------- Total: 636 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock92 Using cfiCommon1
          CFI Function _tamper_compart
        CODE
// 8398 void tamper_compart(uint8_t event, uint16_t init_add, uint16_t max_add, uint8_t jump_add, uint8_t roll_f)
// 8399 {
_tamper_compart:
        ; * Stack frame (at entry) *
        ; Param size: 2
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+8
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+10
        ; Auto size: 10
        SUBW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+14
// 8400   uint16_t buffer_filled_u16= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 8401   uint8_t u8temp= 0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
// 8402   
// 8403   k= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 8404   Start_Info2();
          CFI FunCall _Start_Info2
        CALL      _Start_Info2       ;; 3 cycles
// 8405   k= 15;
        MOVW      AX, #0xF           ;; 1 cycle
        MOVW      N:_k, AX           ;; 1 cycle
// 8406   
// 8407   buffer_filled_u16= k;
        MOVW      AX, N:_k           ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 8408   
// 8409   if(buffer_first_not_fill_f == 0)
        CMP0      N:_buffer_first_not_fill_f  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_866  ;; 4 cycles
        ; ------------------------------------- Block: 22 cycles
// 8410   {
// 8411     /*	tamper_data=opr_data[0]; */
// 8412     if(1 == roll_f) /* opr_data[1]) */
        MOV       A, [SP+0x0E]       ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        BNZ       ??dlms_reset_data_867  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 8413     {
// 8414       compart1= event;
        MOV       A, [SP+0x05]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      N:_compart1, AX    ;; 1 cycle
        BR        S:??dlms_reset_data_868  ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 8415     }
// 8416     else
// 8417     {
// 8418       compart1= tamper_data;
??dlms_reset_data_867:
        MOVW      AX, N:_tamper_data  ;; 1 cycle
        MOVW      N:_compart1, AX    ;; 1 cycle
// 8419       tamper_data= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_tamper_data, AX  ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
// 8420     }
// 8421     
// 8422     if(sel_access_flag == 1)
??dlms_reset_data_868:
        CMP       N:_sel_access_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_869  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8423     {
// 8424       if((compart1 < to_ptr) || (compart1 < from_ptr) || (access_selector != 2))
        MOVW      HL, N:_to_ptr      ;; 1 cycle
        MOVW      AX, N:_compart1    ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BC        ??dlms_reset_data_870  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        MOVW      HL, N:_from_ptr    ;; 1 cycle
        MOVW      AX, N:_compart1    ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BC        ??dlms_reset_data_870  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        CMP       N:_access_selector, #0x2  ;; 1 cycle
        BZ        ??dlms_reset_data_871  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8425       {
// 8426         compart1= 0;
??dlms_reset_data_870:
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_compart1, AX    ;; 1 cycle
        BR        S:??dlms_reset_data_869  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 8427       }
// 8428       else
// 8429       {
// 8430         if(to_ptr == 0)
??dlms_reset_data_871:
        CLRW      AX                 ;; 1 cycle
        CMPW      AX, N:_to_ptr      ;; 1 cycle
        BNZ       ??dlms_reset_data_872  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 8431         {
// 8432           compart1= compart1 - from_ptr + 1;
        MOVW      AX, N:_compart1    ;; 1 cycle
        SUBW      AX, N:_from_ptr    ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        MOVW      N:_compart1, AX    ;; 1 cycle
        BR        S:??dlms_reset_data_873  ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 8433         }
// 8434         else
// 8435         {
// 8436           compart1= to_ptr - from_ptr + 1;
??dlms_reset_data_872:
        MOVW      AX, N:_to_ptr      ;; 1 cycle
        SUBW      AX, N:_from_ptr    ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        MOVW      N:_compart1, AX    ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
// 8437         }
// 8438         
// 8439         if((from_ptr > to_ptr) && (to_ptr != 0))
??dlms_reset_data_873:
        MOVW      HL, N:_from_ptr    ;; 1 cycle
        MOVW      AX, N:_to_ptr      ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNC       ??dlms_reset_data_874  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
        CLRW      AX                 ;; 1 cycle
        CMPW      AX, N:_to_ptr      ;; 1 cycle
        BZ        ??dlms_reset_data_874  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 8440         {
// 8441           compart1= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_compart1, AX    ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 8442         }
// 8443         
// 8444         if(from_ptr == 0)
??dlms_reset_data_874:
        CLRW      AX                 ;; 1 cycle
        CMPW      AX, N:_from_ptr    ;; 1 cycle
        BNZ       ??dlms_reset_data_875  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 8445         {
// 8446           compart1= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_compart1, AX    ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 8447         }
// 8448         
// 8449         tamper_data= tamper_data + from_ptr - 1;
??dlms_reset_data_875:
        MOVW      AX, N:_from_ptr    ;; 1 cycle
        DECW      AX                 ;; 1 cycle
        ADDW      AX, N:_tamper_data  ;; 1 cycle
        MOVW      N:_tamper_data, AX  ;; 1 cycle
// 8450         
// 8451         if(tamper_data > event)
        MOVW      HL, N:_tamper_data  ;; 1 cycle
        MOV       A, [SP+0x05]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNC       ??dlms_reset_data_869  ;; 4 cycles
        ; ------------------------------------- Block: 13 cycles
// 8452         {
// 8453           tamper_data= tamper_data - event;
        MOV       A, [SP+0x05]       ;; 1 cycle
        MOV       L, A               ;; 1 cycle
        MOV       H, #0x0            ;; 1 cycle
        MOVW      AX, N:_tamper_data  ;; 1 cycle
        SUBW      AX, HL             ;; 1 cycle
        MOVW      N:_tamper_data, AX  ;; 1 cycle
        ; ------------------------------------- Block: 6 cycles
// 8454         }
// 8455       }
// 8456     }
// 8457     
// 8458     dlms_address= init_add + (tamper_data * jump_add);
??dlms_reset_data_869:
        MOV       A, [SP+0x04]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, N:_tamper_data  ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [SP+0x08]      ;; 1 cycle
        ADDW      AX, HL             ;; 1 cycle
        MOVW      N:_dlms_address, AX  ;; 1 cycle
// 8459     array(compart1, 0);
        MOV       X, #0x0            ;; 1 cycle
        MOVW      HL, N:_compart1    ;; 1 cycle
        MOV       A, L               ;; 1 cycle
          CFI FunCall _array
        CALL      _array             ;; 3 cycles
// 8460     block_no= 1;
        MOVW      AX, #0x1           ;; 1 cycle
        MOVW      N:_block_no, AX    ;; 1 cycle
// 8461     
// 8462     element_filled= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_element_filled, AX  ;; 1 cycle
// 8463     multi_filling_f= 1;
        MOV       N:_multi_filling_f, #0x1  ;; 1 cycle
// 8464     buffer_first_not_fill_f= 1;
        MOV       N:_buffer_first_not_fill_f, #0x1  ;; 1 cycle
// 8465     
// 8466     if((obis_code[4] != 6) && (obis_code[4] != 3) && (obis_code[4] != 5) && (obis_code[4] != 99))
        CMP       N:_obis_code+4, #0x6  ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_876  ;; 4 cycles
        ; ------------------------------------- Block: 27 cycles
        CMP       N:_obis_code+4, #0x3  ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_876  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+4, #0x5  ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_876  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+4, #0x63  ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_876  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8467     {
// 8468       if(sel_access_flag == 1)
        CMP       N:_sel_access_flag, #0x1  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_877  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8469       {
// 8470         selective_values_byte= 2 + sel_obj_tamper[0] * 14 + sel_obj_tamper[1] * 3 + sel_obj_tamper[2] * 5 + sel_obj_tamper[3] * 5 +
// 8471           sel_obj_tamper[4] * 5 + sel_obj_tamper[5] * 3 + sel_obj_tamper[6] * 3 + sel_obj_tamper[7] * 3 +
// 8472             sel_obj_tamper[8] * 3 + sel_obj_tamper[9] * 3 + sel_obj_tamper[10] * 3 + sel_obj_tamper[11] * 5 + (sel_obj_tamper[12] * 5) * KVAH_SNAP;
        MOV       A, N:_sel_obj_tamper+1  ;; 1 cycle
        MOV       X, #0x3            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, N:_sel_obj_tamper  ;; 1 cycle
        MOV       X, #0xE            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       B, A               ;; 1 cycle
        MOV       A, N:_sel_obj_tamper+2  ;; 1 cycle
        MOV       X, #0x5            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       B, A               ;; 1 cycle
        MOV       A, N:_sel_obj_tamper+3  ;; 1 cycle
        MOV       X, #0x5            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       B, A               ;; 1 cycle
        MOV       A, N:_sel_obj_tamper+4  ;; 1 cycle
        MOV       X, #0x5            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       B, A               ;; 1 cycle
        MOV       A, N:_sel_obj_tamper+5  ;; 1 cycle
        MOV       X, #0x3            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       B, A               ;; 1 cycle
        MOV       A, N:_sel_obj_tamper+6  ;; 1 cycle
        MOV       X, #0x3            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       B, A               ;; 1 cycle
        MOV       A, N:_sel_obj_tamper+7  ;; 1 cycle
        MOV       X, #0x3            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       B, A               ;; 1 cycle
        MOV       A, N:_sel_obj_tamper+8  ;; 1 cycle
        MOV       X, #0x3            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       B, A               ;; 1 cycle
        MOV       A, N:_sel_obj_tamper+9  ;; 1 cycle
        MOV       X, #0x3            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       B, A               ;; 1 cycle
        MOV       A, N:_sel_obj_tamper+10  ;; 1 cycle
        MOV       X, #0x3            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       B, A               ;; 1 cycle
        MOV       A, N:_sel_obj_tamper+11  ;; 1 cycle
        MOV       X, #0x5            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       B, A               ;; 1 cycle
        MOV       X, N:_sel_obj_tamper+12  ;; 1 cycle
        MOV       A, N:_KVAH_SNAP    ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x5            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       A, B               ;; 1 cycle
        ADD       A, #0x2            ;; 1 cycle
        MOV       N:_selective_values_byte, A  ;; 1 cycle
        BR        S:??dlms_reset_data_878  ;; 3 cycles
        ; ------------------------------------- Block: 74 cycles
// 8473       }
// 8474       else
// 8475       {
// 8476         selective_values_byte= 57 + 5 * KVAH_SNAP;
??dlms_reset_data_877:
        MOV       A, N:_KVAH_SNAP    ;; 1 cycle
        MOV       X, #0x5            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       A, #0x39           ;; 1 cycle
        MOV       N:_selective_values_byte, A  ;; 1 cycle
        BR        S:??dlms_reset_data_878  ;; 3 cycles
        ; ------------------------------------- Block: 9 cycles
// 8477       }
// 8478     }
// 8479     else if((3 == obis_code[4]) || (5 == obis_code[4]) || (obis_code[4] == 99))
??dlms_reset_data_876:
        CMP       N:_obis_code+4, #0x3  ;; 1 cycle
        BZ        ??dlms_reset_data_879  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+4, #0x5  ;; 1 cycle
        BZ        ??dlms_reset_data_879  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+4, #0x63  ;; 1 cycle
        BNZ       ??dlms_reset_data_878  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8480     {
// 8481       if(1 == sel_access_flag)
??dlms_reset_data_879:
        CMP       N:_sel_access_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_880  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8482       {
// 8483         selective_values_byte= 2 + (sel_obj_tamper[0] * 14) + (sel_obj_tamper[1] * 3);
        MOV       A, N:_sel_obj_tamper+1  ;; 1 cycle
        MOV       X, #0x3            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, N:_sel_obj_tamper  ;; 1 cycle
        MOV       X, #0xE            ;; 1 cycle
        MULU      X                  ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       A, B               ;; 1 cycle
        ADD       A, #0x2            ;; 1 cycle
        MOV       N:_selective_values_byte, A  ;; 1 cycle
        BR        S:??dlms_reset_data_878  ;; 3 cycles
        ; ------------------------------------- Block: 15 cycles
// 8484       }
// 8485       else
// 8486       {
// 8487         selective_values_byte= 19;
??dlms_reset_data_880:
        MOV       N:_selective_values_byte, #0x13  ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
// 8488       }
// 8489     }
// 8490     else if(obis_code[4] == 6)
// 8491     {
// 8492     }
// 8493     
// 8494     if(compart1 == 0)
??dlms_reset_data_878:
        CLRW      AX                 ;; 1 cycle
        CMPW      AX, N:_compart1    ;; 1 cycle
        BZ        ??dlms_reset_data_881  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 8495     {
// 8496       goto comp1;
// 8497     }
// 8498   }
// 8499   
// 8500   for(; element_filled < compart1; element_filled++)
??dlms_reset_data_866:
        MOVW      HL, N:_compart1    ;; 1 cycle
        MOVW      AX, N:_element_filled  ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNC       ??dlms_reset_data_881  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 8501   {
// 8502     buffer_filled_u16+= selective_values_byte;
        MOV       C, N:_selective_values_byte  ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        ADDW      AX, BC             ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 8503     
// 8504     if(dlms_address == max_add)
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        MOVW      HL, N:_dlms_address  ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BNZ       ??dlms_reset_data_882  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 8505     {
// 8506       dlms_address= init_add;
        MOVW      AX, [SP+0x08]      ;; 1 cycle
        MOVW      N:_dlms_address, AX  ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 8507     }
// 8508     
// 8509     tpr_fill(dlms_address);
??dlms_reset_data_882:
        MOVW      AX, N:_dlms_address  ;; 1 cycle
          CFI FunCall _tpr_fill
        CALL      _tpr_fill          ;; 3 cycles
// 8510     dlms_address= dlms_address + jump_add;
        MOV       A, [SP+0x04]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        ADDW      AX, N:_dlms_address  ;; 1 cycle
        MOVW      N:_dlms_address, AX  ;; 1 cycle
// 8511     if(DLMS_MAX_BUFF_SIZE < (buffer_filled_u16 + selective_values_byte))
        MOV       C, N:_selective_values_byte  ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        ADDW      AX, BC             ;; 1 cycle
        CMPW      AX, #0x201         ;; 1 cycle
        BNC       ??dlms_reset_data_881  ;; 4 cycles
        ; ------------------------------------- Block: 18 cycles
// 8512     {
// 8513       break;
// 8514     }
// 8515   }
        INCW      N:_element_filled  ;; 2 cycles
        BR        S:??dlms_reset_data_866  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 8516   
// 8517 comp1:
// 8518   element_filled++;
??dlms_reset_data_881:
        INCW      N:_element_filled  ;; 2 cycles
// 8519   if(element_filled >= compart1)
        MOVW      HL, N:_compart1    ;; 1 cycle
        MOVW      AX, N:_element_filled  ;; 1 cycle
        CMPW      AX, HL             ;; 1 cycle
        BC        ??dlms_reset_data_883  ;; 4 cycles
        ; ------------------------------------- Block: 9 cycles
// 8520   {
// 8521     multi_filling_f= 0;
        MOV       N:_multi_filling_f, #0x0  ;; 1 cycle
// 8522     buffer_first_not_fill_f= 0;
        MOV       N:_buffer_first_not_fill_f, #0x0  ;; 1 cycle
// 8523     u8temp= 1;
        MOV       A, #0x1            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 4 cycles
// 8524   }
// 8525   
// 8526   info[6]= u8temp;
??dlms_reset_data_883:
        MOV       A, [SP]            ;; 1 cycle
        MOV       N:_info+6, A       ;; 1 cycle
// 8527   info[10]= block_no;
        MOVW      AX, N:_block_no    ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOV       N:_info+10, A      ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 8528   info[13]= (k - 15) / 256;
        MOVW      AX, N:_k           ;; 1 cycle
        ADDW      AX, #0xFFF1        ;; 1 cycle
        CLRB      X                  ;; 1 cycle
        MOV       N:_info+13, A      ;; 1 cycle
        XCH       A, X               ;; 1 cycle
// 8529   info[14]= (uint8_t)(k - 15);
        MOVW      AX, N:_k           ;; 1 cycle
        MOV       A, X               ;; 1 cycle
        ADD       A, #0xF1           ;; 1 cycle
        MOV       N:_info+14, A      ;; 1 cycle
// 8530   
// 8531   block_no++;
        INCW      N:_block_no        ;; 2 cycles
// 8532   info_send= k;
        MOVW      AX, N:_k           ;; 1 cycle
        MOVW      N:_info_send, AX   ;; 1 cycle
// 8533   info_sended= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_info_sended, AX  ;; 1 cycle
// 8534   send_type_multi();
          CFI FunCall _send_type_multi
        CALL      _send_type_multi   ;; 3 cycles
// 8535 }
        ADDW      SP, #0xA           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock92
        ; ------------------------------------- Block: 31 cycles
        ; ------------------------------------- Total: 387 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock93 Using cfiCommon0
          CFI Function _tpr_fill
        CODE
// 8536 void tpr_fill(uint16_t comptt_address)
// 8537 {
_tpr_fill:
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        ; Auto size: 12
        SUBW      SP, #0xA           ;; 1 cycle
          CFI CFA SP+16
// 8538   uint8_t i_data, max_obj;
// 8539   if(KVAH_SNAP == 1)
        CMP       N:_KVAH_SNAP, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_884  ;; 4 cycles
        ; ------------------------------------- Block: 7 cycles
// 8540   {
// 8541     max_obj= 13;
        MOV       A, #0xD            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        BR        S:??dlms_reset_data_885  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 8542   }
// 8543   else
// 8544   {
// 8545     max_obj= 12;
??dlms_reset_data_884:
        MOV       A, #0xC            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 8546   }
// 8547   if(sel_access_flag == 1)
??dlms_reset_data_885:
        CMP       N:_sel_access_flag, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_886  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8548   {
// 8549     structure(no_obj);
        MOV       A, N:_no_obj       ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
        BR        S:??dlms_reset_data_887  ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 8550   }
// 8551   else
// 8552   {
// 8553     if((obis_code[4] != 3) && (obis_code[4] != 5) && (obis_code[4] != 99))
??dlms_reset_data_886:
        CMP       N:_obis_code+4, #0x3  ;; 1 cycle
        BZ        ??dlms_reset_data_888  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+4, #0x5  ;; 1 cycle
        BZ        ??dlms_reset_data_888  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+4, #0x63  ;; 1 cycle
        BZ        ??dlms_reset_data_888  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8554     {
// 8555       for(i_data= 0; i_data < max_obj; i_data++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??tpr_fill_0:
        MOV       A, [SP]            ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        CMP       X, A               ;; 1 cycle
        BNC       ??dlms_reset_data_889  ;; 4 cycles
        ; ------------------------------------- Block: 8 cycles
// 8556       {
// 8557         sel_obj_tamper[i_data]= 1;
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, #0x1            ;; 1 cycle
        MOV       (_sel_obj_tamper)[B], A  ;; 1 cycle
// 8558       }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??tpr_fill_0     ;; 3 cycles
        ; ------------------------------------- Block: 10 cycles
// 8559       
// 8560       structure(max_obj); /* 19 */
??dlms_reset_data_889:
        MOV       A, [SP+0x01]       ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
        BR        S:??dlms_reset_data_887  ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 8561     }
// 8562     else
// 8563     {
// 8564       for(i_data= 0; i_data < 2; i_data++)
??dlms_reset_data_888:
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??tpr_fill_1:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BNC       ??dlms_reset_data_890  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 8565       {
// 8566         sel_obj_tamper[i_data]= 1;
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, #0x1            ;; 1 cycle
        MOV       (_sel_obj_tamper)[B], A  ;; 1 cycle
// 8567       }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??tpr_fill_1     ;; 3 cycles
        ; ------------------------------------- Block: 10 cycles
// 8568       structure(2);
??dlms_reset_data_890:
        MOV       A, #0x2            ;; 1 cycle
          CFI FunCall _structure
        CALL      _structure         ;; 3 cycles
        ; ------------------------------------- Block: 4 cycles
// 8569     }
// 8570   }
// 8571   
// 8572   
// 8573   if((obis_code[4] != 3) && (obis_code[4] != 5) && (obis_code[4] != 99))
??dlms_reset_data_887:
        CMP       N:_obis_code+4, #0x3  ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_891  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+4, #0x5  ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_891  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
        CMP       N:_obis_code+4, #0x63  ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_891  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8574   {
// 8575     eprom_read(comptt_address,0,PAGE_3,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x2            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x0A]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 8576     if(sel_obj_tamper[0] == 1)              /* Time */
        CMP       N:_sel_obj_tamper, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_892  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 8577     {
// 8578       TempTime = char_array_into_time5_sec(&opr_data[0]);
        MOVW      BC, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x2           ;; 1 cycle
          CFI FunCall _char_array_into_time5_sec
        CALL      _char_array_into_time5_sec  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x2           ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
// 8579       date_time(TempTime.day,TempTime.month,TempTime.year,TempTime.hour,TempTime.min,TempTime.sec,0);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       A, N:_TempTime     ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_TempTime+1   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_TempTime+2   ;; 1 cycle
        MOV       C, N:_TempTime+6   ;; 1 cycle
        MOV       X, N:_TempTime+5   ;; 1 cycle
        MOV       A, N:_TempTime+3   ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+16
        ; ------------------------------------- Block: 38 cycles
// 8580     }
// 8581     
// 8582     if(sel_obj_tamper[1] == 1)              /* Event code */
??dlms_reset_data_892:
        CMP       N:_sel_obj_tamper+1, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_893  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8583     {
// 8584       val_2byt(0, opr_data[41]);
        MOV       X, N:_opr_data+41  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 8585     }
// 8586     
// 8587     if(sel_obj_tamper[2] == 1)              /* Ir */
??dlms_reset_data_893:
        CMP       N:_sel_obj_tamper+2, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_894  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8588     {
// 8589       temp_s32 = (s32)((s16)char_array_to_int(&opr_data[19]));
        MOVW      AX, #LWRD(_opr_data+19)  ;; 1 cycle
          CFI FunCall _char_array_to_int
        CALL      _char_array_to_int  ;; 3 cycles
        MOVW      BC, AX             ;; 1 cycle
        SARW      AX, 0xF            ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8590       temp_s32 *= 10;
        MOVW      AX, #0x0           ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOVW      AX, #0xA           ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOVW      BC, S:_temp_s32+2  ;; 1 cycle
        MOVW      AX, S:_temp_s32    ;; 1 cycle
          CFI FunCall ?L_MUL_FAST_L03
        CALL      N:?L_MUL_FAST_L03  ;; 3 cycles
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8591       long_into_char_array4(temp_s32,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, S:_temp_s32+2  ;; 1 cycle
        MOVW      AX, S:_temp_s32    ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 8592       val_signed_4byt(char_array[0],char_array[1],char_array[2],char_array[3]);
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_signed_4byt
        CALL      _val_signed_4byt   ;; 3 cycles
        ADDW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+16
        ; ------------------------------------- Block: 38 cycles
// 8593     }
// 8594     
// 8595     if(sel_obj_tamper[3] == 1)              /* Iy */
??dlms_reset_data_894:
        CMP       N:_sel_obj_tamper+3, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_895  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8596     {
// 8597       temp_s32 = (s32)((s16)char_array_to_int(&opr_data[21]));
        MOVW      AX, #LWRD(_opr_data+21)  ;; 1 cycle
          CFI FunCall _char_array_to_int
        CALL      _char_array_to_int  ;; 3 cycles
        MOVW      BC, AX             ;; 1 cycle
        SARW      AX, 0xF            ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8598       temp_s32 *= 10;
        MOVW      AX, #0x0           ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOVW      AX, #0xA           ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOVW      BC, S:_temp_s32+2  ;; 1 cycle
        MOVW      AX, S:_temp_s32    ;; 1 cycle
          CFI FunCall ?L_MUL_FAST_L03
        CALL      N:?L_MUL_FAST_L03  ;; 3 cycles
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8599       long_into_char_array4(temp_s32,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, S:_temp_s32+2  ;; 1 cycle
        MOVW      AX, S:_temp_s32    ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 8600       val_signed_4byt(char_array[0],char_array[1],char_array[2],char_array[3]); 
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_signed_4byt
        CALL      _val_signed_4byt   ;; 3 cycles
        ADDW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+16
        ; ------------------------------------- Block: 38 cycles
// 8601     }
// 8602     
// 8603     if(sel_obj_tamper[4] == 1)              /* Ib */
??dlms_reset_data_895:
        CMP       N:_sel_obj_tamper+4, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_896  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8604     {
// 8605       temp_s32 = (s32)((s16)char_array_to_int(&opr_data[23]));
        MOVW      AX, #LWRD(_opr_data+23)  ;; 1 cycle
          CFI FunCall _char_array_to_int
        CALL      _char_array_to_int  ;; 3 cycles
        MOVW      BC, AX             ;; 1 cycle
        SARW      AX, 0xF            ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8606       temp_s32 *= 10;
        MOVW      AX, #0x0           ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOVW      AX, #0xA           ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOVW      BC, S:_temp_s32+2  ;; 1 cycle
        MOVW      AX, S:_temp_s32    ;; 1 cycle
          CFI FunCall ?L_MUL_FAST_L03
        CALL      N:?L_MUL_FAST_L03  ;; 3 cycles
        MOVW      S:_temp_s32, AX    ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      S:_temp_s32+2, AX  ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8607       long_into_char_array4(temp_s32,char_array);
        MOVW      DE, #LWRD(_char_array)  ;; 1 cycle
        MOVW      BC, S:_temp_s32+2  ;; 1 cycle
        MOVW      AX, S:_temp_s32    ;; 1 cycle
          CFI FunCall _long_into_char_array4
        CALL      _long_into_char_array4  ;; 3 cycles
// 8608       val_signed_4byt(char_array[0],char_array[1],char_array[2],char_array[3]);
        MOV       B, N:_char_array+3  ;; 1 cycle
        MOV       C, N:_char_array+2  ;; 1 cycle
        MOV       X, N:_char_array+1  ;; 1 cycle
        MOV       A, N:_char_array   ;; 1 cycle
          CFI FunCall _val_signed_4byt
        CALL      _val_signed_4byt   ;; 3 cycles
        ADDW      SP, #0x4           ;; 1 cycle
          CFI CFA SP+16
        ; ------------------------------------- Block: 38 cycles
// 8609     }
// 8610     
// 8611     if(sel_obj_tamper[5] == 1)              /* Vr */
??dlms_reset_data_896:
        CMP       N:_sel_obj_tamper+5, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_897  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8612     {
// 8613       val_2byt(opr_data[13], opr_data[14]); 
        MOV       X, N:_opr_data+14  ;; 1 cycle
        MOV       A, N:_opr_data+13  ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 8614     }
// 8615     
// 8616     if(sel_obj_tamper[6] == 1)              /* Vy */
??dlms_reset_data_897:
        CMP       N:_sel_obj_tamper+6, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_898  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8617     {
// 8618       val_2byt(opr_data[15], opr_data[16]); 
        MOV       X, N:_opr_data+16  ;; 1 cycle
        MOV       A, N:_opr_data+15  ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 8619     }
// 8620     
// 8621     if(sel_obj_tamper[7] == 1)              /* Vb */
??dlms_reset_data_898:
        CMP       N:_sel_obj_tamper+7, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_899  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8622     {
// 8623       val_2byt(opr_data[17], opr_data[18]);
        MOV       X, N:_opr_data+18  ;; 1 cycle
        MOV       A, N:_opr_data+17  ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 8624     }
// 8625     
// 8626     if(sel_obj_tamper[8] == 1)              /* pf r */
??dlms_reset_data_899:
        CMP       N:_sel_obj_tamper+8, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_900  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8627     {
// 8628       temp_s16 = (s16)((s8)opr_data[27]);
        MOV       A, N:_opr_data+27  ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        SAR       A, 0x7             ;; 1 cycle
        MOVW      S:_temp_s16, AX    ;; 1 cycle
// 8629       temp_s16 *= 10;
        MOVW      AX, S:_temp_s16    ;; 1 cycle
        MOVW      BC, #0xA           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      S:_temp_s16, AX    ;; 1 cycle
// 8630       signed_integer(temp_s16);
        MOVW      AX, S:_temp_s16    ;; 1 cycle
          CFI FunCall _signed_integer
        CALL      _signed_integer    ;; 3 cycles
        ; ------------------------------------- Block: 13 cycles
// 8631     }
// 8632     
// 8633     if(sel_obj_tamper[9] == 1)              /* pf y */
??dlms_reset_data_900:
        CMP       N:_sel_obj_tamper+9, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_901  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8634     {
// 8635       temp_s16 = (s16)((s8)opr_data[28]);
        MOV       A, N:_opr_data+28  ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        SAR       A, 0x7             ;; 1 cycle
        MOVW      S:_temp_s16, AX    ;; 1 cycle
// 8636       temp_s16 *= 10;
        MOVW      AX, S:_temp_s16    ;; 1 cycle
        MOVW      BC, #0xA           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      S:_temp_s16, AX    ;; 1 cycle
// 8637       signed_integer(temp_s16);
        MOVW      AX, S:_temp_s16    ;; 1 cycle
          CFI FunCall _signed_integer
        CALL      _signed_integer    ;; 3 cycles
        ; ------------------------------------- Block: 13 cycles
// 8638     }
// 8639     
// 8640     if(sel_obj_tamper[10] == 1)             /* pf b */
??dlms_reset_data_901:
        CMP       N:_sel_obj_tamper+10, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_902  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8641     {
// 8642       temp_s16 = (s16)((s8)opr_data[29]);
        MOV       A, N:_opr_data+29  ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        SAR       A, 0x7             ;; 1 cycle
        MOVW      S:_temp_s16, AX    ;; 1 cycle
// 8643       temp_s16 *= 10;
        MOVW      AX, S:_temp_s16    ;; 1 cycle
        MOVW      BC, #0xA           ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      S:_temp_s16, AX    ;; 1 cycle
// 8644       signed_integer(temp_s16);
        MOVW      AX, S:_temp_s16    ;; 1 cycle
          CFI FunCall _signed_integer
        CALL      _signed_integer    ;; 3 cycles
        ; ------------------------------------- Block: 13 cycles
// 8645     }
// 8646     
// 8647     if(sel_obj_tamper[11] == 1)             /* kwh */
??dlms_reset_data_902:
        CMP       N:_sel_obj_tamper+11, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_903  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8648     {
// 8649       val_4byt(opr_data[5], opr_data[6], opr_data[7], opr_data[8]);
        MOV       B, N:_opr_data+8   ;; 1 cycle
        MOV       C, N:_opr_data+7   ;; 1 cycle
        MOV       X, N:_opr_data+6   ;; 1 cycle
        MOV       A, N:_opr_data+5   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 8650     }
// 8651     
// 8652     if(sel_obj_tamper[12] == 1)             /* kvah */
??dlms_reset_data_903:
        CMP       N:_sel_obj_tamper+12, #0x1  ;; 1 cycle
        SKZ                          ;; 4 cycles
        BR        N:??dlms_reset_data_904  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8653     {
// 8654       val_4byt(opr_data[9], opr_data[10], opr_data[11], opr_data[12]);
        MOV       B, N:_opr_data+12  ;; 1 cycle
        MOV       C, N:_opr_data+11  ;; 1 cycle
        MOV       X, N:_opr_data+10  ;; 1 cycle
        MOV       A, N:_opr_data+9   ;; 1 cycle
          CFI FunCall _val_4byt
        CALL      _val_4byt          ;; 3 cycles
        BR        N:??dlms_reset_data_904  ;; 3 cycles
        ; ------------------------------------- Block: 10 cycles
// 8655     }
// 8656   }
// 8657   else
// 8658   {
// 8659     eprom_read(comptt_address,0,PAGE_1,AUTO_CALC);
??dlms_reset_data_891:
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, [SP+0x0A]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 8660     if(sel_obj_tamper[0] == 1)              /* Time */
        CMP       N:_sel_obj_tamper, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_905  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
// 8661     {
// 8662       TempTime = char_array_into_time5_sec(&opr_data[0]);
        MOVW      BC, #LWRD(_opr_data)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x2           ;; 1 cycle
          CFI FunCall _char_array_into_time5_sec
        CALL      _char_array_into_time5_sec  ;; 3 cycles
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x2           ;; 1 cycle
        MOVW      DE, AX             ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
// 8663       date_time(TempTime.day,TempTime.month,TempTime.year,TempTime.hour,TempTime.min,TempTime.sec,0);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       A, N:_TempTime     ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_TempTime+1   ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_TempTime+2   ;; 1 cycle
        MOV       C, N:_TempTime+6   ;; 1 cycle
        MOV       X, N:_TempTime+5   ;; 1 cycle
        MOV       A, N:_TempTime+3   ;; 1 cycle
          CFI FunCall _date_time
        CALL      _date_time         ;; 3 cycles
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+16
        ; ------------------------------------- Block: 38 cycles
// 8664     }
// 8665     
// 8666     if(obis_code[4] == 99)
??dlms_reset_data_905:
        CMP       N:_obis_code+4, #0x63  ;; 1 cycle
        BNZ       ??dlms_reset_data_906  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8667     {
// 8668       if(sel_obj_tamper[1] == 1)              /* Event code for debug profile*/
        CMP       N:_sel_obj_tamper+1, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_904  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8669       {
// 8670         val_2byt(opr_data[5], opr_data[6]);
        MOV       X, N:_opr_data+6   ;; 1 cycle
        MOV       A, N:_opr_data+5   ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
        BR        S:??dlms_reset_data_904  ;; 3 cycles
        ; ------------------------------------- Block: 8 cycles
// 8671       }
// 8672     }
// 8673     else
// 8674     {
// 8675       if(sel_obj_tamper[1] == 1)              /* Event code */
??dlms_reset_data_906:
        CMP       N:_sel_obj_tamper+1, #0x1  ;; 1 cycle
        BNZ       ??dlms_reset_data_904  ;; 4 cycles
        ; ------------------------------------- Block: 5 cycles
// 8676       {
// 8677         val_2byt(0, opr_data[5]);
        MOV       X, N:_opr_data+5   ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
          CFI FunCall _val_2byt
        CALL      _val_2byt          ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 8678       }
// 8679     }
// 8680   }
// 8681 }
??dlms_reset_data_904:
        ADDW      SP, #0xC           ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock93
        ; ------------------------------------- Block: 7 cycles
        ; ------------------------------------- Total: 490 cycles

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock94 Using cfiCommon2
          CFI Function _data_dump_dlms
        CODE
// 8682 void data_dump_dlms(us8 eep_no, us8 eep_block, us8 no_of_block)
// 8683 {
_data_dump_dlms:
        ; * Stack frame (at entry) *
        ; Param size: 0
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+6
        PUSH      BC                 ;; 1 cycle
          CFI CFA SP+8
        ; Auto size: 16
        SUBW      SP, #0xC           ;; 1 cycle
          CFI CFA SP+20
// 8684   us8 eep_id, page_index;
// 8685   us16 buffer_cnt;
// 8686   us32 address_start,address_stop;
// 8687   
// 8688   address_start = (us32)eep_block * 256u;
        MOV       A, [SP+0x0E]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      [SP+0x04], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      [SP+0x06], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8689   address_stop = (us32)address_start + no_of_block * 256u;
        MOV       A, [SP+0x0C]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOVW      BC, #0x100         ;; 1 cycle
        MULHU                        ;; 2 cycles
        MOVW      DE, AX             ;; 1 cycle
        MOVW      HL, #0x0           ;; 1 cycle
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        ADDW      AX, DE             ;; 1 cycle
        SKNC
        INCW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        ADDW      AX, HL             ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        XCHW      AX, HL             ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
        XCHW      AX, HL             ;; 1 cycle
        MOVW      [HL], AX           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
// 8690   if(address_stop > 0xFFFF)
        MOVW      AX, [SP+0x0A]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP+0x08]      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        CMPW      AX, #0x1           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        SKNZ                         ;; 1 cycle
        ; ------------------------------------- Block: 48 cycles
        CMPW      AX, #0x0           ;; 1 cycle
        ; ------------------------------------- Block: 1 cycles
??data_dump_dlms_0:
        BC        ??dlms_reset_data_907  ;; 4 cycles
        ; ------------------------------------- Block: 4 cycles
// 8691   {
// 8692     address_stop = 0xFFFF;
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, #0xFFFF        ;; 1 cycle
        MOVW      [HL], AX           ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
        ; ------------------------------------- Block: 7 cycles
// 8693   }
// 8694   if(eep_no == 1)
??dlms_reset_data_907:
        MOV       A, [SP+0x0F]       ;; 1 cycle
        CMP       A, #0x1            ;; 1 cycle
        SKNZ                         ;; 4 cycles
        BR        N:??dlms_reset_data_908  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 8695   {
// 8696     /* FRAM Not availbe so commented */
// 8697     //        epp_page= 0;
// 8698     //        while(epp_page < 0x0100) /* sanjay while loop can be used MISRA-C 13.5 rule */
// 8699     //        {
// 8700     //            if(req_cnt == 0)
// 8701     //            {
// 8702     //                address_stop= address_start + epp_page;
// 8703     //                read_from_16(address_stop);
// 8704     //                trn_buf[0]= address_stop / 256;
// 8705     //                trn_buf[1]= address_stop % 256;
// 8706     //                for(index= 0; index < 16; index++)
// 8707     //                {
// 8708     //                    trn_buf[index + 2]= *(&OPR10 + index);
// 8709     //                }
// 8710     //                req_cnt= 18;
// 8711     //                trn_cnt= 0;
// 8712     //                send_data_to_uart();
// 8713     //                epp_page+= 0x10;
// 8714     //            }
// 8715     //            
// 8716     //            wdt= 1;
// 8717     //        }
// 8718   }
// 8719   else if(eep_no < 8)
        MOV       A, [SP+0x0F]       ;; 1 cycle
        CMP       A, #0x8            ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_908  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 8720   {
// 8721     if(eep_no == 2)
        MOV       A, [SP+0x0F]       ;; 1 cycle
        CMP       A, #0x2            ;; 1 cycle
        BNZ       ??dlms_reset_data_909  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 8722     {
// 8723       eep_id = 0;
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        BR        S:??dlms_reset_data_910  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 8724     }
// 8725     else if(eep_no == 3)
??dlms_reset_data_909:
        MOV       A, [SP+0x0F]       ;; 1 cycle
        CMP       A, #0x3            ;; 1 cycle
        BNZ       ??dlms_reset_data_911  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 8726     {
// 8727       eep_id = 1;
        MOV       A, #0x1            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        BR        S:??dlms_reset_data_910  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 8728     }
// 8729     else if(eep_no == 4)
??dlms_reset_data_911:
        MOV       A, [SP+0x0F]       ;; 1 cycle
        CMP       A, #0x4            ;; 1 cycle
        BNZ       ??dlms_reset_data_912  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 8730     {
// 8731       eep_id = 2;
        MOV       A, #0x2            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        BR        S:??dlms_reset_data_910  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 8732     }
// 8733     else if(eep_no == 5)
??dlms_reset_data_912:
        MOV       A, [SP+0x0F]       ;; 1 cycle
        CMP       A, #0x5            ;; 1 cycle
        BNZ       ??dlms_reset_data_913  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 8734     {
// 8735       eep_id = 3;
        MOV       A, #0x3            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        BR        S:??dlms_reset_data_910  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 8736     }
// 8737     else if(eep_no == 6)
??dlms_reset_data_913:
        MOV       A, [SP+0x0F]       ;; 1 cycle
        CMP       A, #0x6            ;; 1 cycle
        BNZ       ??dlms_reset_data_914  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 8738     {
// 8739       eep_id = 4;
        MOV       A, #0x4            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        BR        S:??dlms_reset_data_910  ;; 3 cycles
        ; ------------------------------------- Block: 5 cycles
// 8740     }
// 8741     else if(eep_no == 7)
??dlms_reset_data_914:
        MOV       A, [SP+0x0F]       ;; 1 cycle
        CMP       A, #0x7            ;; 1 cycle
        BNZ       ??dlms_reset_data_910  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 8742     {
// 8743       eep_id = 5;
        MOV       A, #0x5            ;; 1 cycle
        MOV       [SP+0x01], A       ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
// 8744     }
// 8745     
// 8746     while(address_start < address_stop)
??dlms_reset_data_910:
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x8           ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        CMP       A, [HL+0x03]       ;; 1 cycle
        BNZ       ??dlms_reset_data_915  ;; 4 cycles
        ; ------------------------------------- Block: 12 cycles
        MOV       A, C               ;; 1 cycle
        CMP       A, [HL+0x02]       ;; 1 cycle
        BNZ       ??dlms_reset_data_915  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, B               ;; 1 cycle
        CMP       A, [HL+0x01]       ;; 1 cycle
        BNZ       ??dlms_reset_data_915  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
        MOV       A, X               ;; 1 cycle
        CMP       A, [HL]            ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??dlms_reset_data_915:
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_908  ;; 4 cycles
        ; ------------------------------------- Block: 4 cycles
// 8747     {
// 8748       buffer_cnt = 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 8749       eprom_read(address_start,eep_id,PAGE_8,NO_CALC);              /* reading 128 bytes */
        MOV       E, #0x1            ;; 1 cycle
        MOV       B, #0x7            ;; 1 cycle
        MOV       A, [SP+0x01]       ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        MOVW      AX, [SP+0x04]      ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 8750       for(page_index = 0; page_index < 128; page_index++)
        MOV       A, #0x0            ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        ; ------------------------------------- Block: 12 cycles
??data_dump_dlms_1:
        MOV       A, [SP]            ;; 1 cycle
        CMP       A, #0x80           ;; 1 cycle
        BNC       ??dlms_reset_data_916  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 8751       {
// 8752         if(page_index % 16 == 0)
        MOV       X, #0x10           ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
          CFI FunCall ?UC_MOD_L01
        CALL      N:?UC_MOD_L01      ;; 3 cycles
        MOV       B, A               ;; 1 cycle
        CMP0      B                  ;; 1 cycle
        BNZ       ??dlms_reset_data_917  ;; 4 cycles
        ; ------------------------------------- Block: 11 cycles
// 8753         {
// 8754           trn_buf[buffer_cnt++] =  address_start / 256u;
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        CLRB      X                  ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       (_trn_buf)[BC], A  ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      HL, AX             ;; 1 cycle
        INCW      HL                 ;; 1 cycle
// 8755           trn_buf[buffer_cnt++] =  (address_start+page_index) % 256u;
        MOV       A, [SP+0x04]       ;; 1 cycle
        MOV       X, A               ;; 1 cycle
        MOV       A, [SP]            ;; 1 cycle
        ADD       A, X               ;; 1 cycle
        PUSH      HL                 ;; 1 cycle
          CFI CFA SP+22
        POP       BC                 ;; 1 cycle
          CFI CFA SP+20
        MOV       (_trn_buf)[BC], A  ;; 1 cycle
        INCW      HL                 ;; 1 cycle
        XCHW      AX, HL             ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
        XCHW      AX, HL             ;; 1 cycle
        ; ------------------------------------- Block: 23 cycles
// 8756         }
// 8757         trn_buf[buffer_cnt++] = opr_data[page_index];
??dlms_reset_data_917:
        MOV       A, [SP]            ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        MOV       A, (_opr_data)[B]  ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       (_trn_buf)[BC], A  ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
// 8758       }
        MOV       A, [SP]            ;; 1 cycle
        INC       A                  ;; 1 cycle
        MOV       [SP], A            ;; 1 cycle
        BR        S:??data_dump_dlms_1  ;; 3 cycles
        ; ------------------------------------- Block: 18 cycles
// 8759       req_cnt = buffer_cnt;
??dlms_reset_data_916:
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        MOVW      N:_req_cnt, AX     ;; 1 cycle
// 8760       trn_cnt = 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_trn_cnt, AX     ;; 1 cycle
// 8761       send_data_to_uart();
          CFI FunCall _send_data_to_uart
        CALL      _send_data_to_uart  ;; 3 cycles
        ; ------------------------------------- Block: 7 cycles
// 8762       while(req_cnt != 0);
??data_dump_dlms_2:
        CLRW      AX                 ;; 1 cycle
        CMPW      AX, N:_req_cnt     ;; 1 cycle
        BNZ       ??data_dump_dlms_2  ;; 4 cycles
          CFI FunCall _R_WDT_Restart
        ; ------------------------------------- Block: 6 cycles
// 8763       wdt_restart();
        CALL      _R_WDT_Restart     ;; 3 cycles
// 8764       address_start += 128;
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        MOVW      BC, AX             ;; 1 cycle
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        ADDW      AX, #0x80          ;; 1 cycle
        SKNC
        INCW      BC                 ;; 5 cycles
        XCHW      AX, BC             ;; 1 cycle
        ADDW      AX, #0x0           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        XCHW      AX, HL             ;; 1 cycle
        MOVW      AX, SP             ;; 1 cycle
        ADDW      AX, #0x4           ;; 1 cycle
        XCHW      AX, HL             ;; 1 cycle
        MOVW      [HL], AX           ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        MOVW      [HL+0x02], AX      ;; 1 cycle
        XCHW      AX, BC             ;; 1 cycle
        BR        N:??dlms_reset_data_910  ;; 3 cycles
        ; ------------------------------------- Block: 26 cycles
// 8765     }
// 8766   }
// 8767 }
??dlms_reset_data_908:
        ADDW      SP, #0x10          ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock94
        ; ------------------------------------- Block: 7 cycles
        ; ------------------------------------- Total: 281 cycles
// 8768 

        SECTION `.text`:CODE:NOROOT(0)
          CFI Block cfiBlock95 Using cfiCommon0
          CFI Function _dlms_reset_data
        CODE
// 8769 void dlms_reset_data()
// 8770 {
_dlms_reset_data:
        ; * Stack frame (at entry) *
        ; Param size: 0
        ; Auto size: 2
        SUBW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+6
// 8771   uint16_t m1;
// 8772   //    metrology_stop();
// 8773   //    LED_ECAL_LOW;
// 8774   //    LED_RCAL_LOW;
// 8775   
// 8776   
// 8777   fill_oprzero(128);
        MOV       A, #0x80           ;; 1 cycle
          CFI FunCall _fill_oprzero
        CALL      _fill_oprzero      ;; 3 cycles
// 8778   energy_rollover_count = 0;
        MOV       N:_energy_rollover_count, #0x0  ;; 1 cycle
// 8779   energy_rollover_f = 0;
        CLR1      N:_flag_metro3.3   ;; 2 cycles
// 8780   eprom_write(0x07A0,0,16,PAGE_1,AUTO_CALC); /* Rollover flag */
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+8
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x7A0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8781           
// 8782   energy_clear();    
          CFI FunCall _energy_clear
        CALL      _energy_clear      ;; 3 cycles
// 8783   
// 8784   eprom_write(TOD_CUR_BILL_BLK1,0,128,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+10
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x80          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x1600        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8785   eprom_write(TOD_CUR_BILL_BLK2,0,128,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x80          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x1680        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8786   eprom_write(TOD_CUR_BILL_BLK3,0,128,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x80          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x1700        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8787   //  eprom_write(TOU_VAR_SAVE,0,16,PAGE_1,AUTO_CALC);
// 8788   
// 8789   for(m1=0;m1<12;m1++)
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [SP+0x08], AX      ;; 1 cycle
        ADDW      SP, #0x8           ;; 1 cycle
          CFI CFA SP+6
        ; ------------------------------------- Block: 50 cycles
??dlms_reset_data_918:
        MOVW      AX, [SP]           ;; 1 cycle
        CMPW      AX, #0xC           ;; 1 cycle
        BNC       ??dlms_reset_data_919  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 8790   {
// 8791     eprom_write((BILL_START_ADD+(m1 * BILL_JUMP_PG)),0,80,PAGE_5,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+8
        MOV       B, #0x4            ;; 1 cycle
        MOVW      DE, #0x50          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       H, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+10
        XCH       A, C               ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        MOVW      BC, #0xA0          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x1800        ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        POP       DE                 ;; 1 cycle
          CFI CFA SP+8
        XCH       A, H               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8792   }
        MOVW      AX, [SP+0x02]      ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        MOVW      [SP+0x02], AX      ;; 1 cycle
        ADDW      SP, #0x2           ;; 1 cycle
          CFI CFA SP+6
        BR        S:??dlms_reset_data_918  ;; 3 cycles
        ; ------------------------------------- Block: 34 cycles
// 8793   for(m1=0;m1<12;m1++)
??dlms_reset_data_919:
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      [SP], AX           ;; 1 cycle
        ; ------------------------------------- Block: 2 cycles
??dlms_reset_data_920:
        MOVW      AX, [SP]           ;; 1 cycle
        CMPW      AX, #0xC           ;; 1 cycle
        SKC                          ;; 4 cycles
        BR        N:??dlms_reset_data_921  ;; 4 cycles
        ; ------------------------------------- Block: 6 cycles
// 8794   {
// 8795     eprom_write((BILL_TOD_CUR_BILL_BLK1+(m1 * 0x80)),0,128,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+8
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x80          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       H, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+10
        XCH       A, C               ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOVW      AX, [SP+0x04]      ;; 1 cycle
        MOVW      BC, #0x80          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x2000        ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        POP       DE                 ;; 1 cycle
          CFI CFA SP+8
        XCH       A, H               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8796     eprom_write((BILL_TOD_CUR_BILL_BLK2+(m1 * 0x80)),0,128,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+10
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x80          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       H, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+12
        XCH       A, C               ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOVW      AX, [SP+0x06]      ;; 1 cycle
        MOVW      BC, #0x80          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x2600        ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        POP       DE                 ;; 1 cycle
          CFI CFA SP+10
        XCH       A, H               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8797     eprom_write((BILL_TOD_CUR_BILL_BLK3+(m1 * 0x80)),0,128,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x80          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       H, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+14
        XCH       A, C               ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOVW      AX, [SP+0x08]      ;; 1 cycle
        MOVW      BC, #0x80          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x2C00        ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        POP       DE                 ;; 1 cycle
          CFI CFA SP+12
        XCH       A, H               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8798     eprom_write((BILL_TOD_MD_KW_ADDR+(m1 * 0x80)),0,128,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x80          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       H, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+16
        XCH       A, C               ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOVW      AX, [SP+0x0A]      ;; 1 cycle
        MOVW      BC, #0x80          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x3200        ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        POP       DE                 ;; 1 cycle
          CFI CFA SP+14
        XCH       A, H               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8799     eprom_write((BILL_TOD_MD_KVA_ADDR+(m1 * 0x80)),0,128,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x80          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        MOV       H, A               ;; 1 cycle
        XCH       A, B               ;; 1 cycle
        PUSH      DE                 ;; 1 cycle
          CFI CFA SP+18
        XCH       A, C               ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        XCH       A, C               ;; 1 cycle
        MOVW      AX, [SP+0x0C]      ;; 1 cycle
        MOVW      BC, #0x80          ;; 1 cycle
        MULHU                        ;; 2 cycles
        ADDW      AX, #0x3800        ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        MOV       C, A               ;; 1 cycle
        XCH       A, D               ;; 1 cycle
        POP       DE                 ;; 1 cycle
          CFI CFA SP+16
        XCH       A, H               ;; 1 cycle
        MOV       B, A               ;; 1 cycle
        XCH       A, H               ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8800   }
        MOVW      AX, [SP+0x0A]      ;; 1 cycle
        INCW      AX                 ;; 1 cycle
        MOVW      [SP+0x0A], AX      ;; 1 cycle
        ADDW      SP, #0xA           ;; 1 cycle
          CFI CFA SP+6
        BR        N:??dlms_reset_data_920  ;; 3 cycles
        ; ------------------------------------- Block: 142 cycles
// 8801   eprom_write(0X07D0,0,32,PAGE_1,AUTO_CALC);
??dlms_reset_data_921:
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+8
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x20          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x7D0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8802   eprom_write(0X0C70,0,32,PAGE_2,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+10
        MOV       B, #0x1            ;; 1 cycle
        MOVW      DE, #0x20          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xC70         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8803   eprom_write(0X07C0,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x7C0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8804   
// 8805   
// 8806   /* MD Related data */
// 8807   reset_md();
          CFI FunCall _reset_md
        CALL      _reset_md          ;; 3 cycles
// 8808   reset_md_fg();
          CFI FunCall _reset_md_fg
        CALL      _reset_md_fg       ;; 3 cycles
// 8809   cum_max_demand_kw=0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_cum_max_demand_kw, AX  ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_cum_max_demand_kw+2, AX  ;; 1 cycle
// 8810   cum_max_demand_kva=0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_cum_max_demand_kva, AX  ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_cum_max_demand_kva+2, AX  ;; 1 cycle
// 8811   
// 8812   last_bill_tpr_read[0]= 0;
        MOV       N:_last_bill_tpr_read, #0x0  ;; 1 cycle
// 8813   last_bill_tpr_read[1]= 0;
        MOV       N:_last_bill_tpr_read+1, #0x0  ;; 1 cycle
// 8814   bill_pf= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_bill_pf, AX     ;; 1 cycle
// 8815   current_bill_pf= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_current_bill_pf, AX  ;; 1 cycle
// 8816   bill_pom[0]= 0;
        MOV       N:_bill_pom, #0x0  ;; 1 cycle
// 8817   bill_pom[1]= 0;
        MOV       N:_bill_pom+1, #0x0  ;; 1 cycle
// 8818   bill_pom[2]= 0;
        MOV       N:_bill_pom+2, #0x0  ;; 1 cycle
// 8819   bill_energy_import= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_bill_energy_import, AX  ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_bill_energy_import+2, AX  ;; 1 cycle
// 8820   bill_energy_export= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_bill_energy_export, AX  ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_bill_energy_export+2, AX  ;; 1 cycle
// 8821   bill_apparent_energy= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_bill_apparent_energy, AX  ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_bill_apparent_energy+2, AX  ;; 1 cycle
// 8822   bill_reactive_energy_lag= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_bill_reactive_energy_lag, AX  ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_bill_reactive_energy_lag+2, AX  ;; 1 cycle
// 8823   bill_reactive_energy_lead= 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_bill_reactive_energy_lead, AX  ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_bill_reactive_energy_lead+2, AX  ;; 1 cycle
// 8824   bill_tpr_cnt= 0;
        MOV       N:_bill_tpr_cnt, #0x0  ;; 1 cycle
// 8825   md_reset_count= 0;
        MOV       N:_md_reset_count, #0x0  ;; 1 cycle
// 8826   //bill_count=0;
// 8827   /* *********daily energy*************** */ 
// 8828   midnight_par_cnt=0;
        MOV       N:_midnight_par_cnt, #0x0  ;; 1 cycle
// 8829   midnight_roll_f=0;
        MOV       N:_midnight_roll_f, #0x0  ;; 1 cycle
// 8830   midnight_fill_rtc_f=0;
        MOV       N:_midnight_fill_rtc_f, #0x0  ;; 1 cycle
// 8831   eprom_write(DAILY_ENERGY_STATUS,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x6300        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8832   eprom_write(DLOADSURVEY_INIT_ADD,0,8960,PAGE_8,AUTO_CALC);//block no 0x40-0x62 reserved for daily energy
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       B, #0x7            ;; 1 cycle
        MOVW      DE, #0x2300        ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x4000        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8833   
// 8834   /* ************************ */ 
// 8835   
// 8836   /* RTC Related */
// 8837   eprom_write(0x0B30,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xB30         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8838   
// 8839   /* ********* CLEAR ALL THE LOCATION ABOVE THIS LINE *************** */
// 8840   
// 8841   GetNextDate(present_min, present_hr, present_date, present_month, present_year, bill_min, bill_hr, bill_date, 0);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       A, N:_bill_date    ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        XCH       A, X               ;; 1 cycle
        MOV       A, N:_bill_hr      ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        XCH       A, X               ;; 1 cycle
        MOV       A, N:_bill_min     ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_Now+6        ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_Now+5        ;; 1 cycle
        MOV       C, N:_Now+3        ;; 1 cycle
        MOV       X, N:_Now+2        ;; 1 cycle
        MOV       A, N:_Now+1        ;; 1 cycle
          CFI FunCall _GetNextDate
        CALL      _GetNextDate       ;; 3 cycles
// 8842   
// 8843   METERING_MODE = FWD;
        MOV       N:_METERING_MODE, #0x0  ;; 1 cycle
// 8844   eprom_read(0x0F20,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xF20         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 8845   opr_data[0] = METERING_MODE;
        MOV       A, N:_METERING_MODE  ;; 1 cycle
        MOV       N:_opr_data, A     ;; 1 cycle
// 8846   eprom_write(0x0F20,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xF20         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8847   
// 8848   battery_installed = COINCELL;
        SET1      N:_flag_battery.2  ;; 2 cycles
// 8849   eprom_read(0x0F30,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xF30         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 8850   opr_data[0] = battery_installed;
        MOVW      HL, #LWRD(_flag_battery)  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV1      CY, [HL].2         ;; 1 cycle
        ROLC      A, 0x1             ;; 1 cycle
        MOV       N:_opr_data, A     ;; 1 cycle
// 8851   eprom_write(0x0F30,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+28
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xF30         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8852   
// 8853   
// 8854   /* ***********dlms LS configuration***************** */
// 8855   fill_oprzero(16);
        MOV       A, #0x10           ;; 1 cycle
          CFI FunCall _fill_oprzero
        CALL      _fill_oprzero      ;; 3 cycles
// 8856   opr_data[0]= MAX_LS_OBJ;
        MOV       N:_opr_data, #0xB  ;; 1 cycle
// 8857   memcpy(&opr_data[1], &count_no, MAX_LS_OBJ);
        MOVW      DE, #LWRD(_count_no)  ;; 1 cycle
        MOVW      HL, #LWRD(_opr_data+1)  ;; 1 cycle
        MOV       B, #0xB            ;; 1 cycle
          CFI FunCall ?MEMCPY_SMALL_NEAR
        CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
// 8858   eprom_write(0x6310,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+30
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x6310        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8859   
// 8860   fill_oprzero(16);
        MOV       A, #0x10           ;; 1 cycle
          CFI FunCall _fill_oprzero
        CALL      _fill_oprzero      ;; 3 cycles
// 8861   eprom_write(0x6320,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+32
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x6320        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8862   
// 8863   /* Tamper data reset */
// 8864   memory_log_reset();
          CFI FunCall _memory_log_reset
        CALL      _memory_log_reset  ;; 3 cycles
// 8865   reset_load_survey();
          CFI FunCall _reset_load_survey
        CALL      _reset_load_survey  ;; 3 cycles
// 8866   /* ********* DO NOT CLEAR ANY LOCATION BELOW THIS LINE *************** */
// 8867   rtc_get();
          CFI FunCall _rtc_get
        CALL      _rtc_get           ;; 3 cycles
// 8868   /* *********FG date and time*************** */
// 8869   eprom_read(FG_DATE_AND_TIME,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFD0         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 8870   opr_data[0]= present_min;
        MOV       A, N:_Now+1        ;; 1 cycle
        MOV       N:_opr_data, A     ;; 1 cycle
// 8871   opr_data[1]= present_hr;
        MOV       A, N:_Now+2        ;; 1 cycle
        MOV       N:_opr_data+1, A   ;; 1 cycle
// 8872   opr_data[2]= present_date;
        MOV       A, N:_Now+3        ;; 1 cycle
        MOV       N:_opr_data+2, A   ;; 1 cycle
// 8873   opr_data[3]= present_month;
        MOV       A, N:_Now+5        ;; 1 cycle
        MOV       N:_opr_data+3, A   ;; 1 cycle
// 8874   opr_data[4]= present_year;
        MOV       A, N:_Now+6        ;; 1 cycle
        MOV       N:_opr_data+4, A   ;; 1 cycle
// 8875   eprom_write(FG_DATE_AND_TIME,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+34
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFD0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8876   
// 8877   
// 8878   save_pwr_dwn_time();
          CFI FunCall _save_pwr_dwn_time
        CALL      _save_pwr_dwn_time  ;; 3 cycles
// 8879   power_on_min = 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_power_on_min, AX  ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_power_on_min+2, AX  ;; 1 cycle
// 8880   power_off_min = 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_power_off_min, AX  ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_power_off_min+2, AX  ;; 1 cycle
// 8881   flag_power_off = 0;
        CLR1      N:_flag_tamper2.0  ;; 2 cycles
// 8882   save_pom(); 
          CFI FunCall _save_pom
        CALL      _save_pom          ;; 3 cycles
// 8883   
// 8884   bat_mode_secs = 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_bat_mode_secs, AX  ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_bat_mode_secs+2, AX  ;; 1 cycle
// 8885   save_bat_mode_time();
          CFI FunCall _save_bat_mode_time
        CALL      _save_bat_mode_time  ;; 3 cycles
// 8886   /* Load srvey */
// 8887   
// 8888   TempTime = Now;
        MOVW      HL, #LWRD(_TempTime)  ;; 1 cycle
        MOVW      DE, #LWRD(_Now)    ;; 1 cycle
        MOV       A, [DE]            ;; 1 cycle
        MOV       [HL], A            ;; 1 cycle
        MOV       A, [DE+0x01]       ;; 1 cycle
        MOV       [HL+0x01], A       ;; 1 cycle
        MOV       A, [DE+0x02]       ;; 1 cycle
        MOV       [HL+0x02], A       ;; 1 cycle
        MOV       A, [DE+0x03]       ;; 1 cycle
        MOV       [HL+0x03], A       ;; 1 cycle
        MOV       A, [DE+0x04]       ;; 1 cycle
        MOV       [HL+0x04], A       ;; 1 cycle
        MOV       A, [DE+0x05]       ;; 1 cycle
        MOV       [HL+0x05], A       ;; 1 cycle
        MOV       A, [DE+0x06]       ;; 1 cycle
        MOV       [HL+0x06], A       ;; 1 cycle
// 8889   TempTime.hour = 0;
        MOV       N:_TempTime+2, #0x0  ;; 1 cycle
// 8890   TempTime.min = decimal_to_bcd(lsip_period);
        MOV       A, N:_lsip_period  ;; 1 cycle
          CFI FunCall _decimal_to_bcd
        CALL      _decimal_to_bcd    ;; 3 cycles
        MOV       N:_TempTime+1, A   ;; 1 cycle
// 8891   
// 8892   //    lsip_period = 30;
// 8893   //    mdi_sel_ls = 2;
// 8894   max_load_survey_cnt = MAX_LS;
        MOVW      AX, #0xE40         ;; 1 cycle
        MOVW      N:_max_load_survey_cnt, AX  ;; 1 cycle
// 8895   seq_no_ls = 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_seq_no_ls, AX   ;; 1 cycle
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_seq_no_ls+2, AX  ;; 1 cycle
// 8896   ls_fg_f = 1;
        MOV       N:_ls_fg_f, #0x1   ;; 1 cycle
// 8897   ls_rtc_fill= 0;
        MOV       N:_ls_rtc_fill, #0x0  ;; 1 cycle
// 8898   ls_rev_fill= 0;
        MOV       N:_ls_rev_fill, #0x0  ;; 1 cycle
// 8899   ls_miss_fill();
          CFI FunCall _ls_miss_fill
        CALL      _ls_miss_fill      ;; 3 cycles
// 8900   
// 8901   eprom_read(0x0FC0,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFC0         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 8902   opr_data[2]=0x01;
        MOV       N:_opr_data+2, #0x1  ;; 1 cycle
// 8903   opr_data[3]=0x00;
        MOV       N:_opr_data+3, #0x0  ;; 1 cycle
// 8904   eprom_write(0x0FC0,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+36
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xFC0         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8905   
// 8906   
// 8907   fg_done_f = 1;
        SET1      N:_flag1.1         ;; 2 cycles
// 8908   eprom_read(0x0180,0,PAGE_1,AUTO_CALC);
        MOV       E, #0x0            ;; 1 cycle
        MOV       B, #0x0            ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x180         ;; 1 cycle
          CFI FunCall _eprom_read
        CALL      _eprom_read        ;; 3 cycles
// 8909   opr_data[0] = fg_done_f;
        MOVW      HL, #LWRD(_flag1)  ;; 1 cycle
        MOV       A, #0x0            ;; 1 cycle
        MOV1      CY, [HL].1         ;; 1 cycle
        ROLC      A, 0x1             ;; 1 cycle
        MOV       N:_opr_data, A     ;; 1 cycle
// 8910   time_into_char_array6_sec(Now,&opr_data[1]);
        MOVW      HL, #LWRD(_Now)    ;; 1 cycle
        SUBW      SP, #0x8           ;; 1 cycle
          CFI CFA SP+44
        MOVW      DE, SP             ;; 1 cycle
        MOVW      BC, #0x8           ;; 1 cycle
          CFI FunCall ?MOVE_LONG_L06
        CALL      N:?MOVE_LONG_L06   ;; 3 cycles
        MOVW      AX, #LWRD(_opr_data+1)  ;; 1 cycle
          CFI FunCall _time_into_char_array6_sec
        CALL      _time_into_char_array6_sec  ;; 3 cycles
        ADDW      SP, #0x26          ;; 1 cycle
          CFI CFA SP+6
// 8911   opr_data[7]++;
        INC       N:_opr_data+7      ;; 2 cycles
// 8912   eprom_write(0x0180,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+8
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0x180         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8913   
// 8914   fill_oprzero(16);
        MOV       A, #0x10           ;; 1 cycle
          CFI FunCall _fill_oprzero
        CALL      _fill_oprzero      ;; 3 cycles
// 8915   flag_eeprom_error.all = 0;
        MOV       N:_flag_eeprom_error, #0x0  ;; 1 cycle
// 8916   error_cnt_eep = 0 ;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_error_cnt_eep, AX  ;; 1 cycle
// 8917   error_cnt_eep0 = 0 ;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_error_cnt_eep0, AX  ;; 1 cycle
// 8918   error_cnt_eep1 = 0 ;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_error_cnt_eep1, AX  ;; 1 cycle
// 8919   error_cnt_eep2 = 0;
        MOVW      AX, #0x0           ;; 1 cycle
        MOVW      N:_error_cnt_eep2, AX  ;; 1 cycle
// 8920   
// 8921   eprom_write(MEM_FAIL_ADDR_EEP0,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+10
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xB50         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8922   eprom_write(MEM_FAIL_ADDR_EEP0+0x10,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+12
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xB60         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8923   eprom_write(MEM_FAIL_ADDR_EEP0+0x20,0,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+14
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x0            ;; 1 cycle
        MOVW      AX, #0xB70         ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8924   
// 8925   eprom_write(MEM_FAIL_ADDR_EEP2,2,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+16
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x2            ;; 1 cycle
        MOVW      AX, #0xFFB0        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8926   eprom_write(MEM_FAIL_ADDR_EEP2+0x10,2,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+18
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x2            ;; 1 cycle
        MOVW      AX, #0xFFC0        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8927   eprom_write(MEM_FAIL_ADDR_EEP2+0x20,2,16,PAGE_1,AUTO_CALC);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+20
        MOV       B, #0x0            ;; 1 cycle
        MOVW      DE, #0x10          ;; 1 cycle
        MOV       C, #0x2            ;; 1 cycle
        MOVW      AX, #0xFFD0        ;; 1 cycle
          CFI FunCall _eprom_write
        CALL      _eprom_write       ;; 3 cycles
// 8928   
// 8929   lcd_write_msg(309,1);
        MOV       C, #0x1            ;; 1 cycle
        MOVW      AX, #0x135         ;; 1 cycle
          CFI FunCall _lcd_write_msg
        CALL      _lcd_write_msg     ;; 3 cycles
// 8930   GetNextDate(present_min, present_hr, present_date, present_month, present_year, bill_min, bill_hr, bill_date, 0);
        MOV       X, #0x0            ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+22
        MOV       A, N:_bill_date    ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+24
        XCH       A, X               ;; 1 cycle
        MOV       A, N:_bill_hr      ;; 1 cycle
        XCH       A, X               ;; 1 cycle
        PUSH      AX                 ;; 1 cycle
          CFI CFA SP+26
        XCH       A, X               ;; 1 cycle
        MOV       A, N:_bill_min     ;; 1 cycle
        MOV       D, A               ;; 1 cycle
        MOV       A, N:_Now+6        ;; 1 cycle
        MOV       E, A               ;; 1 cycle
        MOV       B, N:_Now+5        ;; 1 cycle
        MOV       C, N:_Now+3        ;; 1 cycle
        MOV       X, N:_Now+2        ;; 1 cycle
        MOV       A, N:_Now+1        ;; 1 cycle
          CFI FunCall _GetNextDate
        CALL      _GetNextDate       ;; 3 cycles
// 8931 }
        ADDW      SP, #0x16          ;; 1 cycle
          CFI CFA SP+4
        RET                          ;; 6 cycles
          CFI EndBlock cfiBlock95
        ; ------------------------------------- Block: 445 cycles
        ; ------------------------------------- Total: 685 cycles

        SECTION `.constf`:FARCODE:REORDER:NOROOT(1)
        SECTION_TYPE SHT_PROGBITS, SHF_WRITE

        SECTION `.constf`:FARCODE:REORDER:NOROOT(1)
        SECTION_TYPE SHT_PROGBITS, SHF_WRITE

        SECTION `.iar_vfe_header`:DATA:NOALLOC:NOROOT(1)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        END
// 
//    318 bytes in section .bss
//  4'264 bytes in section .data
//      1 byte  in section .sbss.noinit  (abs)
// 43'048 bytes in section .text
// 
// 43'048 bytes of CODE memory
//  4'566 bytes of DATA memory (+ 17 bytes shared)
//
//Errors: none
//Warnings: none
